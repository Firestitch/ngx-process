{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../src/lib/ng-package/entry-point/compile-ngc.transform.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as ts from 'typescript';\nimport * as ora from 'ora';\nimport { Transform, transformFromPromise } from '../../graph/transform';\nimport { compileSourceFiles } from '../../ngc/compile-source-files';\nimport { NgccProcessor } from '../../ngc/ngcc-processor';\nimport * as ivy from '../../ivy';\nimport { setDependenciesTsConfigPaths } from '../../ts/tsconfig';\nimport { isEntryPointInProgress, EntryPointNode, isEntryPoint } from '../nodes';\nimport { StylesheetProcessor as StylesheetProcessorClass } from '../../styles/stylesheet-processor';\nimport { NgPackagrOptions } from '../options.di';\n\nfunction isEnabled(variable: string | undefined): variable is string {\n  return typeof variable === 'string' && (variable === '1' || variable.toLowerCase() === 'true');\n}\n\nexport const compileNgcTransformFactory = (\n  StylesheetProcessor: typeof StylesheetProcessorClass,\n  options: NgPackagrOptions,\n): Transform => {\n  return transformFromPromise(async graph => {\n    const spinner = ora({\n      hideCursor: false,\n      discardStdin: false,\n    });\n\n    try {\n      const entryPoint: EntryPointNode = graph.find(isEntryPointInProgress());\n      const entryPoints: EntryPointNode[] = graph.filter(isEntryPoint);\n      // Add paths mappings for dependencies\n      const tsConfig = setDependenciesTsConfigPaths(entryPoint.data.tsConfig, entryPoints);\n\n      // Compile TypeScript sources\n      const { esm2015, declarations } = entryPoint.data.destinationFiles;\n      const { basePath, cssUrl, styleIncludePaths } = entryPoint.data.entryPoint;\n      const { moduleResolutionCache, ngccProcessingCache } = entryPoint.cache;\n\n      let ngccProcessor: NgccProcessor | undefined;\n      if (tsConfig.options.enableIvy !== false) {\n        spinner.start(`Compiling with Angular sources in Ivy ${tsConfig.options.compilationMode || 'full'} compilation mode.`);\n        ngccProcessor = new NgccProcessor(ngccProcessingCache, tsConfig.project, tsConfig.options, entryPoints);\n        if (!entryPoint.data.entryPoint.isSecondaryEntryPoint) {\n          // Only run the async version of NGCC during the primary entrypoint processing.\n          await ngccProcessor.process();\n        }\n      } else {\n        spinner.start(`Compiling with Angular in legacy View Engine compilation mode.`);\n      }\n\n      if (tsConfig.options.enableIvy !== false && !isEnabled(process.env['NG_BUILD_LIB_LEGACY'])) {\n        entryPoint.cache.stylesheetProcessor ??= new ivy.StylesheetProcessor(basePath, cssUrl, styleIncludePaths);\n\n        await ivy.compileSourceFiles(\n          graph,\n          tsConfig,\n          moduleResolutionCache,\n          {\n            outDir: path.dirname(esm2015),\n            declarationDir: path.dirname(declarations),\n            declaration: true,\n            target: ts.ScriptTarget.ES2015,\n          },\n          entryPoint.cache.stylesheetProcessor as any,\n          ngccProcessor,\n          options.watch,\n        );\n      } else {\n        entryPoint.cache.stylesheetProcessor ??= new StylesheetProcessor(basePath, cssUrl, styleIncludePaths);\n        await compileSourceFiles(\n          graph,\n          tsConfig,\n          moduleResolutionCache,\n          entryPoint.cache.stylesheetProcessor as any,\n          {\n            outDir: path.dirname(esm2015),\n            declarationDir: path.dirname(declarations),\n            declaration: true,\n            target: ts.ScriptTarget.ES2015,\n          },\n          ngccProcessor,\n        );\n      }\n    } catch (error) {\n      spinner.fail();\n      throw error;\n    }\n\n    spinner.succeed();\n    return graph;\n  });\n};\n"]}