{"version":3,"file":"rollup.js","sourceRoot":"","sources":["../../../src/lib/flatten/rollup.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AACjC,qEAAsD;AACtD,uDAAuD;AACvD,oDAAoD;AACpD,kDAAkD;AAClD,oCAAoC;AACpC,qEAA+D;AAE/D,6BAA6B;AAmB7B,mEAAmE;AAC5D,KAAK,UAAU,gBAAgB,CAAC,IAAmB;IACxD,GAAG,CAAC,KAAK,CAAC,YAAY,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC,KAAK,OAAO,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAExF,oBAAoB;IACpB,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC;QACjC,OAAO,EAAE,MAAM;QACf,QAAQ,EAAE,QAAQ,CAAC,EAAE,CAAC,oBAAoB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC;QACjE,oBAAoB,EAAE,KAAK;QAC3B,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,KAAK,EAAE,IAAI,CAAC,KAAK;QACjB,OAAO,EAAE;YACP,aAAa;YACb,UAAU,EAAE;YACZ,aAAa;YACb,6BAAW,EAAE;YACb,aAAa;YACb,QAAQ,EAAE;YACV,aAAa;YACb,UAAU,EAAE;YACZ,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE;SAC9B;QACD,MAAM,EAAE,OAAO,CAAC,EAAE;YAChB,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;gBAC/B,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aACnB;iBAAM;gBACL,IAAI,OAAO,CAAC,IAAI,KAAK,mBAAmB,EAAE;oBACxC,OAAO;iBACR;gBAED,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;aAC3B;QACH,CAAC;QACD,gBAAgB,EAAE,IAAI;QACtB,8CAA8C;QAC9C,qDAAqD;QACrD,SAAS,EAAE,KAAK;KACjB,CAAC,CAAC;IAEH,4BAA4B;IAC5B,MAAM,MAAM,CAAC,KAAK,CAAC;QACjB,IAAI,EAAE,IAAI,CAAC,UAAU;QACrB,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,GAAG,EAAE,IAAI,CAAC,GAAG;QACb,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,MAAM,EAAE,EAAE;QACV,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC,4CAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC;QAC3E,SAAS,EAAE,IAAI;KAChB,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC,KAAK,CAAC;AACtB,CAAC;AAlDD,4CAkDC;AAED,SAAS,oBAAoB,CAAC,QAAgB,EAAE,MAA2B;IACzE,oEAAoE;IACpE,yFAAyF;IACzF,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;QACrF,yGAAyG;QACzG,OAAO,KAAK,CAAC;KACd;IAED,IAAI,MAAM,KAAK,KAAK,IAAI,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;QACpD,OAAO,KAAK,CAAC;KACd;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import * as rollup from 'rollup';\nimport nodeResolve from '@rollup/plugin-node-resolve';\nimport * as sourcemaps from 'rollup-plugin-sourcemaps';\nimport * as commonJs from '@rollup/plugin-commonjs';\nimport * as rollupJson from '@rollup/plugin-json';\nimport * as log from '../utils/log';\nimport { umdModuleIdStrategy } from './umd-module-id-strategy';\nimport { TransformHook } from 'rollup';\nimport * as path from 'path';\n\n/**\n * Options used in `ng-packagr` for writing flat bundle files.\n *\n * These options are passed through to rollup.\n */\nexport interface RollupOptions {\n  moduleName: string;\n  entry: string;\n  format: rollup.ModuleFormat;\n  dest: string;\n  sourceRoot: string;\n  umdModuleIds?: { [key: string]: string };\n  amd?: { id: string };\n  transform?: TransformHook;\n  cache?: rollup.RollupCache;\n}\n\n/** Runs rollup over the given entry file, writes a bundle file. */\nexport async function rollupBundleFile(opts: RollupOptions): Promise<rollup.RollupCache> {\n  log.debug(`rollup (v${rollup.VERSION}) ${opts.entry} to ${opts.dest} (${opts.format})`);\n\n  // Create the bundle\n  const bundle = await rollup.rollup({\n    context: 'this',\n    external: moduleId => isExternalDependency(moduleId, opts.format),\n    inlineDynamicImports: false,\n    cache: opts.cache,\n    input: opts.entry,\n    plugins: [\n      // @ts-ignore\n      rollupJson(),\n      // @ts-ignore\n      nodeResolve(),\n      // @ts-ignore\n      commonJs(),\n      // @ts-ignore\n      sourcemaps(),\n      { transform: opts.transform },\n    ],\n    onwarn: warning => {\n      if (typeof warning === 'string') {\n        log.warn(warning);\n      } else {\n        if (warning.code === 'THIS_IS_UNDEFINED') {\n          return;\n        }\n\n        log.warn(warning.message);\n      }\n    },\n    preserveSymlinks: true,\n    // Disable treeshaking when generating bundles\n    // see: https://github.com/angular/angular/pull/32069\n    treeshake: false,\n  });\n\n  // Output the bundle to disk\n  await bundle.write({\n    name: opts.moduleName,\n    format: opts.format,\n    amd: opts.amd,\n    file: opts.dest,\n    banner: '',\n    globals: moduleId => umdModuleIdStrategy(moduleId, opts.umdModuleIds || {}),\n    sourcemap: true,\n  });\n\n  return bundle.cache;\n}\n\nfunction isExternalDependency(moduleId: string, format: rollup.ModuleFormat): boolean {\n  // more information about why we don't check for 'node_modules' path\n  // https://github.com/rollup/rollup-plugin-node-resolve/issues/110#issuecomment-350353632\n  if (moduleId.startsWith('.') || moduleId.startsWith('/') || path.isAbsolute(moduleId)) {\n    // if it's either 'absolute', marked to embed, starts with a '.' or '/' or is the umd bundle and is tslib\n    return false;\n  }\n\n  if (format === 'umd' && moduleId.startsWith('tslib')) {\n    return false;\n  }\n\n  return true;\n}\n"]}