{"version":3,"file":"stylesheet-processor-worker.js","sourceRoot":"","sources":["../../../src/lib/styles/stylesheet-processor-worker.ts"],"names":[],"mappings":"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","sourcesContent":["import * as cacache from 'cacache';\nimport { createHash } from 'crypto';\nimport * as path from 'path';\nimport postcss, { LazyResult } from 'postcss';\nimport * as postcssUrl from 'postcss-url';\nimport { parentPort } from 'worker_threads';\nimport * as postcssPresetEnv from 'postcss-preset-env';\nimport { EsbuildExecutor } from '../esbuild/esbuild-executor';\n\nimport { CssUrl, WorkerOptions, WorkerResult } from './stylesheet-processor';\nimport { readFile } from '../utils/fs';\n\nconst ngPackagrVersion = require('../../package.json').version;\n\nasync function processCss({\n  filePath,\n  browserslistData,\n  cssUrl,\n  styleIncludePaths,\n  basePath,\n  cachePath,\n  targets,\n  alwaysUseWasm,\n}: WorkerOptions): Promise<WorkerResult> {\n  const esbuild = new EsbuildExecutor(alwaysUseWasm);\n  const content = await readFile(filePath, 'utf8');\n  let key: string | undefined;\n\n  if (!content.includes('@import') && !content.includes('@use')) {\n    // No transitive deps, we can cache more aggressively.\n    key = generateKey(content, browserslistData);\n    const result = await readCacheEntry(cachePath, key);\n    if (result) {\n      return result;\n    }\n  }\n\n  // Render pre-processor language (sass, styl, less)\n  const renderedCss = await renderCss(filePath, content, basePath, styleIncludePaths);\n\n  // We cannot cache CSS re-rendering phase, because a transitive dependency via (@import) can case different CSS output.\n  // Example a change in a mixin or SCSS variable.\n  if (!key) {\n    key = generateKey(renderedCss, browserslistData);\n\n    const cachedResult = await readCacheEntry(cachePath, key);\n    if (cachedResult) {\n      return cachedResult;\n    }\n  }\n\n  // Render postcss (autoprefixing and friends)\n  const result = await optimizeCss(filePath, renderedCss, browserslistData, cssUrl);\n  const warnings = result.warnings().map(w => w.toString());\n\n  const { code, warnings: esBuildWarnings } = await esbuild.transform(result.css, {\n    loader: 'css',\n    minify: true,\n    target: targets,\n    sourcefile: filePath,\n  });\n\n  if (esBuildWarnings.length > 0) {\n    warnings.push(...(await esbuild.formatMessages(esBuildWarnings, { kind: 'warning' })));\n  }\n\n  // Add to cache\n  await cacache.put(\n    cachePath,\n    key,\n    JSON.stringify({\n      css: code,\n      warnings,\n    }),\n  );\n\n  return {\n    css: code,\n    warnings,\n  };\n}\n\nasync function renderCss(\n  filePath: string,\n  css: string,\n  basePath: string,\n  styleIncludePaths?: string[],\n): Promise<string> {\n  const ext = path.extname(filePath);\n\n  switch (ext) {\n    case '.sass':\n    case '.scss': {\n      /*\n       * Please be aware of the few differences in behaviour https://github.com/sass/dart-sass/blob/master/README.md#behavioral-differences-from-ruby-sass\n       * By default `npm install` will install sass.\n       * To use node-sass you need to use:\n       *   Npm:\n       *     `npm install node-sass --save-dev`\n       *   Yarn:\n       *     `yarn add node-sass --dev`\n       */\n      let sassCompiler: any | undefined;\n      try {\n        sassCompiler = require('node-sass'); // Check if node-sass is explicitly included.\n      } catch {\n        sassCompiler = await import('sass');\n      }\n\n      return sassCompiler\n        .renderSync({\n          file: filePath,\n          data: css,\n          indentedSyntax: '.sass' === ext,\n          importer: await import('node-sass-tilde-importer'),\n          includePaths: styleIncludePaths,\n        })\n        .css.toString();\n    }\n    case '.less': {\n      const { css: content } = await (\n        await import('less')\n      ).render(css, {\n        filename: filePath,\n        javascriptEnabled: true,\n        paths: styleIncludePaths,\n        math: 'always',\n      });\n\n      return content;\n    }\n    case '.styl':\n    case '.stylus': {\n      const stylus = await import('stylus');\n\n      return (\n        stylus(css)\n          // add paths for resolve\n          .set('paths', [basePath, '.', ...styleIncludePaths, 'node_modules'])\n          // add support for resolving plugins from node_modules\n          .set('filename', filePath)\n          // turn on url resolver in stylus, same as flag --resolve-url\n          .set('resolve url', true)\n          .define('url', stylus.resolver(undefined))\n          .render()\n      );\n    }\n    case '.css':\n    default:\n      return css;\n  }\n}\n\nfunction optimizeCss(filePath: string, css: string, browsers: string[], cssUrl?: CssUrl): LazyResult {\n  const postCssPlugins = [];\n\n  if (cssUrl !== CssUrl.none) {\n    postCssPlugins.push(postcssUrl({ url: cssUrl }));\n  }\n\n  postCssPlugins.push(\n    postcssPresetEnv({\n      browsers,\n      autoprefixer: true,\n      stage: 3,\n    }),\n  );\n\n  return postcss(postCssPlugins).process(css, {\n    from: filePath,\n    to: filePath.replace(path.extname(filePath), '.css'),\n  });\n}\n\nfunction generateKey(content: string, browserslistData: string[]): string {\n  return createHash('sha1').update(ngPackagrVersion).update(content).update(browserslistData.join('')).digest('hex');\n}\n\nasync function readCacheEntry(cachePath: string, key: string): Promise<WorkerResult | undefined> {\n  const entry = await cacache.get.info(cachePath, key);\n  if (entry) {\n    return JSON.parse(await readFile(entry.path, 'utf8'));\n  }\n\n  return undefined;\n}\n\nparentPort.on('message', async ({ signal, port, workerOptions }) => {\n  try {\n    const result = await processCss(workerOptions);\n    port.postMessage({ ...result });\n  } catch (error) {\n    port.postMessage({ error: error.message });\n  } finally {\n    // Change the value of signal[0] to 1\n    Atomics.add(signal, 0, 1);\n    // Unlock the main thread\n    Atomics.notify(signal, 0);\n    port.close();\n  }\n});\n"]}