import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FsArray } from './services/array.service';
import { FsMath } from './services/math.service';
import { FsUtil } from './services/util.service';
import { FsValidate } from './services/vaildate.service';
import { FsUtilGuidPipe, FsUtilStringifyPipe, FsUtilIsEmptyPipe, FsUtilIsNotEmptyPipe, } from './pipes/util.pipe';
import { FsFormatNumberPipe } from './pipes/number.pipe';
import { FsFormatCurrencyPipe } from './pipes/currency.pipe';
import { FsFormatTruncatePipe } from './pipes/truncate.pipe';
import { FsFormatBytesPipe } from './pipes/bytes.pipe';
import { FsStopPropagationDirective } from './directives/stop-propagation.directive';
import { FsPreventDefaultDirective } from './directives/prevent-default.directive';
import { FsAutofocusDirective } from './directives/autofocus.directive';
import { FsFormatOrdinalNumberPipe } from './pipes/ordinal-number.pipe';
import * as i0 from "@angular/core";
export class FsCommonModule {
    static forRoot() {
        return {
            ngModule: FsCommonModule,
            providers: [
                FsArray,
                FsMath,
                FsUtil,
                FsValidate
            ]
        };
    }
}
FsCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsCommonModule, declarations: [FsStopPropagationDirective,
        FsPreventDefaultDirective,
        FsAutofocusDirective,
        FsUtilGuidPipe,
        FsUtilIsEmptyPipe,
        FsUtilIsNotEmptyPipe,
        FsUtilStringifyPipe,
        FsFormatNumberPipe,
        FsFormatCurrencyPipe,
        FsFormatTruncatePipe,
        FsFormatBytesPipe,
        FsFormatOrdinalNumberPipe], imports: [CommonModule], exports: [FsStopPropagationDirective,
        FsPreventDefaultDirective,
        FsAutofocusDirective,
        FsUtilGuidPipe,
        FsUtilStringifyPipe,
        FsFormatNumberPipe,
        FsFormatCurrencyPipe,
        FsFormatTruncatePipe,
        FsUtilIsEmptyPipe,
        FsUtilIsNotEmptyPipe,
        FsFormatBytesPipe,
        FsFormatOrdinalNumberPipe] });
FsCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsCommonModule, imports: [[
            CommonModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                    ],
                    exports: [
                        FsStopPropagationDirective,
                        FsPreventDefaultDirective,
                        FsAutofocusDirective,
                        FsUtilGuidPipe,
                        FsUtilStringifyPipe,
                        FsFormatNumberPipe,
                        FsFormatCurrencyPipe,
                        FsFormatTruncatePipe,
                        FsUtilIsEmptyPipe,
                        FsUtilIsNotEmptyPipe,
                        FsFormatBytesPipe,
                        FsFormatOrdinalNumberPipe,
                    ],
                    declarations: [
                        FsStopPropagationDirective,
                        FsPreventDefaultDirective,
                        FsAutofocusDirective,
                        FsUtilGuidPipe,
                        FsUtilIsEmptyPipe,
                        FsUtilIsNotEmptyPipe,
                        FsUtilStringifyPipe,
                        FsFormatNumberPipe,
                        FsFormatCurrencyPipe,
                        FsFormatTruncatePipe,
                        FsFormatBytesPipe,
                        FsFormatOrdinalNumberPipe,
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMtY29tbW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvZnMtY29tbW9uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDakQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3pELE9BQU8sRUFDTCxjQUFjLEVBQ2QsbUJBQW1CLEVBQ25CLGlCQUFpQixFQUNqQixvQkFBb0IsR0FDckIsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUNyRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNuRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7QUFvQ3hFLE1BQU0sT0FBTyxjQUFjO0lBQ3pCLE1BQU0sQ0FBQyxPQUFPO1FBQ1osT0FBTztZQUNMLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRTtnQkFDVCxPQUFPO2dCQUNQLE1BQU07Z0JBQ04sTUFBTTtnQkFDTixVQUFVO2FBQ1g7U0FDRixDQUFDO0lBQ0osQ0FBQzs7NEdBWFUsY0FBYzs2R0FBZCxjQUFjLGlCQWR2QiwwQkFBMEI7UUFDMUIseUJBQXlCO1FBQ3pCLG9CQUFvQjtRQUNwQixjQUFjO1FBQ2QsaUJBQWlCO1FBQ2pCLG9CQUFvQjtRQUNwQixtQkFBbUI7UUFDbkIsa0JBQWtCO1FBQ2xCLG9CQUFvQjtRQUNwQixvQkFBb0I7UUFDcEIsaUJBQWlCO1FBQ2pCLHlCQUF5QixhQTVCekIsWUFBWSxhQUdaLDBCQUEwQjtRQUMxQix5QkFBeUI7UUFDekIsb0JBQW9CO1FBQ3BCLGNBQWM7UUFDZCxtQkFBbUI7UUFDbkIsa0JBQWtCO1FBQ2xCLG9CQUFvQjtRQUNwQixvQkFBb0I7UUFDcEIsaUJBQWlCO1FBQ2pCLG9CQUFvQjtRQUNwQixpQkFBaUI7UUFDakIseUJBQXlCOzZHQWlCaEIsY0FBYyxZQWhDaEI7WUFDUCxZQUFZO1NBQ2I7NEZBOEJVLGNBQWM7a0JBakMxQixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3FCQUNiO29CQUNELE9BQU8sRUFBRTt3QkFDUCwwQkFBMEI7d0JBQzFCLHlCQUF5Qjt3QkFDekIsb0JBQW9CO3dCQUNwQixjQUFjO3dCQUNkLG1CQUFtQjt3QkFDbkIsa0JBQWtCO3dCQUNsQixvQkFBb0I7d0JBQ3BCLG9CQUFvQjt3QkFDcEIsaUJBQWlCO3dCQUNqQixvQkFBb0I7d0JBQ3BCLGlCQUFpQjt3QkFDakIseUJBQXlCO3FCQUMxQjtvQkFDRCxZQUFZLEVBQUU7d0JBQ1osMEJBQTBCO3dCQUMxQix5QkFBeUI7d0JBQ3pCLG9CQUFvQjt3QkFDcEIsY0FBYzt3QkFDZCxpQkFBaUI7d0JBQ2pCLG9CQUFvQjt3QkFDcEIsbUJBQW1CO3dCQUNuQixrQkFBa0I7d0JBQ2xCLG9CQUFvQjt3QkFDcEIsb0JBQW9CO3dCQUNwQixpQkFBaUI7d0JBQ2pCLHlCQUF5QjtxQkFDMUI7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgRnNBcnJheSB9IGZyb20gJy4vc2VydmljZXMvYXJyYXkuc2VydmljZSc7XG5pbXBvcnQgeyBGc01hdGggfSBmcm9tICcuL3NlcnZpY2VzL21hdGguc2VydmljZSc7XG5pbXBvcnQgeyBGc1V0aWwgfSBmcm9tICcuL3NlcnZpY2VzL3V0aWwuc2VydmljZSc7XG5pbXBvcnQgeyBGc1ZhbGlkYXRlIH0gZnJvbSAnLi9zZXJ2aWNlcy92YWlsZGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIEZzVXRpbEd1aWRQaXBlLFxuICBGc1V0aWxTdHJpbmdpZnlQaXBlLFxuICBGc1V0aWxJc0VtcHR5UGlwZSxcbiAgRnNVdGlsSXNOb3RFbXB0eVBpcGUsXG59IGZyb20gJy4vcGlwZXMvdXRpbC5waXBlJztcbmltcG9ydCB7IEZzRm9ybWF0TnVtYmVyUGlwZSB9IGZyb20gJy4vcGlwZXMvbnVtYmVyLnBpcGUnO1xuaW1wb3J0IHsgRnNGb3JtYXRDdXJyZW5jeVBpcGUgfSBmcm9tICcuL3BpcGVzL2N1cnJlbmN5LnBpcGUnO1xuaW1wb3J0IHsgRnNGb3JtYXRUcnVuY2F0ZVBpcGV9IGZyb20gJy4vcGlwZXMvdHJ1bmNhdGUucGlwZSc7XG5pbXBvcnQgeyBGc0Zvcm1hdEJ5dGVzUGlwZSB9IGZyb20gJy4vcGlwZXMvYnl0ZXMucGlwZSc7XG5pbXBvcnQgeyBGc1N0b3BQcm9wYWdhdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9zdG9wLXByb3BhZ2F0aW9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBGc1ByZXZlbnREZWZhdWx0RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3ByZXZlbnQtZGVmYXVsdC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRnNBdXRvZm9jdXNEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvYXV0b2ZvY3VzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBGc0Zvcm1hdE9yZGluYWxOdW1iZXJQaXBlIH0gZnJvbSAnLi9waXBlcy9vcmRpbmFsLW51bWJlci5waXBlJztcblxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgRnNTdG9wUHJvcGFnYXRpb25EaXJlY3RpdmUsXG4gICAgRnNQcmV2ZW50RGVmYXVsdERpcmVjdGl2ZSxcbiAgICBGc0F1dG9mb2N1c0RpcmVjdGl2ZSxcbiAgICBGc1V0aWxHdWlkUGlwZSxcbiAgICBGc1V0aWxTdHJpbmdpZnlQaXBlLFxuICAgIEZzRm9ybWF0TnVtYmVyUGlwZSxcbiAgICBGc0Zvcm1hdEN1cnJlbmN5UGlwZSxcbiAgICBGc0Zvcm1hdFRydW5jYXRlUGlwZSxcbiAgICBGc1V0aWxJc0VtcHR5UGlwZSxcbiAgICBGc1V0aWxJc05vdEVtcHR5UGlwZSxcbiAgICBGc0Zvcm1hdEJ5dGVzUGlwZSxcbiAgICBGc0Zvcm1hdE9yZGluYWxOdW1iZXJQaXBlLFxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBGc1N0b3BQcm9wYWdhdGlvbkRpcmVjdGl2ZSxcbiAgICBGc1ByZXZlbnREZWZhdWx0RGlyZWN0aXZlLFxuICAgIEZzQXV0b2ZvY3VzRGlyZWN0aXZlLFxuICAgIEZzVXRpbEd1aWRQaXBlLFxuICAgIEZzVXRpbElzRW1wdHlQaXBlLFxuICAgIEZzVXRpbElzTm90RW1wdHlQaXBlLFxuICAgIEZzVXRpbFN0cmluZ2lmeVBpcGUsXG4gICAgRnNGb3JtYXROdW1iZXJQaXBlLFxuICAgIEZzRm9ybWF0Q3VycmVuY3lQaXBlLFxuICAgIEZzRm9ybWF0VHJ1bmNhdGVQaXBlLFxuICAgIEZzRm9ybWF0Qnl0ZXNQaXBlLFxuICAgIEZzRm9ybWF0T3JkaW5hbE51bWJlclBpcGUsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEZzQ29tbW9uTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxGc0NvbW1vbk1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogRnNDb21tb25Nb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgRnNBcnJheSxcbiAgICAgICAgRnNNYXRoLFxuICAgICAgICBGc1V0aWwsXG4gICAgICAgIEZzVmFsaWRhdGVcbiAgICAgIF1cbiAgICB9O1xuICB9XG59XG4iXX0=