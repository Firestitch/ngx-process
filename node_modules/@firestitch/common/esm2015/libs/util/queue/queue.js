import { Observable, Subject } from 'rxjs';
import { Operation } from './operation';
import { QueueState } from './queue.enum';
import { delay, takeUntil } from 'rxjs/operators';
export class Queue {
    constructor(_limit = Infinity) {
        this._limit = _limit;
        this._done = new Subject();
        this._queue = [];
        this._inProgress = [];
        this._total = 0;
        this._completed = 0;
        this._errors = 0;
        this._state = QueueState.Idle;
        this._destroy$ = new Subject();
    }
    get total() {
        return this._total;
    }
    get completed() {
        return this._completed;
    }
    get pending() {
        return this._queue.length;
    }
    get inProgress() {
        return this._inProgress.length;
    }
    get errors() {
        return this._errors;
    }
    get state() {
        return this._state;
    }
    get empty() {
        return !this._queue.length && !this._inProgress.length;
    }
    get pendingOperations() {
        return this._queue
            .map((operation) => operation.name);
    }
    get inProgressOperations() {
        return this._inProgress
            .map((operation) => operation.name);
    }
    isProcessing() {
        return this._state === QueueState.Processing;
    }
    isIdle() {
        return this._state === QueueState.Idle;
    }
    setLimit(value) {
        this._limit = value;
    }
    subscribe(fun, err, complete) {
        this._done
            .pipe(takeUntil(this._destroy$))
            .subscribe(fun, err, complete);
    }
    complete(fun, err, complete) {
        Observable.create(observer => {
            if (!this.isProcessing()) {
                observer.next();
                observer.complete();
                return;
            }
            this.subscribe(() => {
                observer.next();
                observer.complete();
            }, (error) => {
                observer.error(error);
                this.clear();
            });
        }).subscribe(fun, err, complete);
    }
    push(target, name) {
        const operation = new Operation(target, name);
        this._total++;
        this._state = QueueState.Processing;
        if (this._inProgress.length < this._limit) {
            this._processOperation(operation);
        }
        else {
            this._queue.push(operation);
        }
        return operation.ready$;
    }
    clear() {
        this._queue = [];
        this._total = 0;
        this._errors = 0;
        this._completed = 0;
        this._state = QueueState.Idle;
        this._done = new Subject();
    }
    destroy() {
        this.clear();
        this._done.complete();
    }
    _processOperation(operation) {
        this._inProgress.push(operation);
        operation.target
            .pipe(delay(200), // Hack to prevent extra quick proccess execution
        takeUntil(this._destroy$)).subscribe({
            next: (data) => {
                operation.ready$.next(data);
            },
            error: (error) => {
                const opIndex = this._inProgress.indexOf(operation);
                this._inProgress.splice(opIndex, 1);
                this._errors++;
                operation.ready$.error(error);
                if (this.empty) {
                    this._state = QueueState.Idle;
                    this._done.error(error);
                }
            },
            complete: () => {
                const opIndex = this._inProgress.indexOf(operation);
                this._inProgress.splice(opIndex, 1);
                this._completed++;
                operation.ready$.complete();
                if (this.empty) {
                    this._state = QueueState.Idle;
                    this._done.next();
                }
                else {
                    if (this._queue.length) {
                        const queueItem = this._queue.shift();
                        this._processOperation(queueItem);
                    }
                }
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,