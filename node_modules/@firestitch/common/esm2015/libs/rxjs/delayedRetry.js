import { iif, throwError, timer } from 'rxjs';
import { concatMap, retryWhen, tap } from 'rxjs/operators';
export function delayedRetry(delayMs, maxRetry = 5, message) {
    let retries = 0;
    return (src) => src.pipe(retryWhen((errors) => errors.pipe(tap(() => {
        retries++;
        if (retries <= maxRetry) {
            console.info(`Failed to load Resource. Retry in ${delayMs / 1000} sec. ${retries}/${maxRetry} times...`);
        }
    }), concatMap((error) => iif(() => retries > maxRetry, throwError(getErrorMessage(maxRetry, message)), timer(delayMs))))));
}
const getErrorMessage = (maxRetry, defaultMessage) => {
    if (!defaultMessage) {
        return `Failed to load Resource for ${maxRetry} times. Giving up.`;
    }
    else {
        return defaultMessage;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsYXllZFJldHJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYnMvcnhqcy9kZWxheWVkUmV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBYyxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFELE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNELE1BQU0sVUFBVSxZQUFZLENBQUMsT0FBZSxFQUFFLFFBQVEsR0FBRyxDQUFDLEVBQUUsT0FBZ0I7SUFDMUUsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBRWhCLE9BQU8sQ0FBQyxHQUF3QixFQUFFLEVBQUUsQ0FDbEMsR0FBRyxDQUFDLElBQUksQ0FDTixTQUFTLENBQUMsQ0FBQyxNQUEyQixFQUFFLEVBQUUsQ0FDeEMsTUFBTSxDQUFDLElBQUksQ0FDVCxHQUFHLENBQUMsR0FBRyxFQUFFO1FBQ1AsT0FBTyxFQUFFLENBQUM7UUFFVixJQUFJLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDdkIsT0FBTyxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsT0FBTyxHQUFHLElBQUksU0FBUyxPQUFPLElBQUksUUFBUSxXQUFXLENBQUMsQ0FBQTtTQUN6RztJQUNILENBQUMsQ0FBQyxFQUNGLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ2xCLEdBQUcsQ0FDRCxHQUFHLEVBQUUsQ0FBQyxPQUFPLEdBQUcsUUFBUSxFQUN4QixVQUFVLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUM5QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQ2YsQ0FDRixDQUNGLENBQ0YsQ0FDRixDQUFBO0FBQ0wsQ0FBQztBQUlELE1BQU0sZUFBZSxHQUFHLENBQUMsUUFBZ0IsRUFBRSxjQUFzQixFQUFFLEVBQUU7SUFDbkUsSUFBSSxDQUFDLGNBQWMsRUFBRTtRQUNuQixPQUFPLCtCQUErQixRQUFRLG9CQUFvQixDQUFDO0tBQ3BFO1NBQU07UUFDTCxPQUFPLGNBQWMsQ0FBQTtLQUN0QjtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlpZiwgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNvbmNhdE1hcCwgcmV0cnlXaGVuLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGF5ZWRSZXRyeShkZWxheU1zOiBudW1iZXIsIG1heFJldHJ5ID0gNSwgbWVzc2FnZT86IHN0cmluZykge1xuICBsZXQgcmV0cmllcyA9IDA7XG5cbiAgcmV0dXJuIChzcmM6IE9ic2VydmFibGU8dW5rbm93bj4pID0+XG4gICAgc3JjLnBpcGUoXG4gICAgICByZXRyeVdoZW4oKGVycm9yczogT2JzZXJ2YWJsZTx1bmtub3duPikgPT5cbiAgICAgICAgZXJyb3JzLnBpcGUoXG4gICAgICAgICAgdGFwKCgpID0+IHtcbiAgICAgICAgICAgIHJldHJpZXMrKztcblxuICAgICAgICAgICAgaWYgKHJldHJpZXMgPD0gbWF4UmV0cnkpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5pbmZvKGBGYWlsZWQgdG8gbG9hZCBSZXNvdXJjZS4gUmV0cnkgaW4gJHtkZWxheU1zIC8gMTAwMH0gc2VjLiAke3JldHJpZXN9LyR7bWF4UmV0cnl9IHRpbWVzLi4uYClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjb25jYXRNYXAoKGVycm9yKSA9PlxuICAgICAgICAgICAgaWlmKFxuICAgICAgICAgICAgICAoKSA9PiByZXRyaWVzID4gbWF4UmV0cnksXG4gICAgICAgICAgICAgIHRocm93RXJyb3IoZ2V0RXJyb3JNZXNzYWdlKG1heFJldHJ5LCBtZXNzYWdlKSksXG4gICAgICAgICAgICAgIHRpbWVyKGRlbGF5TXMpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApLFxuICAgICAgICApXG4gICAgICApXG4gICAgKVxufVxuXG5cblxuY29uc3QgZ2V0RXJyb3JNZXNzYWdlID0gKG1heFJldHJ5OiBudW1iZXIsIGRlZmF1bHRNZXNzYWdlOiBzdHJpbmcpID0+IHtcbiAgaWYgKCFkZWZhdWx0TWVzc2FnZSkge1xuICAgIHJldHVybiBgRmFpbGVkIHRvIGxvYWQgUmVzb3VyY2UgZm9yICR7bWF4UmV0cnl9IHRpbWVzLiBHaXZpbmcgdXAuYDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lc3NhZ2VcbiAgfVxufVxuIl19