import * as i0 from '@angular/core';
import { Injectable, Pipe, LOCALE_ID, Inject, Directive, HostListener, NgModule } from '@angular/core';
import { CurrencyPipe, CommonModule } from '@angular/common';
import { toString, isObject, isArray } from 'lodash-es';
import { Subject, Observable, of, iif, throwError, timer } from 'rxjs';
import { takeUntil, delay, retryWhen, tap, concatMap } from 'rxjs/operators';

class FsArray {
    /**
     * @deprecated use import { nameValue } from @firestitch/common/array; instead
    */
    nameValue(array, name, value) {
        console.warn('@deprecated use import { nameValue } from @firestitch/common/array; instead');
        let list = [];
        if (name || value) {
            let nameFn = typeof name === 'function' ? name : function (item) { return item[name]; };
            let valueFn = typeof value === 'function' ? value : function (item) { return item[value]; };
            array.forEach(function (item) {
                list.push({ name: nameFn(item), value: valueFn(item) });
            });
        }
        else {
            array.forEach(function (name, value) {
                list.push({ name: name, value: value });
            });
        }
        return list;
    }
    /**
     * @deprecated use import { remove } from @firestitch/common/array; instead
    */
    remove(array, query) {
        console.warn('@deprecated use import { remove } from @firestitch/common/array; instead');
        let idx = this.indexOf(array, query);
        if (idx >= 0) {
            return array.splice(idx, 1);
        }
        return idx;
    }
    /**
     * @deprecated use import { indexOf } from @firestitch/common/array; instead
    */
    indexOf(array, query) {
        console.warn('@deprecated use import { indexOf } from @firestitch/common/array; instead');
        if (typeof query !== 'function') {
            let queryObj = query;
            query = (item) => {
                return this.compare(queryObj, item);
            };
        }
        for (let i = 0, len = array.length; i < len; i++) {
            if (query(array[i])) {
                return i;
            }
        }
        return -1;
    }
    /**
     * @deprecated use import { compare } from @firestitch/common/array; instead
    */
    compare(query, item) {
        console.warn('@deprecated use import { compare } from @firestitch/common/array; instead');
        let value = true;
        for (let key in query) {
            value = value && item[key] == query[key];
        }
        return value;
    }
    /**
     * @deprecated use import { filter } from @firestitch/common/array; instead
    */
    filter(array, query) {
        console.warn('@deprecated use import { filter } from @firestitch/common/array; instead');
        if (typeof query !== 'function') {
            let queryObj = query;
            query = (item) => {
                return this.compare(queryObj, item);
            };
        }
        let isarray = Array.isArray(array);
        let list = isarray ? [] : {};
        if (isarray)
            array.forEach(function (item, idx) {
                if (query(item)) {
                    list.push(item);
                }
            });
        else
            Object.keys(array).forEach(key => {
                if (query(array[key])) {
                    list[key] = array[key];
                }
            });
        return list;
    }
    /**
     * @deprecated use import { index } from @firestitch/common/array; instead
    */
    index(array, property) {
        console.warn('@deprecated use import { index } from @firestitch/common/array; instead');
        let list = {};
        array.forEach(function (item, idx) {
            list[item[property]] = item;
        });
        return list;
    }
    /**
     * @deprecated use import { sort } from @firestitch/common/array; instead
    */
    sort(array, query, reverse = false) {
        console.warn('@deprecated use import { sort } from @firestitch/common/array; instead');
        if (typeof query !== 'function') {
            let queryStr = query;
            query = function (a, b) {
                if (reverse) {
                    if (a[queryStr] < b[queryStr]) {
                        return 1;
                    }
                    else if (a[queryStr] > b[queryStr]) {
                        return -1;
                    }
                }
                else {
                    if (a[queryStr] > b[queryStr]) {
                        return 1;
                    }
                    else if (a[queryStr] < b[queryStr]) {
                        return -1;
                    }
                }
                return 0;
            };
        }
        array.sort(query);
        return array;
    }
    /**
     * @deprecated use import { rsort } from @firestitch/common/array; instead
    */
    rsort(array, query) {
        console.warn('@deprecated use import { rsort } from @firestitch/common/array; instead');
        return this.sort(array, query, true);
    }
    /**
     * @deprecated use import { list } from @firestitch/common/array; instead
    */
    list(array, property, index = null) {
        console.warn('@deprecated use import { list } from @firestitch/common/array; instead');
        let list = index ? {} : [];
        array.forEach(function (item, idx) {
            if (index) {
                list[item[index]] = item[property];
            }
            else {
                list.push(item[property]);
            }
        });
        return list;
    }
    /**
     * @deprecated use import { applyDepth } from @firestitch/common/array; instead
    */
    applyDepth(objects, parent_property, id_property = 'id', depth_property = 'depth') {
        console.warn('@deprecated use import { applyDepth } from @firestitch/common/array; instead');
        let keyed = {};
        objects.forEach(function (object) {
            if (!object[parent_property]) {
                object[depth_property] = 0;
            }
            keyed[object[id_property]] = object;
        });
        Object.keys(keyed).forEach(key => {
            Object.keys(keyed).forEach(key => {
                let object = keyed[key];
                if (!keyed[key][depth_property]) {
                    if (keyed[key][parent_property]) {
                        keyed[key][depth_property] = keyed[keyed[key][parent_property]][depth_property] + 1;
                    }
                }
            });
        });
        return keyed;
    }
    /**
     * @deprecated use import { inArray } from @firestitch/common/array; instead
    */
    inArray(values, array) {
        console.warn('@deprecated use import { inArray } from @firestitch/common/array; instead');
        if (!Array.isArray(values)) {
            values = [values];
        }
        for (let i = 0, len = values.length; i < len; i++) {
            if (array.indexOf(values[i]) >= 0) {
                return true;
            }
        }
        return false;
    }
    /**
     * @deprecated use import { keyExists } from @firestitch/common/array; instead
    */
    keyExists(array, key) {
        console.warn('@deprecated use import { keyExists } from @firestitch/common/array; instead');
        return array.hasOwnProperty(key);
    }
    /**
     * @deprecated use import { length } from @firestitch/common/array; instead
    */
    length(array) {
        console.warn('@deprecated use import { length } from @firestitch/common/array; instead');
        return array.length;
    }
    /**
     * @deprecated use import { ksort } from @firestitch/common/array; instead
    */
    ksort(unordered) {
        console.warn('@deprecated use import { ksort } from @firestitch/common/array; instead');
        Object.keys(unordered).sort().forEach(function (key) {
            let value = unordered[key];
            delete unordered[key];
            unordered[key] = value;
        });
    }
}
FsArray.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsArray, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
FsArray.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsArray });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsArray, decorators: [{
            type: Injectable
        }] });

class FsMath {
    /**
     * @deprecated use _.round() instead {@link https://lodash.com/docs/4.17.5#round}
    */
    round(number, precision) {
        console.warn('@deprecated use _.round() instead {@link https://lodash.com/docs/4.17.5#round}');
        precision = precision || 0;
        let factor = Math.pow(10, precision);
        let tempNumber = number * factor;
        let roundedTempNumber = Math.round(tempNumber);
        return roundedTempNumber / factor;
    }
}
FsMath.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsMath, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
FsMath.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsMath });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsMath, decorators: [{
            type: Injectable
        }] });

const KEY_CANCEL$1 = 3, KEY_HELP$1 = 6, KEY_BACKSPACE$1 = 8, KEY_TAB$1 = 9, KEY_CLEAR$1 = 12, KEY_RETURN$1 = 13, KEY_ENTER$1 = 14, KEY_SHIFT$1 = 16, KEY_CONTROL$1 = 17, KEY_ALT$1 = 18, KEY_PAUSE$1 = 19, KEY_CAPS_LOCK$1 = 20, KEY_ESCAPE$1 = 27, KEY_SPACE$1 = 32, KEY_PAGE_UP$1 = 33, KEY_PAGE_DOWN$1 = 34, KEY_END$1 = 35, KEY_HOME$1 = 36, KEY_LEFT$1 = 37, KEY_UP$1 = 38, KEY_RIGHT$1 = 39, KEY_DOWN$1 = 40, KEY_PRINTSCREEN$1 = 44, KEY_INSERT$1 = 45, KEY_DELETE$1 = 46, KEY_0$1 = 48, KEY_1$1 = 49, KEY_2$1 = 50, KEY_3$1 = 51, KEY_4$1 = 52, KEY_5$1 = 53, KEY_6$1 = 54, KEY_7$1 = 55, KEY_8$1 = 56, KEY_9$1 = 57, KEY_SEMICOLON$1 = 59, KEY_EQUALS$1 = 61;
/*
    Basically, just copy-pasted functionality from fs-boilerplate v1.x, with some small changes (like we dont have angular.bind anymore, had to go with a workaround)
    There might be a better way to organise constatns but I need to know use-cases
*/
class FsUtil {
    constructor() {
        this.intervals = {};
    }
    /**
    * @deprecated use @firestitch/common/util/guid instead
    */
    guid(pattern) {
        console.warn('@deprecated use @firestitch/common/util/guid instead');
        pattern = pattern || 'xxxxxx';
        return pattern.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
    /**
     * @deprecated use import { uuid } from @firestitch/common/util; instead
    */
    uuid() {
        console.warn('@deprecated use @firestitch/common/util/uuid instead');
        return this.guid('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');
    }
    /**
     * @deprecated use import { resolve } from @firestitch/common/util; instead
    */
    resolve(promise, defaults = []) {
        console.warn('@deprecated use @firestitch/common/util/resolve instead');
        const result = defaults;
        return new Promise(resolve => {
            promise.then(function (data) {
                Object.keys(data).forEach(key => result[key] = data[key]);
                resolve(result);
            });
        });
    }
    /**
     * @deprecated use _.toInteger() instead
    */
    int(value) {
        console.warn('@deprecated use _.toInteger() instead');
        value = parseInt(value);
        if (isNaN(value)) {
            value = 0;
        }
        return value;
    }
    /**
     * @deprecated use _.toFinite() instead
    */
    float(value) {
        console.warn('@deprecated use _.toFinite() instead');
        value = parseFloat(value);
        if (isNaN(value)) {
            value = 0;
        }
        return value;
    }
    /**
     * @deprecated use _.toString() instead
    */
    string(string) {
        console.warn('@deprecated use _.toString() instead');
        if (string === null || string === undefined) {
            string = '';
        }
        return (string).toString();
    }
    /**
     * @deprecated use import { isEmpty } from @firestitch/common/util; instead
    */
    isEmpty(value, options) {
        console.warn('@deprecated use import { isEmpty } from @firestitch/common/util; instead');
        options = options || {};
        return value === undefined ||
            value === null ||
            value === false ||
            value === '' ||
            !this.string(value).length ||
            (this.isObject(value) &&
                (value.constructor.name === 'Object' && !Object.keys(value).length)) ||
            (!options.zero && (value === 0 || value === '0'));
    }
    /**
     * @deprecated use _.isInteger() instead
    */
    isInt(value, type) {
        console.warn('@deprecated use _.isInteger() instead');
        const int = !!this.string(value).match(/^\d+$/);
        if (!int) {
            return false;
        }
        if (type) {
            return Number.isInteger(value);
        }
        return true;
    }
    /**
     * @deprecated use _.each() instead {@link https://lodash.com/docs/4.17.5#forEach}
    */
    each(object, func) {
        console.warn('@deprecated use _.each() instead {@link https://lodash.com/docs/4.17.5#forEach}');
        if (!this.isArray(object) && !this.isObject(object)) {
            return;
        }
        Object.keys(object).forEach(function (key) {
            func(object[key], key);
        });
    }
    /**
     * @deprecated use _.isArrayLikeObject() {@link https://lodash.com/docs/4.17.5#isArrayLikeObject}
     * or _.isObject() {@link https://lodash.com/docs/4.17.5#isObject} instead
    */
    isObject(value) {
        console.warn('@deprecated use _.isArrayLikeObject() {@link https://lodash.com/docs/4.17.5#isArrayLikeObject} or _.isObject() {@link https://lodash.com/docs/4.17.5#isObject} instead');
        return value !== null && typeof value === 'object' && !this.isArray(value);
    }
    /**
      * @deprecated use _.isString() instead {@link https://lodash.com/docs/4.17.5#isString}
    */
    isString(value) {
        console.warn('@deprecated use _.isString() instead {@link https://lodash.com/docs/4.17.5#isString}');
        return typeof value === 'string' || value instanceof String;
    }
    /**
     * @deprecated use _.isArray() instead {@link https://lodash.com/docs/4.17.5#isArray}
    */
    isArray(value) {
        console.warn('@deprecated use _.isArray() instead {@link https://lodash.com/docs/4.17.5#isArray}');
        return value instanceof Array;
    }
    /**
     * @deprecated use import { isNumeric } from @firestitch/common/util; instead
    */
    isNumeric(value) {
        console.warn('@deprecated use import { isNumeric } from @firestitch/common/util; instead');
        return this.string(value).length && !!this.string(value).match(/^-?\d*\.?\d*$/);
    }
    /**
     * @deprecated use import { isClass } from @firestitch/common/util; instead
    */
    isClass(value, cls) {
        console.warn('@deprecated use import { isClass } from @firestitch/common/util; instead');
        if (this.isObject(value)) {
            if (this.isString(cls)) {
                if (value.constructor) {
                    if (value.constructor.name === cls) {
                        return true;
                    }
                }
            }
            else {
                if (value instanceof cls) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
      * @deprecated use _.isBoolean() instead {@link https://lodash.com/docs/4.17.5#isBoolean}
    */
    isBoolean(value) {
        console.warn('@deprecated use _.isBoolean() instead {@link https://lodash.com/docs/4.17.5#isBoolean}');
        return value === true || value === false;
    }
    /**
     * @deprecated use import { value } from @firestitch/common/util; instead
    */
    value(object, key, def) {
        console.warn('@deprecated use import { value } from @firestitch/common/util; instead');
        if (this.isObject(object) || this.isArray(object)) {
            if (object.hasOwnProperty(key)) {
                return object[key];
            }
        }
        return def;
    }
    throttle(func, wait) {
        console.warn('@deprecated use import { throttle } from @firestitch/common/util; instead');
        let waiting = false; // Initially, we're not waiting
        return function () {
            if (!waiting) { // If we're not waiting
                func.apply(null, arguments); // Execute users function
                waiting = true; // Prevent future invocations
                setTimeout(function () {
                    waiting = false; // And allow future invocations
                }, wait);
            }
        };
    }
    /**
     * @deprecated use import { debounce } from @firestitch/common/util; instead
    */
    debounce(func, wait, immediate) {
        console.warn('@deprecated use import { debounce } from @firestitch/common/util; instead');
        var timeout;
        return function () {
            var context = this, args = arguments;
            var later = function () {
                timeout = null;
                if (!immediate)
                    func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow)
                func.apply(context, args);
        };
    }
    /**
     * @deprecated use import { length } from @firestitch/common/util; instead
    */
    length(object) {
        console.warn('@deprecated use import { length } from @firestitch/common/util; instead');
        if (this.isObject(object)) {
            return Object.keys(object).length;
        }
        if (this.isArray(object)) {
            return object.length;
        }
        return 0;
    }
    /**
     * @deprecated use import { boolean } from @firestitch/common/util; instead
    */
    boolean(value) {
        console.warn('@deprecated use import { boolean } from @firestitch/common/util; instead');
        return this.string(value).toLowerCase() !== 'false' && !!value;
    }
    /**
     * @deprecated use import { stringify } from @firestitch/common/util; instead
    */
    stringify(value) {
        console.warn('@deprecated use import { stringify } from @firestitch/common/util; instead');
        return JSON.stringify(value);
    }
}
FsUtil.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtil, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
FsUtil.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtil });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtil, decorators: [{
            type: Injectable
        }] });

class FsValidate {
    constructor(fsUtil) {
        this.fsUtil = fsUtil;
    }
    /**
     * @deprecated use import { email } from @firestitch/common/validate; instead
    */
    phone(value) {
        const valid = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/.test(value);
        return valid || !String(value).length;
    }
    /**
      * @deprecated use import { email } from @firestitch/common/validate; instead
    */
    email(value) {
        return !!this.fsUtil.string(value).match(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
    }
}
FsValidate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsValidate, deps: [{ token: FsUtil }], target: i0.ɵɵFactoryTarget.Injectable });
FsValidate.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsValidate });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsValidate, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: FsUtil }]; } });

function stringify(value) {
    return JSON.stringify(value);
}

function guid(pattern, options = { case: 'lower', numbers: true }) {
    pattern = pattern || 'xxxxxx';
    let s = '';
    if (options.numbers !== false) {
        s = '0123456789';
    }
    if (!options.case || options.case === 'lower' || options.case === 'mixed') {
        s = s.concat('abcdefghijklmnopqrstuvwxyz');
    }
    if (options.case === 'upper' || options.case === 'mixed') {
        s = s.concat('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
    }
    const chars = s.match(/(.{1,1})/g);
    return pattern.replace(/[x]/g, function (c) {
        const i = (Math.random() * chars.length) | 0;
        return chars[i];
    });
}

function isEmpty(value, options) {
    options = options || {};
    return value === undefined ||
        value === null ||
        value === false ||
        value === '' ||
        !toString(value).length ||
        (isObject(value) &&
            (value.constructor.name === 'Object' && !Object.keys(value).length)) ||
        (!options.zero && (value === 0 || value === '0'));
}

class FsUtilStringifyPipe {
    constructor() { }
    transform(value) {
        return stringify(value);
    }
}
FsUtilStringifyPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilStringifyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FsUtilStringifyPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilStringifyPipe, name: "fsUtilStringify" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilStringifyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fsUtilStringify'
                }]
        }], ctorParameters: function () { return []; } });
class FsUtilGuidPipe {
    constructor() { }
    transform() {
        return guid();
    }
}
FsUtilGuidPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilGuidPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FsUtilGuidPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilGuidPipe, name: "fsUtilGuid" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilGuidPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fsUtilGuid'
                }]
        }], ctorParameters: function () { return []; } });
class FsUtilIsEmptyPipe {
    transform(value) {
        return isEmpty(value);
    }
}
FsUtilIsEmptyPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilIsEmptyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FsUtilIsEmptyPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilIsEmptyPipe, name: "fsUtilIsEmpty" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilIsEmptyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fsUtilIsEmpty'
                }]
        }] });
class FsUtilIsNotEmptyPipe {
    transform(value) {
        return !isEmpty(value);
    }
}
FsUtilIsNotEmptyPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilIsNotEmptyPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FsUtilIsNotEmptyPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilIsNotEmptyPipe, name: "fsUtilIsNotEmpty" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsUtilIsNotEmptyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fsUtilIsNotEmpty'
                }]
        }] });

function number(value, decimals) {
    return Number(value || 0).toLocaleString(undefined, { maximumFractionDigits: decimals });
}

class FsFormatNumberPipe {
    transform(value, decimals) {
        return number(value, decimals);
    }
}
FsFormatNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatNumberPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FsFormatNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatNumberPipe, name: "fsFormatNumber" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatNumberPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fsFormatNumber'
                }]
        }] });

function currency(amount, precision = [2, 10], currencyCode = 'USD', locale = 'en-US') {
    const digitsInfo = isArray(precision) ? precision : [precision, precision];
    return new CurrencyPipe(locale).transform(amount, currencyCode, 'symbol', `1.${digitsInfo[0]}-${digitsInfo[1]}`);
}

class FsFormatCurrencyPipe {
    constructor(locale) {
        this.locale = locale;
    }
    transform(amount, precision, currencyCode) {
        return currency(amount, precision, currencyCode);
    }
}
FsFormatCurrencyPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatCurrencyPipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe });
FsFormatCurrencyPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatCurrencyPipe, name: "fsFormatCurrency" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatCurrencyPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fsFormatCurrency'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

function truncate(value, limit = 100, completeWords = false, ellipsis = '...') {
    value = value || '';
    if (completeWords) {
        limit = value.substr(0, limit).lastIndexOf(' ');
    }
    let result = `${value.substr(0, limit)}`;
    if (result !== value) {
        result += ellipsis;
    }
    return result;
}

class FsFormatTruncatePipe {
    constructor() { }
    transform(value, limit, completeWords, ellipsis) {
        return truncate(value, limit, completeWords, ellipsis);
    }
}
FsFormatTruncatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatTruncatePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FsFormatTruncatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatTruncatePipe, name: "fsFormatTruncate" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatTruncatePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fsFormatTruncate'
                }]
        }], ctorParameters: function () { return []; } });

function bytes(bytes) {
    if (!bytes) {
        return '0.00 B';
    }
    const e = Math.floor(Math.log(bytes) / Math.log(1024));
    const decimals = (bytes / 1024) > 1000 ? 2 : 0;
    console.log(bytes, (bytes / 1024), decimals);
    return `${(bytes / Math.pow(1024, e)).toFixed(decimals)}`.replace(/\.00/, '')
        + ' '
        + (e ? ' KMGTP'.charAt(e) : '') + 'B';
}

class FsFormatBytesPipe {
    transform(value) {
        return bytes(value);
    }
}
FsFormatBytesPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatBytesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FsFormatBytesPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatBytesPipe, name: "fsFormatBytes" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatBytesPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fsFormatBytes',
                }]
        }] });

class FsStopPropagationDirective {
    preventClick(event) {
        event.stopPropagation();
    }
}
FsStopPropagationDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsStopPropagationDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
FsStopPropagationDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsStopPropagationDirective, selector: "[fsStopPropagation]", host: { listeners: { "click": "preventClick($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsStopPropagationDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fsStopPropagation]',
                }]
        }], propDecorators: { preventClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class FsPreventDefaultDirective {
    preventClick(event) {
        event.preventDefault();
    }
}
FsPreventDefaultDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPreventDefaultDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
FsPreventDefaultDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsPreventDefaultDirective, selector: "[fsPreventDefault]", host: { listeners: { "click": "preventClick($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPreventDefaultDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fsPreventDefault]',
                }]
        }], propDecorators: { preventClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class FsAutofocusDirective {
    constructor(_el) {
        this._el = _el;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this._el.nativeElement.focus();
        });
    }
}
FsAutofocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsAutofocusDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
FsAutofocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsAutofocusDirective, selector: "[autofocus]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsAutofocusDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[autofocus]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });

function ordinalNumber(value) {
    value = String(value);
    const index = value.match `1?.$`;
    const endings = [, 'st', 'nd', 'rd'];
    const ending = endings[index] || 'th';
    return value + ending;
}

class FsFormatOrdinalNumberPipe {
    transform(value) {
        return ordinalNumber(value);
    }
}
FsFormatOrdinalNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatOrdinalNumberPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
FsFormatOrdinalNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatOrdinalNumberPipe, name: "fsFormatOrdinalNumber" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsFormatOrdinalNumberPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fsFormatOrdinalNumber',
                }]
        }] });

class FsCommonModule {
    static forRoot() {
        return {
            ngModule: FsCommonModule,
            providers: [
                FsArray,
                FsMath,
                FsUtil,
                FsValidate
            ]
        };
    }
}
FsCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsCommonModule, declarations: [FsStopPropagationDirective,
        FsPreventDefaultDirective,
        FsAutofocusDirective,
        FsUtilGuidPipe,
        FsUtilIsEmptyPipe,
        FsUtilIsNotEmptyPipe,
        FsUtilStringifyPipe,
        FsFormatNumberPipe,
        FsFormatCurrencyPipe,
        FsFormatTruncatePipe,
        FsFormatBytesPipe,
        FsFormatOrdinalNumberPipe], imports: [CommonModule], exports: [FsStopPropagationDirective,
        FsPreventDefaultDirective,
        FsAutofocusDirective,
        FsUtilGuidPipe,
        FsUtilStringifyPipe,
        FsFormatNumberPipe,
        FsFormatCurrencyPipe,
        FsFormatTruncatePipe,
        FsUtilIsEmptyPipe,
        FsUtilIsNotEmptyPipe,
        FsFormatBytesPipe,
        FsFormatOrdinalNumberPipe] });
FsCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsCommonModule, imports: [[
            CommonModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                    ],
                    exports: [
                        FsStopPropagationDirective,
                        FsPreventDefaultDirective,
                        FsAutofocusDirective,
                        FsUtilGuidPipe,
                        FsUtilStringifyPipe,
                        FsFormatNumberPipe,
                        FsFormatCurrencyPipe,
                        FsFormatTruncatePipe,
                        FsUtilIsEmptyPipe,
                        FsUtilIsNotEmptyPipe,
                        FsFormatBytesPipe,
                        FsFormatOrdinalNumberPipe,
                    ],
                    declarations: [
                        FsStopPropagationDirective,
                        FsPreventDefaultDirective,
                        FsAutofocusDirective,
                        FsUtilGuidPipe,
                        FsUtilIsEmptyPipe,
                        FsUtilIsNotEmptyPipe,
                        FsUtilStringifyPipe,
                        FsFormatNumberPipe,
                        FsFormatCurrencyPipe,
                        FsFormatTruncatePipe,
                        FsFormatBytesPipe,
                        FsFormatOrdinalNumberPipe,
                    ],
                }]
        }] });

function email(value) {
    return !!String(value).match(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/);
}

function phone(value) {
    const valid = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4}/.test(value);
    return valid || !String(value).length;
}

/**
 * Check validity of the url.
 * Protocol (http/https) isn't required.
 * @param value
 * @returns {boolean}
 */
function url(value) {
    const expression = /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#%[\]@!\$&'\(\)\*\+,;=.]+$/gm;
    const regexp = new RegExp(expression);
    return !!String(value).match(regexp);
}

function compare(query, item) {
    let value = true;
    for (const key in query) {
        value = value && item[key] == query[key];
    }
    return value;
}

function filter(array, query) {
    if (typeof query !== 'function') {
        const queryObj = query;
        query = (item) => {
            return compare(queryObj, item);
        };
    }
    const isarray = Array.isArray(array);
    const list = isarray ? [] : {};
    if (isarray) {
        array.forEach(function (item, idx) {
            if (query(item)) {
                list.push(item);
            }
        });
    }
    else {
        Object.keys(array).forEach(key => {
            if (query(array[key])) {
                list[key] = array[key];
            }
        });
    }
    return list;
}

function inArray(values, array) {
    if (!Array.isArray(values)) {
        values = [values];
    }
    for (let i = 0, len = values.length; i < len; i++) {
        if (array.indexOf(values[i]) >= 0) {
            return true;
        }
    }
    return false;
}

function index(array, name, value = null) {
    const list = {};
    array.forEach(function (item) {
        list[item[name]] = value ? item[value] : item;
    });
    return list;
}

function indexOf(array, query) {
    if (typeof query !== 'function') {
        const queryObj = query;
        query = (item) => {
            return compare(queryObj, item);
        };
    }
    for (let i = 0, len = array.length; i < len; i++) {
        if (query(array[i])) {
            return i;
        }
    }
    return -1;
}

function keyExists(array, key) {
    return array.hasOwnProperty(key);
}

function ksort(unordered) {
    Object.keys(unordered).sort().forEach(function (key) {
        const value = unordered[key];
        delete unordered[key];
        unordered[key] = value;
    });
}

function list(array, property, index = null) {
    const resultList = index ? {} : [];
    array.forEach(function (item, idx) {
        if (index) {
            resultList[item[index]] = item[property];
        }
        else {
            resultList.push(item[property]);
        }
    });
    return resultList;
}

function nameValue(array, name, value) {
    const list = [];
    if (name || value) {
        const nameFn = typeof name === 'function' ? name : function (item) {
            return item[name];
        };
        const valueFn = typeof value === 'function' ? value : function (item) {
            return item[value];
        };
        array.forEach(function (item) {
            list.push({ name: nameFn(item), value: valueFn(item) });
        });
    }
    else {
        array.forEach(function (n, v) {
            list.push({ name: n, value: v });
        });
    }
    return list;
}

function remove(array, query) {
    const idx = indexOf(array, query);
    if (idx >= 0) {
        return array.splice(idx, 1);
    }
    return idx;
}

function sort(array, query, reverse = false) {
    if (typeof query !== 'function') {
        const queryStr = query;
        query = function (a, b) {
            if (reverse) {
                if (a[queryStr] < b[queryStr]) {
                    return 1;
                }
                else if (a[queryStr] > b[queryStr]) {
                    return -1;
                }
            }
            else {
                if (a[queryStr] > b[queryStr]) {
                    return 1;
                }
                else if (a[queryStr] < b[queryStr]) {
                    return -1;
                }
            }
            return 0;
        };
    }
    array.sort(query);
    return array;
}

function rsort(array, query) {
    return sort(array, query, true);
}

function find(array, query) {
    const data = filter(array, query);
    return data.length ? data[0] : null;
}

function boolean(value) {
    return toString(value).toLowerCase() !== 'false' && !!value;
}

function debounce(func, wait, immediate) {
    let timeout;
    return function () {
        const context = this, args = arguments;
        const later = function () {
            timeout = null;
            if (!immediate)
                func.apply(context, args);
        };
        const callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow)
            func.apply(context, args);
    };
}

const KEY_CANCEL = 3;
const KEY_HELP = 6;
const KEY_BACKSPACE = 8;
const KEY_TAB = 9;
const KEY_CLEAR = 12;
const KEY_RETURN = 13;
const KEY_ENTER = 14;
const KEY_SHIFT = 16;
const KEY_CONTROL = 17;
const KEY_ALT = 18;
const KEY_PAUSE = 19;
const KEY_CAPS_LOCK = 20;
const KEY_ESCAPE = 27;
const KEY_SPACE = 32;
const KEY_PAGE_UP = 33;
const KEY_PAGE_DOWN = 34;
const KEY_END = 35;
const KEY_HOME = 36;
const KEY_LEFT = 37;
const KEY_UP = 38;
const KEY_RIGHT = 39;
const KEY_DOWN = 40;
const KEY_PRINTSCREEN = 44;
const KEY_INSERT = 45;
const KEY_DELETE = 46;
const KEY_0 = 48;
const KEY_1 = 49;
const KEY_2 = 50;
const KEY_3 = 51;
const KEY_4 = 52;
const KEY_5 = 53;
const KEY_6 = 54;
const KEY_7 = 55;
const KEY_8 = 56;
const KEY_9 = 57;
const KEY_SEMICOLON = 59;
const KEY_EQUALS = 61;

function length(object) {
    if (isObject(object)) {
        return Object.keys(object).length;
    }
    if (isArray(object)) {
        return object.length;
    }
    return 0;
}

function resolve(promise, defaults = []) {
    const result = defaults;
    return new Promise(resolve => {
        promise.then(function (data) {
            Object.keys(data).forEach(key => result[key] = data[key]);
            resolve(result);
        });
    });
}

function uuid() {
    return guid('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');
}

function value(object, key, def) {
    if (typeof object === 'object' || Array.isArray(object)) {
        if (object.hasOwnProperty(key)) {
            return object[key];
        }
    }
    return def;
}

function isClass(value, cls) {
    if (typeof value === 'object') {
        if (typeof cls === 'string') {
            if (value.constructor) {
                if (value.constructor.name === cls) {
                    return true;
                }
            }
        }
        else {
            if (value instanceof cls) {
                return true;
            }
        }
    }
    return false;
}

function isNumeric(value) {
    const str = toString(value);
    return str.length && !!str.match(/^-?\d*\.?\d*$/);
}

function throttle(func, wait) {
    let waiting = false; // Initially, we're not waiting
    return function () {
        if (!waiting) { // If we're not waiting
            func.apply(null, arguments); // Execute users function
            waiting = true; // Prevent future invocations
            setTimeout(function () {
                waiting = false; // And allow future invocations
            }, wait);
        }
    };
}

class Operation {
    constructor(target, name) {
        this.ready$ = new Subject();
        this.name = name ? name : guid();
        if (target instanceof Observable) {
            this.target = target;
        }
        else {
            this.target = of(target);
        }
    }
}

var QueueState;
(function (QueueState) {
    QueueState["Idle"] = "idle";
    QueueState["Processing"] = "processing";
})(QueueState || (QueueState = {}));

class Queue {
    constructor(_limit = Infinity) {
        this._limit = _limit;
        this._done = new Subject();
        this._queue = [];
        this._inProgress = [];
        this._total = 0;
        this._completed = 0;
        this._errors = 0;
        this._state = QueueState.Idle;
        this._destroy$ = new Subject();
    }
    get total() {
        return this._total;
    }
    get completed() {
        return this._completed;
    }
    get pending() {
        return this._queue.length;
    }
    get inProgress() {
        return this._inProgress.length;
    }
    get errors() {
        return this._errors;
    }
    get state() {
        return this._state;
    }
    get empty() {
        return !this._queue.length && !this._inProgress.length;
    }
    get pendingOperations() {
        return this._queue
            .map((operation) => operation.name);
    }
    get inProgressOperations() {
        return this._inProgress
            .map((operation) => operation.name);
    }
    isProcessing() {
        return this._state === QueueState.Processing;
    }
    isIdle() {
        return this._state === QueueState.Idle;
    }
    setLimit(value) {
        this._limit = value;
    }
    subscribe(fun, err, complete) {
        this._done
            .pipe(takeUntil(this._destroy$))
            .subscribe(fun, err, complete);
    }
    complete(fun, err, complete) {
        Observable.create(observer => {
            if (!this.isProcessing()) {
                observer.next();
                observer.complete();
                return;
            }
            this.subscribe(() => {
                observer.next();
                observer.complete();
            }, (error) => {
                observer.error(error);
                this.clear();
            });
        }).subscribe(fun, err, complete);
    }
    push(target, name) {
        const operation = new Operation(target, name);
        this._total++;
        this._state = QueueState.Processing;
        if (this._inProgress.length < this._limit) {
            this._processOperation(operation);
        }
        else {
            this._queue.push(operation);
        }
        return operation.ready$;
    }
    clear() {
        this._queue = [];
        this._total = 0;
        this._errors = 0;
        this._completed = 0;
        this._state = QueueState.Idle;
        this._done = new Subject();
    }
    destroy() {
        this.clear();
        this._done.complete();
    }
    _processOperation(operation) {
        this._inProgress.push(operation);
        operation.target
            .pipe(delay(200), // Hack to prevent extra quick proccess execution
        takeUntil(this._destroy$)).subscribe({
            next: (data) => {
                operation.ready$.next(data);
            },
            error: (error) => {
                const opIndex = this._inProgress.indexOf(operation);
                this._inProgress.splice(opIndex, 1);
                this._errors++;
                operation.ready$.error(error);
                if (this.empty) {
                    this._state = QueueState.Idle;
                    this._done.error(error);
                }
            },
            complete: () => {
                const opIndex = this._inProgress.indexOf(operation);
                this._inProgress.splice(opIndex, 1);
                this._completed++;
                operation.ready$.complete();
                if (this.empty) {
                    this._state = QueueState.Idle;
                    this._done.next();
                }
                else {
                    if (this._queue.length) {
                        const queueItem = this._queue.shift();
                        this._processOperation(queueItem);
                    }
                }
            }
        });
    }
}

function removeQueryParams(path) {
    return path.split('?')[0];
}

function getNormalizedPath(locationSrv) {
    const path = locationSrv.prepareExternalUrl(locationSrv.path());
    return removeQueryParams(path);
}

function acronym(str, length = 2) {
    const splittedString = str
        .replace(/[^a-zA-Z0-9]+/g, ' ')
        .split(' ');
    let result = '';
    for (let i = 0; i < length; i++) {
        if (!splittedString[i]) {
            if (splittedString.length === 1) {
                for (let j = 1; j < length; j++) {
                    if (!splittedString[i - 1][j]) {
                        break;
                    }
                    result += splittedString[i - 1][j].toUpperCase();
                }
            }
            break;
        }
        result += splittedString[i][0].toUpperCase();
    }
    return result;
}

function delayedRetry(delayMs, maxRetry = 5, message) {
    let retries = 0;
    return (src) => src.pipe(retryWhen((errors) => errors.pipe(tap(() => {
        retries++;
        if (retries <= maxRetry) {
            console.info(`Failed to load Resource. Retry in ${delayMs / 1000} sec. ${retries}/${maxRetry} times...`);
        }
    }), concatMap((error) => iif(() => retries > maxRetry, throwError(getErrorMessage(maxRetry, message)), timer(delayMs))))));
}
const getErrorMessage = (maxRetry, defaultMessage) => {
    if (!defaultMessage) {
        return `Failed to load Resource for ${maxRetry} times. Giving up.`;
    }
    else {
        return defaultMessage;
    }
};

/*
 * Public API Surface of fs-menu
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FsArray, FsAutofocusDirective, FsCommonModule, FsFormatBytesPipe, FsFormatCurrencyPipe, FsFormatNumberPipe, FsFormatOrdinalNumberPipe, FsFormatTruncatePipe, FsMath, FsPreventDefaultDirective, FsStopPropagationDirective, FsUtil, FsUtilGuidPipe, FsUtilIsEmptyPipe, FsUtilIsNotEmptyPipe, FsUtilStringifyPipe, FsValidate, KEY_0, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_ALT, KEY_BACKSPACE, KEY_CANCEL, KEY_CAPS_LOCK, KEY_CLEAR, KEY_CONTROL, KEY_DELETE, KEY_DOWN, KEY_END, KEY_ENTER, KEY_EQUALS, KEY_ESCAPE, KEY_HELP, KEY_HOME, KEY_INSERT, KEY_LEFT, KEY_PAGE_DOWN, KEY_PAGE_UP, KEY_PAUSE, KEY_PRINTSCREEN, KEY_RETURN, KEY_RIGHT, KEY_SEMICOLON, KEY_SHIFT, KEY_SPACE, KEY_TAB, KEY_UP, Queue, QueueState, acronym, boolean, bytes, compare, currency, debounce, delayedRetry, email, filter, find, getNormalizedPath, guid, inArray, index, indexOf, isClass, isEmpty, isNumeric, keyExists, ksort, length, list, nameValue, number, ordinalNumber, phone, remove, removeQueryParams, resolve, rsort, sort, stringify, throttle, truncate, url, uuid, value };
//# sourceMappingURL=firestitch-common.js.map
