import { ComponentRef } from '@angular/core';
import { OverlayRef } from '@angular/cdk/overlay';
import { Observable, Subscriber } from 'rxjs';
import { FsDrawerMenuComponent } from '../components/drawer-menu/drawer-menu.component';
import { DrawerData } from './drawer-data';
export declare class DrawerMenuRef<TCmp, R = any> {
    private _overlayRef;
    private _dataFactory;
    /** Subject for notifying the user that the menu has finished closing. */
    private readonly _afterClosed$;
    /** Subject for notifying the user that the menu has started closing. */
    private readonly _closeStart$;
    /** Destroy notifier **/
    private readonly _destroy$;
    /** Result to be passed to afterClosed. */
    private _result;
    /** Main menu component and template */
    private _externalMenuContainerRef;
    /** Main menu component and template */
    private _externalMenuComponentRef;
    constructor(_overlayRef: OverlayRef, _dataFactory: DrawerData);
    /**
     * Getter for DRAWER_MENU_DATA for current drawer
     */
    get menuData(): any;
    /**
     * Set reference to menu container
     * @param value
     */
    set containerRef(value: FsDrawerMenuComponent);
    /**
     * Set reference to menu component
     * @param value
     */
    set componentRef(value: ComponentRef<TCmp>);
    /**
     * Gets an observable that is notified when data in DRAWER_DATA was changed
     */
    get dataChanged$(): Observable<void>;
    /**
     * Set value for DRAWER_DATA
     * @param data
     */
    dataChange(data: any): void;
    /**
     * Gets an observable that is notified when the dialog is finished closing.
     */
    afterClosed(): Observable<R | undefined>;
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     */
    closeStart(): Observable<Subscriber<void>>;
    /**
     * Close the menu.
     * @param result Optional result to return to the dialog opener.
     */
    close(result?: R): void;
    destroy(): void;
}
