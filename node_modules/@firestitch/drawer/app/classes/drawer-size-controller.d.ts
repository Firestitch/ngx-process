import { NgZone, OnDestroy } from '@angular/core';
import { DrawerRef } from '../classes/drawer-ref';
import { FsDrawerResizerDirective } from '../directives/drawer-resizer.directive';
import { IDrawerWidthDefinition } from '../interfaces/drawer-config.interface';
import { FsDrawerPersistanceController } from './persistance-controller';
import { DrawerStoreService } from '../services/drawer-store.service';
import * as i0 from "@angular/core";
export declare class DrawerSizeController implements OnDestroy {
    private _drawerRef;
    private _ngZone;
    private _persistanceController;
    private _drawerStore;
    private _mainElRef;
    private _sideElRef;
    private _mainConfig;
    private _sideConfig;
    private _sideOpened;
    private _screenWidth;
    private readonly _borderPadding;
    private _destroy$;
    constructor(_drawerRef: DrawerRef<any>, _ngZone: NgZone, _persistanceController: FsDrawerPersistanceController, _drawerStore: DrawerStoreService);
    get mainElRef(): FsDrawerResizerDirective;
    get sideElRef(): FsDrawerResizerDirective;
    get mainConfig(): IDrawerWidthDefinition;
    get sideConfig(): IDrawerWidthDefinition;
    get screenWidth(): number;
    private get persistedMainWidth();
    private get persistedSideWidth();
    init(): void;
    ngOnDestroy(): void;
    registerElRef(el: FsDrawerResizerDirective): void;
    removeElRef(el: FsDrawerResizerDirective): void;
    getInitialWidth(type: 'main' | 'side'): number;
    getMinWidth(type: 'main' | 'side'): number;
    getMaxWidth(type: 'main' | 'side'): number;
    /**
     * Update width from outside with all calculations to be done
     * @param width
     */
    updateMainWidth(width: number): void;
    /**
     * Update width from outside with all calculations to be done
     * @param width
     */
    updateSideWidth(width: number): void;
    /**
     * Push current drawer to be visible under new one opened
     * @param inFrontDrawer
     */
    pushMainWidth(inFrontDrawer: DrawerRef<any>): void;
    /**
     * Listen for browser resize and update restrictions
     */
    private _listenWindowResize;
    /**
     * Copy initial configs or set default values
     */
    private _initDefaultConfigs;
    private _registerMainRef;
    private _registerSideRef;
    private _removeMainRef;
    private _removeSideRef;
    /**
     * Update current window size
     */
    private _updateScreenWidth;
    /**
     * Update min&max css props for containers
     */
    private _updateMinMaxStyles;
    private _listenSideToggle;
    private _listenWidthChanges;
    static ɵfac: i0.ɵɵFactoryDeclaration<DrawerSizeController, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DrawerSizeController>;
}
