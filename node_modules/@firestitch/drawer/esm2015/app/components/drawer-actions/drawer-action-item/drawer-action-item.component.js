import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, filter, takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../../../classes/drawer-ref';
import { FsDrawerAction } from '../../../helpers/action-type.enum';
import { Action } from '../../../models/action.model';
import * as i0 from "@angular/core";
import * as i1 from "../../../classes/drawer-ref";
import * as i2 from "@angular/material/button";
import * as i3 from "@firestitch/menu";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/common";
import * as i6 from "@angular/material/tooltip";
export class FsDrawerActionItemComponent {
    constructor(drawer, _cdRef) {
        this.drawer = drawer;
        this._cdRef = _cdRef;
        this.actionClicked = new EventEmitter();
        this.isActive = false;
        this.actionTypes = FsDrawerAction;
        this._destroy$ = new Subject();
        this._listenActionChanges();
        this._listenDataChanges();
    }
    ngOnInit() {
        this._updateVisibilityAndLinks();
    }
    ngOnChanges(changes) {
        if (changes.activeAction) {
            this.isActive = this.action.name !== '' && this.action.name === this.activeAction;
        }
    }
    actionClick(event) {
        this.actionClicked.emit(event);
    }
    menuActionClick(action, event) {
        if (action.click) {
            action.click.call(null, {
                data: this.drawer.drawerData,
                event: event,
                drawerRef: this.drawer,
                action: action
            });
        }
    }
    _listenActionChanges() {
        this.drawer.actionUpdated$
            .pipe(filter((name) => name === this.action.name), takeUntil(this._destroy$))
            .subscribe(() => {
            this._cdRef.detectChanges();
        });
    }
    _listenDataChanges() {
        this.drawer.dataChanged$
            .pipe(takeUntil(this._destroy$), debounceTime(50))
            .subscribe(() => {
            this._updateVisibilityAndLinks();
        });
    }
    _updateVisibilityAndLinks() {
        this._updateVisibility();
        this._updateRouterLinks();
        this._cdRef.detectChanges();
    }
    _updateVisibility() {
        this.action.checkVisibility(this.drawer.drawerData);
    }
    _updateRouterLinks() {
        if (this.action.type === this.actionTypes.Menu) {
            this.action.updateRouterLink({
                data: this.drawer.drawerData,
                drawerRef: this.drawer
            });
        }
    }
}
FsDrawerActionItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerActionItemComponent, deps: [{ token: i1.DrawerRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FsDrawerActionItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDrawerActionItemComponent, selector: "fs-drawer-action-item", inputs: { action: "action", activeAction: "activeAction" }, outputs: { actionClicked: "actionClicked" }, usesOnChanges: true, ngImport: i0, template: "<ng-container [ngSwitch]=\"action.type\">\n  <ng-container *ngSwitchCase=\"actionTypes.Button\">\n    <button mat-icon-button\n            type=\"button\"\n            *ngIf=\"action.visible\"\n            [matTooltip]=\"action.tooltip\"\n            [disabled]=\"action.disabled\"\n            [class.active]=\"isActive\"\n            (click)=\"actionClick($event)\">\n      <i class=\"material-icons\">{{action.icon}}</i>\n    </button>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"actionTypes.Menu\">\n    <ng-container *ngIf=\"action.visible\">\n      <button mat-icon-button\n              type=\"button\"\n              class=\"sub-action\"\n              [fsMenuTriggerFor]=\"menu\"\n              [matTooltip]=\"action.tooltip\"\n              [disabled]=\"action.disabled\"\n              [class.active]=\"isActive\"\n              (click)=\"actionClick($event)\">\n        <i class=\"material-icons\">{{action.icon}}</i>\n      </button>\n\n      <fs-menu #menu>\n        <ng-container *ngFor=\"let menuAction of action.menuActions\">\n          <ng-container *ngIf=\"menuAction.isGroup else simpleMenuItem\">\n            <fs-menu-group [label]=\"menuAction.label\" [hidden]=\"!menuAction.visible\">\n              <ng-container *ngFor=\"let groupAction of menuAction.actions\">\n                <ng-template fs-menu-item\n                             [hidden]=\"!groupAction.visible\"\n                             [link]=\"groupAction.routerLink?.link\"\n                             [queryParams]=\"groupAction.routerLink?.queryParams\"\n                             (click)=\"menuActionClick(groupAction, $event);\">\n                  <mat-icon *ngIf=\"menuAction.icon\">{{groupAction.icon}}</mat-icon>\n                  {{groupAction.label}}\n                </ng-template>\n              </ng-container>\n            </fs-menu-group>\n          </ng-container>\n          <ng-template #simpleMenuItem>\n            <ng-template fs-menu-item\n                         [hidden]=\"!menuAction.visible\"\n                         [link]=\"menuAction.routerLink?.link\"\n                         [queryParams]=\"menuAction.routerLink?.queryParams\"\n                         (click)=\"menuActionClick(menuAction, $event);\">\n              <i class=\"material-icons\" *ngIf=\"menuAction.icon\">{{menuAction.icon}}</i>\n              <span>{{menuAction.label}}</span>\n            </ng-template>\n          </ng-template>\n        </ng-container>\n      </fs-menu>\n    </ng-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"actionTypes.Component\">\n    <button mat-icon-button\n            type=\"button\"\n            *ngIf=\"action.visible\"\n            [matTooltip]=\"action.tooltip\"\n            [disabled]=\"action.disabled\"\n            [class.active]=\"isActive\"\n            (click)=\"actionClick($event)\">\n      <i class=\"material-icons\">{{action.icon}}</i>\n    </button>\n  </ng-container>\n</ng-container>\n", styles: [".mat-icon-button{width:35px;height:35px;line-height:35px}.mat-icon-button[disabled=true]{opacity:.5}\n"], components: [{ type: i2.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i3.FsMenuComponent, selector: "fs-menu", inputs: ["class", "buttonClass"], outputs: ["opened", "closed"] }, { type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i5.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i5.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { type: i3.FsMenuTriggerDirective, selector: "[fsMenuTriggerFor]", inputs: ["fsMenuTriggerFor"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.FsMenuItemDirective, selector: "fs-menu-group,[fs-menu-item]", inputs: ["fsClass", "class", "id", "label", "hidden", "groupHidden", "dismissAfterClick", "link", "target", "queryParams"], outputs: ["click"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerActionItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-drawer-action-item',
                    templateUrl: './drawer-action-item.component.html',
                    styleUrls: [
                        './drawer-action-item.component.scss',
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DrawerRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { action: [{
                type: Input
            }], activeAction: [{
                type: Input
            }], actionClicked: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,