import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, } from '@angular/core';
import { Subject } from 'rxjs';
import { FsDrawerAction } from '../../helpers/action-type.enum';
import { DrawerRef } from '../../classes/drawer-ref';
import { FsDrawerMenuService } from '../../services/drawer-menu.service';
import * as i0 from "@angular/core";
import * as i1 from "../../classes/drawer-ref";
import * as i2 from "../../services/drawer-menu.service";
import * as i3 from "./drawer-action-item/drawer-action-item.component";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/icon";
import * as i6 from "@angular/common";
export class FsDrawerActionsComponent {
    constructor(_drawerRef, _drawerMenu, _cdRef) {
        this._drawerRef = _drawerRef;
        this._drawerMenu = _drawerMenu;
        this._cdRef = _cdRef;
        this._destroy$ = new Subject();
    }
    ngOnInit() {
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    actionClick(action, event) {
        const hasComponentType = action.type === FsDrawerAction.Component;
        const hasMenuType = action.type === FsDrawerAction.Menu;
        if (hasComponentType) {
            const menuRef = this._drawerMenu.create(action.component, event.srcElement, action);
            this._drawerRef.addMenuRef(action.menuRefName, menuRef);
            const params = {
                event: event,
                action: action,
                drawerRef: this._drawerRef,
                menuRef: menuRef
            };
            // Call click
            action.click.call(null, params);
            if (action.closeSide) {
                this._drawerRef.closeSide();
            }
        }
        else if (action.click) {
            const params = { event: event, action: action };
            action.click.call(null, params);
        }
        if (action.close) {
            this._drawerRef.close();
        }
        if (action.toggle && ((!hasComponentType && !hasMenuType) || action.closeSide)) {
            if (this._drawerRef.isSideOpen && this._drawerRef.activeAction === action.name) {
                this._drawerRef.toggleSide();
            }
            else {
                this._drawerRef.activateAction(action.name);
            }
        }
    }
    muteEvent(e) {
        e.stopImmediatePropagation();
        e.stopPropagation();
    }
}
FsDrawerActionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerActionsComponent, deps: [{ token: i1.DrawerRef }, { token: i2.FsDrawerMenuService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FsDrawerActionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDrawerActionsComponent, selector: "fs-drawer-actions", inputs: { actions: "actions", activeAction: "activeAction" }, ngImport: i0, template: "<div class=\"actions-container\" (mousedown)=\"muteEvent($event)\" (dragstart)=\"muteEvent($event)\">\n  <div *ngFor=\"let action of actions\" class=\"action-btn\">\n    <fs-drawer-action-item [action]=\"action\"\n                           [activeAction]=\"activeAction\"\n                           (actionClicked)=\"actionClick(action, $event)\">\n    </fs-drawer-action-item>\n  </div>\n</div>\n<div class=\"drag-icon\">\n  <a mat-icon-button class=\"resize-icon\"><mat-icon>drag_indicator</mat-icon></a>\n</div>\n<div class=\"drag-ripple\"></div>\n", styles: [":host{display:flex}.actions-container{flex:0;margin-top:5px;cursor:pointer}.drag-icon{opacity:0;flex:1;display:flex;align-items:center}.drag-ripple{position:absolute;top:0;bottom:0;width:100%;background:transparent;transition:.2s}\n"], components: [{ type: i3.FsDrawerActionItemComponent, selector: "fs-drawer-action-item", inputs: ["action", "activeAction"], outputs: ["actionClicked"] }, { type: i4.MatAnchor, selector: "a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]", inputs: ["disabled", "disableRipple", "color", "tabIndex"], exportAs: ["matButton", "matAnchor"] }, { type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerActionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-drawer-actions',
                    templateUrl: './drawer-actions.component.html',
                    styleUrls: ['./drawer-actions.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DrawerRef }, { type: i2.FsDrawerMenuService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { actions: [{
                type: Input
            }], activeAction: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9jb21wb25lbnRzL2RyYXdlci1hY3Rpb25zL2RyYXdlci1hY3Rpb25zLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9kcmF3ZXItYWN0aW9ucy9kcmF3ZXItYWN0aW9ucy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQzFDLFNBQVMsRUFDVCxLQUFLLEdBR04sTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXJELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOzs7Ozs7OztBQVN6RSxNQUFNLE9BQU8sd0JBQXdCO0lBTW5DLFlBQ1UsVUFBMEIsRUFDMUIsV0FBZ0MsRUFDaEMsTUFBeUI7UUFGekIsZUFBVSxHQUFWLFVBQVUsQ0FBZ0I7UUFDMUIsZ0JBQVcsR0FBWCxXQUFXLENBQXFCO1FBQ2hDLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBTDNCLGNBQVMsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0lBTXJDLENBQUM7SUFFRyxRQUFRO0lBQ2YsQ0FBQztJQUVNLFdBQVc7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUs7UUFDOUIsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxTQUFTLENBQUM7UUFDbEUsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsSUFBSSxDQUFDO1FBRXhELElBQUksZ0JBQWdCLEVBQUU7WUFDcEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRXBGLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFFeEQsTUFBTSxNQUFNLEdBQUc7Z0JBQ2IsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osTUFBTSxFQUFFLE1BQU07Z0JBQ2QsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVO2dCQUMxQixPQUFPLEVBQUUsT0FBTzthQUNqQixDQUFDO1lBQ0YsYUFBYTtZQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztZQUVoQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUM7YUFDN0I7U0FDRjthQUFNLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUN2QixNQUFNLE1BQU0sR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztTQUNqQztRQUVELElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNoQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzlFLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRTtnQkFDOUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUM5QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDN0M7U0FDRjtJQUNILENBQUM7SUFFTSxTQUFTLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUM3QixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7c0hBOURVLHdCQUF3QjswR0FBeEIsd0JBQXdCLHVIQ3RCckMsMmlCQVlBOzRGRFVhLHdCQUF3QjtrQkFOcEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixXQUFXLEVBQUUsaUNBQWlDO29CQUM5QyxTQUFTLEVBQUUsQ0FBRSxpQ0FBaUMsQ0FBRTtvQkFDaEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEO2tLQUVpQixPQUFPO3NCQUF0QixLQUFLO2dCQUNVLFlBQVk7c0JBQTNCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBGc0RyYXdlckFjdGlvbiB9IGZyb20gJy4uLy4uL2hlbHBlcnMvYWN0aW9uLXR5cGUuZW51bSc7XG5pbXBvcnQgeyBEcmF3ZXJSZWYgfSBmcm9tICcuLi8uLi9jbGFzc2VzL2RyYXdlci1yZWYnO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2FjdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBGc0RyYXdlck1lbnVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZHJhd2VyLW1lbnUuc2VydmljZSc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZnMtZHJhd2VyLWFjdGlvbnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vZHJhd2VyLWFjdGlvbnMuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsgJy4vZHJhd2VyLWFjdGlvbnMuY29tcG9uZW50LnNjc3MnIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBGc0RyYXdlckFjdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHB1YmxpYyBhY3Rpb25zOiBBY3Rpb25bXTtcbiAgQElucHV0KCkgcHVibGljIGFjdGl2ZUFjdGlvbjogc3RyaW5nO1xuXG4gIHByaXZhdGUgX2Rlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9kcmF3ZXJSZWY6IERyYXdlclJlZjxhbnk+LFxuICAgIHByaXZhdGUgX2RyYXdlck1lbnU6IEZzRHJhd2VyTWVudVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBfY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICApIHt9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX2Rlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLl9kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHVibGljIGFjdGlvbkNsaWNrKGFjdGlvbiwgZXZlbnQpIHtcbiAgICBjb25zdCBoYXNDb21wb25lbnRUeXBlID0gYWN0aW9uLnR5cGUgPT09IEZzRHJhd2VyQWN0aW9uLkNvbXBvbmVudDtcbiAgICBjb25zdCBoYXNNZW51VHlwZSA9IGFjdGlvbi50eXBlID09PSBGc0RyYXdlckFjdGlvbi5NZW51O1xuXG4gICAgaWYgKGhhc0NvbXBvbmVudFR5cGUpIHtcbiAgICAgIGNvbnN0IG1lbnVSZWYgPSB0aGlzLl9kcmF3ZXJNZW51LmNyZWF0ZShhY3Rpb24uY29tcG9uZW50LCBldmVudC5zcmNFbGVtZW50LCBhY3Rpb24pO1xuXG4gICAgICB0aGlzLl9kcmF3ZXJSZWYuYWRkTWVudVJlZihhY3Rpb24ubWVudVJlZk5hbWUsIG1lbnVSZWYpO1xuXG4gICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGRyYXdlclJlZjogdGhpcy5fZHJhd2VyUmVmLFxuICAgICAgICBtZW51UmVmOiBtZW51UmVmXG4gICAgICB9O1xuICAgICAgLy8gQ2FsbCBjbGlja1xuICAgICAgYWN0aW9uLmNsaWNrLmNhbGwobnVsbCwgcGFyYW1zKTtcblxuICAgICAgaWYgKGFjdGlvbi5jbG9zZVNpZGUpIHtcbiAgICAgICAgdGhpcy5fZHJhd2VyUmVmLmNsb3NlU2lkZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0aW9uLmNsaWNrKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSB7IGV2ZW50OiBldmVudCwgYWN0aW9uOiBhY3Rpb24gfTtcbiAgICAgIGFjdGlvbi5jbGljay5jYWxsKG51bGwsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgaWYgKGFjdGlvbi5jbG9zZSkge1xuICAgICAgdGhpcy5fZHJhd2VyUmVmLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgaWYgKGFjdGlvbi50b2dnbGUgJiYgKCghaGFzQ29tcG9uZW50VHlwZSAmJiAhaGFzTWVudVR5cGUpIHx8IGFjdGlvbi5jbG9zZVNpZGUpKSB7XG4gICAgICBpZiAodGhpcy5fZHJhd2VyUmVmLmlzU2lkZU9wZW4gJiYgdGhpcy5fZHJhd2VyUmVmLmFjdGl2ZUFjdGlvbiA9PT0gYWN0aW9uLm5hbWUpIHtcbiAgICAgICAgdGhpcy5fZHJhd2VyUmVmLnRvZ2dsZVNpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2RyYXdlclJlZi5hY3RpdmF0ZUFjdGlvbihhY3Rpb24ubmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG11dGVFdmVudChlKSB7XG4gICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiYWN0aW9ucy1jb250YWluZXJcIiAobW91c2Vkb3duKT1cIm11dGVFdmVudCgkZXZlbnQpXCIgKGRyYWdzdGFydCk9XCJtdXRlRXZlbnQoJGV2ZW50KVwiPlxuICA8ZGl2ICpuZ0Zvcj1cImxldCBhY3Rpb24gb2YgYWN0aW9uc1wiIGNsYXNzPVwiYWN0aW9uLWJ0blwiPlxuICAgIDxmcy1kcmF3ZXItYWN0aW9uLWl0ZW0gW2FjdGlvbl09XCJhY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW2FjdGl2ZUFjdGlvbl09XCJhY3RpdmVBY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFjdGlvbkNsaWNrZWQpPVwiYWN0aW9uQ2xpY2soYWN0aW9uLCAkZXZlbnQpXCI+XG4gICAgPC9mcy1kcmF3ZXItYWN0aW9uLWl0ZW0+XG4gIDwvZGl2PlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwiZHJhZy1pY29uXCI+XG4gIDxhIG1hdC1pY29uLWJ1dHRvbiBjbGFzcz1cInJlc2l6ZS1pY29uXCI+PG1hdC1pY29uPmRyYWdfaW5kaWNhdG9yPC9tYXQtaWNvbj48L2E+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJkcmFnLXJpcHBsZVwiPjwvZGl2PlxuIl19