import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, QueryList, Renderer2, TemplateRef, } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../../classes/drawer-ref';
import { FsDrawerActionDirective } from '../../directives/drawer-action.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/button";
import * as i2 from "@angular/material/icon";
import * as i3 from "@angular/common";
import * as i4 from "../../directives/drawer-resizer.directive";
export class FsDrawerSideComponent {
    constructor(_cdRef, _renderer, _elRef) {
        this._cdRef = _cdRef;
        this._renderer = _renderer;
        this._elRef = _elRef;
        this.classSide = true;
        this.activeTemplate = null;
        this._hidden = false;
        this._destroy$ = new EventEmitter();
    }
    set hidden(value) {
        this._hidden = value;
        if (this._hidden) {
            this._renderer.setAttribute(this._elRef.nativeElement, 'hidden', 'true');
        }
        else {
            this._renderer.removeAttribute(this._elRef.nativeElement, 'hidden');
        }
    }
    ngOnInit() {
        this.hidden = true;
        if (!this.drawer) {
            console.error('Drawer reference is null for @Input("fsDrawerSide")');
        }
        this._subscribeToActionChanges();
    }
    ngAfterViewInit() {
        setTimeout(() => {
            // Check current side status
            if (this.drawer) {
                this.hidden = !this.drawer.isSideOpen;
            }
            this._updateActiveActionTemplate();
            this._cdRef.detectChanges();
        });
    }
    ngOnDestroy() {
        this._destroy$.emit();
        this._destroy$.complete();
    }
    _subscribeToActionChanges() {
        if (this.drawer) {
            this.drawer.sideToggle$
                .pipe(takeUntil(this._destroy$))
                .subscribe(() => {
                this.hidden = !this.drawer.isSideOpen;
                this._updateActiveActionTemplate();
                this._cdRef.detectChanges();
            });
        }
    }
    _updateActiveActionTemplate() {
        if (this.drawer) {
            const activatedAction = this.drawer.activeAction;
            if (this.drawer.isSideOpen && activatedAction) {
                const selectedActionIndex = this.actions
                    .toArray()
                    .findIndex((action) => action.name === activatedAction);
                this.activeTemplate = this.actionsTemplates.toArray()[selectedActionIndex];
            }
            else {
                this.activeTemplate = null;
            }
        }
    }
}
FsDrawerSideComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerSideComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
FsDrawerSideComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDrawerSideComponent, selector: "[fsDrawerSide]", inputs: { drawer: ["fsDrawerSide", "drawer"] }, host: { properties: { "class.side": "this.classSide" } }, queries: [{ propertyName: "actions", predicate: FsDrawerActionDirective }, { propertyName: "actionsTemplates", predicate: FsDrawerActionDirective, read: TemplateRef }], ngImport: i0, template: "<ng-container [ngSwitch]=\"drawer.drawerConfig.position\" *ngIf=\"activeTemplate\">\n  <ng-container *ngSwitchCase=\"'right'\">\n    <div class=\"side-container\" #sideContainer>\n      <div class=\"side-content\">\n        <ng-template [ngTemplateOutlet]=\"activeTemplate\"></ng-template>\n      </div>\n    </div>\n    <div class=\"resize-side\"\n         resizable=\"true\"\n         direction=\"left\"\n         type=\"side\"\n         [fsDrawerResizer]=\"sideContainer\"\n         [resizable]=\"drawer.drawerConfig.resizable\"\n         [sizeController]=\"drawer.resizeController\"\n         [parentContainer]=\"drawer.drawerContainer\"\n         [actionsContainer]=\"drawer.drawerActionsContainer\"\n    >\n      <a mat-icon-button class=\"resize-icon\"><mat-icon>drag_indicator</mat-icon></a>\n    </div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'left'\">\n    <div class=\"resize-side\"\n         resizable=\"true\"\n         direction=\"right\"\n         [fsDrawerResizer]=\"sideContainer\"\n    >\n    <a mat-icon-button class=\"resize-icon\"><mat-icon>drag_indicator</mat-icon></a>\n    </div>\n    <div class=\"side-container\" #sideContainer>\n      <div class=\"side-content\">\n        <ng-template [ngTemplateOutlet]=\"activeTemplate\"></ng-template>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n", styles: [".resize-icon{width:45px;height:45px;line-height:45px}.resize-icon span{width:45px}\n"], components: [{ type: i1.MatAnchor, selector: "a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]", inputs: ["disabled", "disableRipple", "color", "tabIndex"], exportAs: ["matButton", "matAnchor"] }, { type: i2.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.FsDrawerResizerDirective, selector: "[fsDrawerResizer]", inputs: ["fsDrawerResizer", "type", "direction", "resizable", "parentContainer", "actionsContainer", "sizeController"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerSideComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[fsDrawerSide]',
                    templateUrl: './drawer-side.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styleUrls: [
                        './drawer-side.component.scss',
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { drawer: [{
                type: Input,
                args: ['fsDrawerSide']
            }], classSide: [{
                type: HostBinding,
                args: ['class.side']
            }], actions: [{
                type: ContentChildren,
                args: [FsDrawerActionDirective]
            }], actionsTemplates: [{
                type: ContentChildren,
                args: [FsDrawerActionDirective, { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,