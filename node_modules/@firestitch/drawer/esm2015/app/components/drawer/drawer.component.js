import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, ViewChild, ViewEncapsulation, } from '@angular/core';
import { Location } from '@angular/common';
import { BasePortalOutlet, CdkPortalOutlet, } from '@angular/cdk/portal';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../../classes/drawer-ref';
import { FsDrawerMenuService } from '../../services/drawer-menu.service';
import { DrawerSizeController } from '../../classes/drawer-size-controller';
import { FsDrawerPersistanceController } from '../../classes/persistance-controller';
import { getNormalizedPath } from '@firestitch/common';
import * as i0 from "@angular/core";
import * as i1 from "../../services/drawer-menu.service";
import * as i2 from "../../classes/drawer-ref";
import * as i3 from "../../classes/drawer-size-controller";
import * as i4 from "../../classes/persistance-controller";
import * as i5 from "@angular/common";
import * as i6 from "../drawer-actions/drawer-actions.component";
import * as i7 from "../../directives/drawer-resizer.directive";
import * as i8 from "@angular/cdk/portal";
export class FsDrawerComponent extends BasePortalOutlet {
    constructor(_el, _drawerMenu, _drawerRef, _cdRef, _resizeController, _persistanceController, _location) {
        super();
        this._el = _el;
        this._drawerMenu = _drawerMenu;
        this._drawerRef = _drawerRef;
        this._cdRef = _cdRef;
        this._resizeController = _resizeController;
        this._persistanceController = _persistanceController;
        this._location = _location;
        this.isOpen = false;
        this.isOpenSide = false;
        this.initialized = false;
        this._sideOpen = false;
        this._destroy$ = new Subject();
        this._drawerRef.resizeController = this._resizeController;
    }
    get sideOpen() {
        return this._sideOpen;
    }
    set sideOpen(value) {
        this._sideOpen = value;
        this._el.nativeElement.classList
            .toggle('side-open', this.sideOpen);
    }
    ngOnInit() {
        this._listenDataChanges();
        this.config = this.drawerRef.drawerConfig;
        if (this.config.persist) {
            const namespace = getNormalizedPath(this._location);
            this._persistanceController.setConfig(this.config.persist, namespace);
        }
        this._resizeController.init();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    open() {
        this.isOpen = true;
    }
    close() {
        this.isOpen = false;
    }
    openSide() {
        this.isOpenSide = true;
    }
    closeSide() {
        this.isOpenSide = false;
    }
    setDrawerRef(value) {
        this.drawerRef = value;
        // Need to be like a parent for children resize
        this.drawerRef.drawerContainer = this._drawerContainer;
        this.drawerRef.drawerActionsContainer = this._drawerActionsContainer;
        this.drawerRef.sideToggle$
            .pipe(takeUntil(this._destroy$))
            .subscribe((opened) => {
            this.sideOpen = opened;
        });
        this.initialized = true;
    }
    /**
     * Attach a ComponentPortal as content to this dialog container.
     * @param portal Portal to be attached as the dialog content.
     */
    attachComponentPortal(portal) {
        if (this._portalOutlet.hasAttached()) {
            throw Error('Drawer component already attached');
        }
        return this._portalOutlet.attachComponentPortal(portal);
    }
    /**
     * Attach a TemplatePortal as content to this dialog container.
     * @param portal Portal to be attached as the dialog content.
     */
    attachTemplatePortal(portal) {
        if (this._portalOutlet.hasAttached()) {
            throw Error('Drawer template already attached');
        }
        return this._portalOutlet.attachTemplatePortal(portal);
    }
    _listenDataChanges() {
        this._drawerRef.dataChanged$
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            this._cdRef.detectChanges();
        });
    }
}
FsDrawerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerComponent, deps: [{ token: i0.ElementRef }, { token: i1.FsDrawerMenuService }, { token: i2.DrawerRef }, { token: i0.ChangeDetectorRef }, { token: i3.DrawerSizeController }, { token: i4.FsDrawerPersistanceController }, { token: i5.Location }], target: i0.ɵɵFactoryTarget.Component });
FsDrawerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsDrawerComponent, selector: "fs-drawer", host: { classAttribute: "fs-drawer-container" }, providers: [
        FsDrawerMenuService,
        FsDrawerPersistanceController,
        DrawerSizeController,
    ], viewQueries: [{ propertyName: "_portalOutlet", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }, { propertyName: "_drawerContainer", first: true, predicate: ["drawerContainer"], descendants: true, static: true }, { propertyName: "_drawerActionsContainer", first: true, predicate: ["drawerActionsContainer"], descendants: true, read: ElementRef, static: true }], usesInheritance: true, ngImport: i0, template: "<div class=\"mat-elevation-z2 drawer\" #drawer\n     hidden\n     [ngClass]=\"config.position\"\n     [hidden]=\"!initialized\">\n  <ng-container>\n    <fs-drawer-actions class=\"drawer-actions\"\n                       #drawerActionsContainer\n                       type=\"main\"\n                       [fsDrawerResizer]=\"drawer\"\n                       [resizable]=\"drawerRef.drawerConfig.resizable\"\n                       [sizeController]=\"drawerRef.resizeController\"\n                       [direction]=\"config.position\"\n                       [actions]=\"config.actions\"\n                       [activeAction]=\"drawerRef.activeAction$ | async\">\n    </fs-drawer-actions>\n    <div class=\"drawer-container\" #drawerContainer>\n      <ng-template cdkPortalOutlet></ng-template>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i6.FsDrawerActionsComponent, selector: "fs-drawer-actions", inputs: ["actions", "activeAction"] }], directives: [{ type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.FsDrawerResizerDirective, selector: "[fsDrawerResizer]", inputs: ["fsDrawerResizer", "type", "direction", "resizable", "parentContainer", "actionsContainer", "sizeController"] }, { type: i8.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-drawer',
                    templateUrl: './drawer.component.html',
                    providers: [
                        FsDrawerMenuService,
                        FsDrawerPersistanceController,
                        DrawerSizeController,
                    ],
                    host: {
                        'class': 'fs-drawer-container',
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.FsDrawerMenuService }, { type: i2.DrawerRef }, { type: i0.ChangeDetectorRef }, { type: i3.DrawerSizeController }, { type: i4.FsDrawerPersistanceController }, { type: i5.Location }]; }, propDecorators: { _portalOutlet: [{
                type: ViewChild,
                args: [CdkPortalOutlet, { static: true }]
            }], _drawerContainer: [{
                type: ViewChild,
                args: ['drawerContainer', { static: true }]
            }], _drawerActionsContainer: [{
                type: ViewChild,
                args: ['drawerActionsContainer', { read: ElementRef, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,