import { Inject, Injectable, Injector, Optional, SkipSelf } from '@angular/core';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { Subject, merge } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { merge as _merge } from 'lodash-es';
import { FsDrawerComponent } from '../components/drawer/drawer.component';
import { DrawerRef } from '../classes/drawer-ref';
import { DrawerData } from '../classes/drawer-data';
import { DRAWER_DATA } from './drawer-data';
import { DrawerStoreService } from './drawer-store.service';
import { DRAWER_DEFAULT_CONFIG } from './drawer-default-config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "./drawer-store.service";
export class FsDrawerService {
    constructor(_parentDrawerService, _defaultConfig, _overlay, _injector, _drawerStore) {
        this._parentDrawerService = _parentDrawerService;
        this._defaultConfig = _defaultConfig;
        this._overlay = _overlay;
        this._injector = _injector;
        this._drawerStore = _drawerStore;
        this._destroy$ = new Subject();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    open(component, config) {
        const overlayRef = this._createOverlay();
        const dataFactory = DrawerData.createWithProxy(config.data);
        delete config.data;
        config = _merge({}, this._defaultConfig || {}, config);
        const drawerRef = new DrawerRef(overlayRef, dataFactory, config);
        const containerRef = this._attachDrawerContainer(overlayRef, drawerRef, dataFactory);
        const componentRef = this._attachComponent(component, containerRef, drawerRef, dataFactory);
        drawerRef.containerRef = containerRef;
        containerRef.setDrawerRef(drawerRef);
        drawerRef.componentRef = componentRef;
        drawerRef.events();
        drawerRef.open();
        this._storeDrawerRef(drawerRef);
        merge(drawerRef.afterOpened$, drawerRef.afterClosed$)
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            setTimeout(() => {
                this._applyBackdrop();
                this._applyBodyOpenClass();
            });
        });
        return drawerRef;
    }
    closeAll() {
        this._drawerStore.drawerRefs
            .forEach((ref) => ref.close());
        if (this._parentDrawerService) {
            this._parentDrawerService.closeAll();
        }
    }
    _applyBackdrop() {
        Array.from(this._drawerStore.drawerRefs)
            .forEach((drawerRef, index) => {
            const backdrop = drawerRef.overlayRef.backdropElement;
            if (backdrop) {
                if (index && index === (this._drawerStore.numberOfOpenedDrawers - 1)) {
                    backdrop.classList.add('fs-drawer-backdrop-active');
                }
                else {
                    backdrop.classList.remove('fs-drawer-backdrop-active');
                }
            }
        });
    }
    _applyBodyOpenClass() {
        if (this._drawerStore.numberOfOpenedDrawers) {
            document.body.classList.add('fs-drawer-open');
        }
        else {
            document.body.classList.remove('fs-drawer-open');
        }
    }
    _storeDrawerRef(ref) {
        this._drawerStore.addRef(ref);
        ref.destroy$
            .pipe(take(1), takeUntil(this._destroy$))
            .subscribe(() => {
            this._drawerStore.deleteRef(ref);
        });
    }
    _createOverlay() {
        const overlayConfig = this._getOverlayConfig();
        return this._overlay.create(overlayConfig);
    }
    _getOverlayConfig() {
        return new OverlayConfig({
            hasBackdrop: true,
            backdropClass: 'fs-drawer-backdrop'
        });
    }
    _attachDrawerContainer(overlayRef, drawerRef, dataFactory) {
        const injector = this._createInjector(drawerRef, dataFactory);
        const containerPortal = new ComponentPortal(FsDrawerComponent, undefined, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    _attachComponent(componentRef, drawerContainer, drawerRef, dataFactory) {
        const injector = this._createInjector(drawerRef, dataFactory);
        return drawerContainer.attachComponentPortal(new ComponentPortal(componentRef, undefined, injector));
    }
    _createInjector(componentRef, dataFactory) {
        const injectionTokens = new WeakMap([
            [DrawerRef, componentRef],
            [DRAWER_DATA, dataFactory]
        ]);
        return new PortalInjector(this._injector, injectionTokens);
    }
}
FsDrawerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerService, deps: [{ token: FsDrawerService, optional: true, skipSelf: true }, { token: DRAWER_DEFAULT_CONFIG, optional: true }, { token: i1.Overlay }, { token: i0.Injector }, { token: i2.DrawerStoreService }], target: i0.ɵɵFactoryTarget.Injectable });
FsDrawerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: FsDrawerService, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DRAWER_DEFAULT_CONFIG]
                }] }, { type: i1.Overlay }, { type: i0.Injector }, { type: i2.DrawerStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,