import { ElementRef, Injectable, Injector } from '@angular/core';
import { Overlay, OverlayConfig } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { FsDrawerMenuComponent } from '../components/drawer-menu/drawer-menu.component';
import { DrawerMenuRef } from '../classes/drawer-menu-ref';
import { DrawerData } from '../classes/drawer-data';
import { DRAWER_MENU_DATA } from '../services/drawer-menu-data';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/cdk/layout";
export class FsDrawerMenuService {
    constructor(_overlay, _injector, _breakpointObserver) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._breakpointObserver = _breakpointObserver;
    }
    create(component, container, config) {
        const overlayRef = this.createOverlay(container);
        const dataFactory = DrawerData.createWithProxy(config.data);
        const menuRef = new DrawerMenuRef(overlayRef, dataFactory);
        const containerRef = this.attachContainer(overlayRef, menuRef, dataFactory);
        const componentRef = this.attachComponent(component, containerRef, menuRef, dataFactory);
        menuRef.containerRef = containerRef;
        containerRef.setDrawerMenuRef(menuRef);
        menuRef.componentRef = componentRef;
        return menuRef;
    }
    createOverlay(container) {
        const overlayConfig = this.getOverlayConfig(container);
        return this._overlay.create(overlayConfig);
    }
    getOverlayConfig(container) {
        const element = new ElementRef(container); // positionStrategy needs ElementRef;
        let strategy = null;
        if (this._breakpointObserver.isMatched(Breakpoints.XSmall)) {
            strategy = this._overlay
                .position()
                .global()
                .centerHorizontally()
                .centerVertically();
        }
        else {
            const positions = [
                { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' }
            ];
            strategy = this._overlay
                .position()
                .flexibleConnectedTo(element)
                .withPositions(positions);
        }
        return new OverlayConfig({
            positionStrategy: strategy,
            scrollStrategy: this._overlay.scrollStrategies.reposition(),
            hasBackdrop: true,
            backdropClass: 'cdk-overlay-transparent-backdrop'
        });
    }
    attachContainer(overlayRef, menuRef, dataFactory) {
        const injector = this.createInjector(menuRef, dataFactory);
        const containerPortal = new ComponentPortal(FsDrawerMenuComponent, undefined, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    attachComponent(componentRef, externalContainer, externalRef, config) {
        const injector = this.createInjector(externalRef, config);
        return externalContainer.attachComponentPortal(new ComponentPortal(componentRef, undefined, injector));
    }
    createInjector(componentRef, dataFactory) {
        const injectionTokens = new WeakMap([
            [DrawerMenuRef, componentRef],
            [DRAWER_MENU_DATA, dataFactory]
        ]);
        return new PortalInjector(this._injector, injectionTokens);
    }
}
FsDrawerMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerMenuService, deps: [{ token: i1.Overlay }, { token: i0.Injector }, { token: i2.BreakpointObserver }], target: i0.ɵɵFactoryTarget.Injectable });
FsDrawerMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerMenuService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerMenuService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.Injector }, { type: i2.BreakpointObserver }]; } });
//# sourceMappingURL=data:application/json;base64,