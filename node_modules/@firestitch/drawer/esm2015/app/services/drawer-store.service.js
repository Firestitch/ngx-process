import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class DrawerStoreService {
    constructor() {
        this._openedDrawers = [];
    }
    get drawerRefs() {
        return [...this._openedDrawers];
    }
    get numberOfOpenedDrawers() {
        return this._openedDrawers.length;
    }
    getLevelForRef(value) {
        return this._openedDrawers.indexOf(value) + 1;
    }
    addRef(value) {
        if (this._openedDrawers.indexOf(value) === -1) {
            this._openedDrawers.push(value);
            this._pushDrawersCascade();
        }
    }
    deleteRef(value) {
        this._openedDrawers = this._openedDrawers
            .filter((ref) => ref !== value);
    }
    /**
     * In case, when we want to open more than 1 drawer
     * our previously opened drawers should be visible
     *
     *      d1   d2   d3
     *     ---- ---- ---
     *    | x  | x1 | x2
     *    | y  | y1 | y2
     *    | z  | z1 | z2
     *     ---- ---- ---
     *
     * Where d1, d2 - previously opened drawers
     * d1 and d2 must be pushed left to be visible under just opened d3
     */
    _pushDrawersCascade() {
        if (this.numberOfOpenedDrawers > 1) {
            // SetTimeout should be here because we must wait render newly opened drawer
            // to be able to get his width
            setTimeout(() => {
                const refsArr = Array.from(this._openedDrawers.values());
                for (let i = refsArr.length - 1; i > 0; i--) {
                    const prevRef = refsArr[i - 1];
                    const currRef = refsArr[i];
                    prevRef.resizeController.pushMainWidth(currRef);
                }
            });
        }
    }
}
DrawerStoreService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DrawerStoreService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DrawerStoreService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DrawerStoreService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DrawerStoreService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLXN0b3JlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBwL3NlcnZpY2VzL2RyYXdlci1zdG9yZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzNDLE1BQU0sT0FBTyxrQkFBa0I7SUFIL0I7UUFLVSxtQkFBYyxHQUFxQixFQUFFLENBQUM7S0F5RC9DO0lBdkRDLElBQVcsVUFBVTtRQUNuQixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQVcscUJBQXFCO1FBQzlCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7SUFDcEMsQ0FBQztJQUVNLGNBQWMsQ0FBQyxLQUFxQjtRQUN6QyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQXFCO1FBQ2pDLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFaEMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQXFCO1FBQ3BDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWM7YUFDdEMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDSyxtQkFBbUI7UUFDekIsSUFBSSxJQUFJLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxFQUFFO1lBQ2xDLDRFQUE0RTtZQUM1RSw4QkFBOEI7WUFDOUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztnQkFFekQsS0FBSyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUMzQyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUMvQixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRTNCLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ2pEO1lBQ0gsQ0FBQyxDQUFDLENBQUE7U0FDSDtJQUNILENBQUM7O2dIQTFEVSxrQkFBa0I7b0hBQWxCLGtCQUFrQixjQUZqQixNQUFNOzRGQUVQLGtCQUFrQjtrQkFIOUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEcmF3ZXJSZWYgfSBmcm9tICcuLi9jbGFzc2VzL2RyYXdlci1yZWYnO1xuXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBEcmF3ZXJTdG9yZVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgX29wZW5lZERyYXdlcnM6IERyYXdlclJlZjxhbnk+W10gPSBbXTtcblxuICBwdWJsaWMgZ2V0IGRyYXdlclJlZnMoKTogRHJhd2VyUmVmPGFueT5bXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLl9vcGVuZWREcmF3ZXJzXTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbnVtYmVyT2ZPcGVuZWREcmF3ZXJzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX29wZW5lZERyYXdlcnMubGVuZ3RoO1xuICB9XG5cbiAgcHVibGljIGdldExldmVsRm9yUmVmKHZhbHVlOiBEcmF3ZXJSZWY8YW55Pik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX29wZW5lZERyYXdlcnMuaW5kZXhPZih2YWx1ZSkgKyAxO1xuICB9XG5cbiAgcHVibGljIGFkZFJlZih2YWx1ZTogRHJhd2VyUmVmPGFueT4pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fb3BlbmVkRHJhd2Vycy5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuX29wZW5lZERyYXdlcnMucHVzaCh2YWx1ZSk7XG5cbiAgICAgIHRoaXMuX3B1c2hEcmF3ZXJzQ2FzY2FkZSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkZWxldGVSZWYodmFsdWU6IERyYXdlclJlZjxhbnk+KTogdm9pZCB7XG4gICAgdGhpcy5fb3BlbmVkRHJhd2VycyA9IHRoaXMuX29wZW5lZERyYXdlcnNcbiAgICAgIC5maWx0ZXIoKHJlZikgPT4gcmVmICE9PSB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogSW4gY2FzZSwgd2hlbiB3ZSB3YW50IHRvIG9wZW4gbW9yZSB0aGFuIDEgZHJhd2VyXG4gICAqIG91ciBwcmV2aW91c2x5IG9wZW5lZCBkcmF3ZXJzIHNob3VsZCBiZSB2aXNpYmxlXG4gICAqXG4gICAqICAgICAgZDEgICBkMiAgIGQzXG4gICAqICAgICAtLS0tIC0tLS0gLS0tXG4gICAqICAgIHwgeCAgfCB4MSB8IHgyXG4gICAqICAgIHwgeSAgfCB5MSB8IHkyXG4gICAqICAgIHwgeiAgfCB6MSB8IHoyXG4gICAqICAgICAtLS0tIC0tLS0gLS0tXG4gICAqXG4gICAqIFdoZXJlIGQxLCBkMiAtIHByZXZpb3VzbHkgb3BlbmVkIGRyYXdlcnNcbiAgICogZDEgYW5kIGQyIG11c3QgYmUgcHVzaGVkIGxlZnQgdG8gYmUgdmlzaWJsZSB1bmRlciBqdXN0IG9wZW5lZCBkM1xuICAgKi9cbiAgcHJpdmF0ZSBfcHVzaERyYXdlcnNDYXNjYWRlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm51bWJlck9mT3BlbmVkRHJhd2VycyA+IDEpIHtcbiAgICAgIC8vIFNldFRpbWVvdXQgc2hvdWxkIGJlIGhlcmUgYmVjYXVzZSB3ZSBtdXN0IHdhaXQgcmVuZGVyIG5ld2x5IG9wZW5lZCBkcmF3ZXJcbiAgICAgIC8vIHRvIGJlIGFibGUgdG8gZ2V0IGhpcyB3aWR0aFxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlZnNBcnIgPSBBcnJheS5mcm9tKHRoaXMuX29wZW5lZERyYXdlcnMudmFsdWVzKCkpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSByZWZzQXJyLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgICBjb25zdCBwcmV2UmVmID0gcmVmc0FycltpIC0gMV07XG4gICAgICAgICAgY29uc3QgY3VyclJlZiA9IHJlZnNBcnJbaV07XG5cbiAgICAgICAgICBwcmV2UmVmLnJlc2l6ZUNvbnRyb2xsZXIucHVzaE1haW5XaWR0aChjdXJyUmVmKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiJdfQ==