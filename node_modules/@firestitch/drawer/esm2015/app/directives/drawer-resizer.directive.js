import { Directive, ElementRef, Input, NgZone, Renderer2, } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DrawerSizeController } from '../classes/drawer-size-controller';
import { DrawerRef } from '../classes/drawer-ref';
import { MAIN_RESIZE_ACTION_BAR_WIDTH, SIDE_RESIZE_BAR_WIDTH } from '../consts/sizes.cont';
import * as i0 from "@angular/core";
import * as i1 from "../classes/drawer-ref";
export class FsDrawerResizerDirective {
    constructor(_el, _renderer, _ngZone, _drawerRef) {
        this._el = _el;
        this._renderer = _renderer;
        this._ngZone = _ngZone;
        this._drawerRef = _drawerRef;
        this.fsDrawerResizer = this._el.nativeElement;
        this.direction = 'left';
        this.resizable = true;
        this._dragStartHandler = this._dragStart.bind(this);
        this._dragHandler = this._drag.bind(this);
        this._dragEndHandler = this._dragEnd.bind(this);
        this._x = 0;
        this._width$ = new BehaviorSubject(0);
        this._actionsWidth = 0;
        this._destroy$ = new Subject();
    }
    get drawerRef() {
        return this._drawerRef;
    }
    get isMainDrawer() {
        return this.type === 'main';
    }
    get isSideDrawer() {
        return this.type === 'side';
    }
    get width() {
        return this._width$.getValue();
    }
    get width$() {
        return this._width$.pipe(takeUntil(this._destroy$));
    }
    get minWidth() {
        const minWidth = this.sizeController.getMinWidth(this.type);
        if (minWidth && minWidth >= 0) {
            const screenWidth = this.sizeController.screenWidth;
            const barWidth = this.barWidth;
            if (screenWidth - minWidth < barWidth) {
                return this.sizeController.screenWidth - barWidth;
            }
            else {
                return minWidth;
            }
        }
    }
    get maxWidth() {
        const maxWidth = this.sizeController.getMaxWidth(this.type);
        let parentContainerWidth = null;
        if (this.parentContainer) {
            parentContainerWidth = this._getElementWidth(this.parentContainer.nativeElement);
        }
        if (parentContainerWidth !== null) {
            return !maxWidth || maxWidth >= parentContainerWidth
                ? parentContainerWidth - this._actionsWidth * 2
                : maxWidth;
        }
        else {
            return !maxWidth || maxWidth >= this.sizeController.screenWidth
                ? this.sizeController.screenWidth
                : maxWidth;
        }
    }
    get barWidth() {
        return this.isMainDrawer
            ? MAIN_RESIZE_ACTION_BAR_WIDTH
            : SIDE_RESIZE_BAR_WIDTH;
    }
    ngOnInit() {
        this.sizeController.registerElRef(this);
        if (this.resizable) {
            this._ngZone.runOutsideAngular(() => {
                this._el.nativeElement.addEventListener('mousedown', this._dragStartHandler, false);
                this._el.nativeElement.addEventListener('touchstart', this._dragStartHandler, false);
            });
            if (this.actionsContainer) {
                this._actionsWidth = this._getElementWidth(this.actionsContainer.nativeElement);
            }
            this.setMinMaxStyles();
            const minWidth = this.sizeController.getMinWidth(this.type);
            let width = this.sizeController.getInitialWidth(this.type)
                || this._getElementWidth(this.fsDrawerResizer);
            if (width < minWidth) {
                width = minWidth;
            }
            this.updateWidth(width);
        }
    }
    updateWidth(width) {
        const minConfiguredWidth = this.sizeController.getMinWidth(this.type);
        const maxConfiguredWidth = this.sizeController.getMaxWidth(this.type);
        const availableWidth = this.sizeController.screenWidth;
        // newWidth should not be
        // greater than maxConfiguredWidth
        // and not lesser than minConfiguredWidth
        width = Math.max(minConfiguredWidth, Math.min(width, maxConfiguredWidth));
        // and sure it shouldn't be greater than screen width
        width = Math.min(width, availableWidth);
        if (width === this.width) {
            return;
        }
        this._width$.next(width);
        requestAnimationFrame(() => {
            this._renderer.setStyle(this.fsDrawerResizer, 'width', `${width}px`);
        });
    }
    ngOnDestroy() {
        this._el.nativeElement.removeEventListener('mousedown', this._dragStartHandler, false);
        this._el.nativeElement.removeEventListener('touchstart', this._dragStartHandler, false);
        this.sizeController.removeElRef(this);
        this._destroy$.next();
        this._destroy$.complete();
    }
    /**
     * Set inline styles min/max width
     */
    setMinMaxStyles() {
        requestAnimationFrame(() => {
            this._renderer.setStyle(this.fsDrawerResizer, 'min-width', `${this.minWidth}px`);
            this._renderer.setStyle(this.fsDrawerResizer, 'max-width', `${this.maxWidth}px`);
        });
    }
    /**
     * Subscribe to move events and init base dimensions/restrictions
     * @param event { MouseEvent }
     */
    _dragStart(event) {
        this._x = this._getClientX(event);
        this.updateWidth(this._getElementWidth(this.fsDrawerResizer));
        this.setMinMaxStyles();
        document.addEventListener('touchmove', this._dragHandler, false);
        document.addEventListener('touchend', this._dragEndHandler, false);
        document.addEventListener('mousemove', this._dragHandler, false);
        document.addEventListener('mouseup', this._dragEndHandler, false);
    }
    /**
     * Update coordinates during drag
     * @param event
     */
    _drag(event) {
        const clientX = this._getClientX(event);
        const predictedWidth = this._calcWidth(this.direction, clientX);
        this._updatePosition(clientX, predictedWidth);
        // this._emitResizeEvent();
    }
    /**
     * Remove listeners when drag finished
     * @param event
     */
    _dragEnd(event) {
        document.removeEventListener('mousemove', this._dragHandler, false);
        document.removeEventListener('mouseup', this._dragEndHandler, false);
        document.removeEventListener('touchmove', this._dragHandler, false);
        document.removeEventListener('touchend', this._dragEndHandler, false);
    }
    /**
     *
     * @param event
     */
    _getClientX(event) {
        return event.touches ? event.touches[0].clientX : event.clientX;
    }
    /**
     * Will return width of element
     * @param el
     */
    _getElementWidth(el) {
        return el.getBoundingClientRect().width;
    }
    /**
     * Update width and position of target element
     * @param clientX
     * @param width
     */
    _updatePosition(clientX, width) {
        this._x = clientX;
        this.updateWidth(width < 0 ? 0 : width);
    }
    /**
     * Calc new width based on offset from previous position
     * @param direction
     * @param clientX
     */
    _calcWidth(direction, clientX) {
        const directionSign = direction === 'left' ? -1 : 1;
        return this.width + (this._x - clientX) * directionSign;
    }
}
FsDrawerResizerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerResizerDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: i1.DrawerRef }], target: i0.ɵɵFactoryTarget.Directive });
FsDrawerResizerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsDrawerResizerDirective, selector: "[fsDrawerResizer]", inputs: { fsDrawerResizer: "fsDrawerResizer", type: "type", direction: "direction", resizable: "resizable", parentContainer: "parentContainer", actionsContainer: "actionsContainer", sizeController: "sizeController" }, host: { properties: { "style.cursor": "\"col-resize\"" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsDrawerResizerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fsDrawerResizer]',
                    host: {
                        '[style.cursor]': '"col-resize"',
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: i1.DrawerRef }]; }, propDecorators: { fsDrawerResizer: [{
                type: Input
            }], type: [{
                type: Input
            }], direction: [{
                type: Input
            }], resizable: [{
                type: Input
            }], parentContainer: [{
                type: Input
            }], actionsContainer: [{
                type: Input
            }], sizeController: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,