import { Injectable, NgZone } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, filter, takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../classes/drawer-ref';
import { FsDrawerPersistanceController } from './persistance-controller';
import { DrawerStoreService } from '../services/drawer-store.service';
import { MAIN_DRAWER_DEFAULT_WIDTH, MAIN_RESIZE_ACTION_BAR_WIDTH, SIDE_DRAWER_DEFAULT_WIDTH, SIDE_RESIZE_BAR_WIDTH } from '../consts/sizes.cont';
import * as i0 from "@angular/core";
import * as i1 from "../classes/drawer-ref";
import * as i2 from "./persistance-controller";
import * as i3 from "../services/drawer-store.service";
export class DrawerSizeController {
    constructor(_drawerRef, _ngZone, _persistanceController, _drawerStore) {
        this._drawerRef = _drawerRef;
        this._ngZone = _ngZone;
        this._persistanceController = _persistanceController;
        this._drawerStore = _drawerStore;
        this._sideOpened = false;
        this._borderPadding = 0;
        this._destroy$ = new Subject();
    }
    get mainElRef() {
        return this._mainElRef;
    }
    get sideElRef() {
        return this._sideElRef;
    }
    get mainConfig() {
        return this._mainConfig;
    }
    get sideConfig() {
        return this._sideConfig;
    }
    get screenWidth() {
        return this._screenWidth;
    }
    get persistedMainWidth() {
        return this._persistanceController.enabled
            ? this._persistanceController.getDataFromScope('mainWidth')
            : null;
    }
    get persistedSideWidth() {
        return this._persistanceController.enabled
            ? this._persistanceController.getDataFromScope('sideWidth')
            : null;
    }
    init() {
        this._initDefaultConfigs();
        this._updateScreenWidth();
        this._listenWindowResize();
        this._listenSideToggle();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    registerElRef(el) {
        if (el.isMainDrawer) {
            this._registerMainRef(el);
            this._listenWidthChanges(el);
        }
        else if (el.isSideDrawer) {
            this._registerSideRef(el);
            this._listenWidthChanges(el);
        }
        else {
            throw Error('Unrecognized resize element type');
        }
    }
    removeElRef(el) {
        if (el.isMainDrawer) {
            this._removeMainRef();
        }
        else if (el.isSideDrawer) {
            this._removeSideRef();
        }
    }
    getInitialWidth(type) {
        if (type === 'main') {
            return this.mainConfig.initial;
        }
        else if (type === 'side') {
            return this.sideConfig.initial;
        }
        else {
            return void 0;
        }
    }
    getMinWidth(type) {
        var _a, _b;
        if (type === 'main') {
            return (_a = this.mainConfig.min) !== null && _a !== void 0 ? _a : 0;
        }
        else if (type === 'side') {
            return (_b = this.sideConfig.min) !== null && _b !== void 0 ? _b : 0;
        }
        else {
            return 0;
        }
    }
    getMaxWidth(type) {
        var _a, _b;
        if (type === 'main') {
            return (_a = this.mainConfig.max) !== null && _a !== void 0 ? _a : window.innerWidth;
        }
        else if (type === 'side') {
            return (_b = this.sideConfig.max) !== null && _b !== void 0 ? _b : window.innerWidth;
        }
        else {
            return window.innerWidth;
        }
    }
    /**
     * Update width from outside with all calculations to be done
     * @param width
     */
    updateMainWidth(width) {
        const sideWidth = (this.sideElRef && this.sideElRef.width) || 0;
        this.mainElRef.updateWidth(sideWidth + width);
    }
    /**
     * Update width from outside with all calculations to be done
     * @param width
     */
    updateSideWidth(width) {
        if (this.sideElRef) {
            const currentWidth = this.mainElRef.width - this.sideElRef.width;
            this.mainElRef.updateWidth(currentWidth + width);
            this.sideElRef.updateWidth(width);
        }
    }
    /**
     * Push current drawer to be visible under new one opened
     * @param inFrontDrawer
     */
    pushMainWidth(inFrontDrawer) {
        const inFrontDrawerTotalWidth = inFrontDrawer.resizeController.mainElRef.width
            + MAIN_RESIZE_ACTION_BAR_WIDTH;
        if (this.mainElRef.width <= inFrontDrawerTotalWidth) {
            this.updateMainWidth(inFrontDrawerTotalWidth);
        }
    }
    /**
     * Listen for browser resize and update restrictions
     */
    _listenWindowResize() {
        this._ngZone.runOutsideAngular(() => {
            fromEvent(window, 'resize')
                .pipe(debounceTime(50), takeUntil(this._destroy$))
                .subscribe(() => {
                this._updateScreenWidth();
                this._updateMinMaxStyles();
            });
        });
    }
    /**
     * Copy initial configs or set default values
     */
    _initDefaultConfigs() {
        // Main initialization
        this._mainConfig =
            (this._drawerRef.drawerConfig.width && this._drawerRef.drawerConfig.width.main)
                || {};
        this._mainConfig.initial = this.persistedMainWidth
            || this._mainConfig.initial
            || MAIN_DRAWER_DEFAULT_WIDTH;
        // Side initialization
        this._sideConfig =
            (this._drawerRef.drawerConfig.width && this._drawerRef.drawerConfig.width.side)
                || {};
        this._sideConfig.initial = this.persistedSideWidth
            || this._sideConfig.initial
            || SIDE_DRAWER_DEFAULT_WIDTH;
    }
    _registerMainRef(el) {
        this._mainElRef = el;
    }
    _registerSideRef(el) {
        this._sideElRef = el;
    }
    _removeMainRef() {
        this._mainElRef = null;
    }
    _removeSideRef() {
        this._sideElRef = null;
    }
    /**
     * Update current window size
     */
    _updateScreenWidth() {
        this._screenWidth = (window.innerWidth - this._borderPadding);
    }
    /**
     * Update min&max css props for containers
     */
    _updateMinMaxStyles() {
        this.mainElRef.setMinMaxStyles();
        if (this.sideElRef) {
            this.sideElRef.setMinMaxStyles();
        }
    }
    _listenSideToggle() {
        this._drawerRef.sideToggle$
            .pipe(takeUntil(this._destroy$))
            .subscribe((opened) => {
            if (this._sideOpened === opened) {
                return;
            }
            this._sideOpened = opened;
            if (opened) {
                const currentWidth = this.mainElRef.width;
                const sideWidth = this.getInitialWidth('side');
                this._mainElRef.updateWidth(currentWidth + sideWidth + SIDE_RESIZE_BAR_WIDTH);
            }
            else {
                const actualSideWidth = this.sideElRef.fsDrawerResizer.getBoundingClientRect().width;
                const mainWidth = this.mainElRef.width - actualSideWidth - SIDE_RESIZE_BAR_WIDTH;
                this._mainElRef.updateWidth(mainWidth);
            }
        });
    }
    _listenWidthChanges(el) {
        if (!this._persistanceController.enabled) {
            return;
        }
        el.width$
            .pipe(debounceTime(200), filter(() => {
            return this._drawerStore.getLevelForRef(el.drawerRef) === this._drawerStore.numberOfOpenedDrawers;
        }))
            .subscribe({
            next: () => {
                var _a;
                const sideWidth = ((_a = this._sideElRef) === null || _a === void 0 ? void 0 : _a.width) || 0;
                if (this._mainElRef) {
                    this._persistanceController.saveDataToScope('mainWidth', this._mainElRef.width - sideWidth - SIDE_RESIZE_BAR_WIDTH);
                }
                if (this._sideElRef) {
                    this._persistanceController.saveDataToScope('sideWidth', sideWidth);
                }
            }
        });
    }
}
DrawerSizeController.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DrawerSizeController, deps: [{ token: i1.DrawerRef }, { token: i0.NgZone }, { token: i2.FsDrawerPersistanceController }, { token: i3.DrawerStoreService }], target: i0.ɵɵFactoryTarget.Injectable });
DrawerSizeController.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DrawerSizeController });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DrawerSizeController, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.DrawerRef }, { type: i0.NgZone }, { type: i2.FsDrawerPersistanceController }, { type: i3.DrawerStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,