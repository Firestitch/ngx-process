import { ESCAPE } from '@angular/cdk/keycodes';
import { BehaviorSubject, Observable, Subject, zip } from 'rxjs';
import { filter, take, takeUntil, switchMap, map } from 'rxjs/operators';
import { DrawerConfig } from '../models/drawer-config.model';
export class DrawerRef {
    constructor(_overlayRef, _dataFactory, _config) {
        this._overlayRef = _overlayRef;
        this._dataFactory = _dataFactory;
        /** Subject for notifying the user that the drawer has finished opening. */
        this._afterOpened$ = new Subject();
        /** Subject for notifying the user that the drawer has finished closing. */
        this._afterClosed$ = new Subject();
        /** Subject for notifying the user that the drawer has started closing. */
        this._closeStart$ = new Subject();
        /** Subject for notifying the user that the drawer has started opening. */
        this._openStart$ = new Subject();
        /** Subject for notifying the user that the drawer has started closing. */
        this._sideToggle = new Subject();
        /** Subject for notifying the user that the drawer has finished opening. */
        this._actionsUpdated$ = new Subject();
        /** Destroy notifier **/
        this._destroy$ = new Subject();
        this._activeAction = new BehaviorSubject(void 0);
        this._menuRefs = new Map();
        this._isOpen = false;
        this._isSideOpen = false;
        this.drawerConfig = new DrawerConfig(_config);
        this._initActiveAction();
    }
    get overlayRef() {
        return this._overlayRef;
    }
    /**
     * Getter for DRAWER_DATA for current drawer
     */
    get drawerData() {
        return Object.assign({}, this._dataFactory.getValue()); // Like immutable.... TODO switch to Immer
    }
    get destroy$() {
        return this._destroy$.asObservable();
    }
    /**
     * Set reference to drawer container
     * @param value
     */
    set containerRef(value) {
        this._drawerContainerRef = value;
    }
    /**
     * Set reference to drawer component
     * @param value
     */
    set componentRef(value) {
        this._drawerComponentRef = value;
    }
    set drawerContainer(value) {
        this._drawerContainer = value;
    }
    set drawerActionsContainer(value) {
        this._drawerActionsContainer = value;
    }
    get drawerContainer() {
        return this._drawerContainer;
    }
    get drawerActionsContainer() {
        return this._drawerActionsContainer;
    }
    get activeAction() {
        return this._activeAction.getValue();
    }
    get activeAction$() {
        return this._activeAction.pipe(takeUntil(this._destroy$));
    }
    /**
     * Return actual status of the drawer
     */
    get isOpen() {
        return this._isOpen;
    }
    /**
     * Return actual status of the side of the drawer
     */
    get isSideOpen() {
        return this._isSideOpen;
    }
    set resizeController(value) {
        this._resizeController = value;
    }
    get resizeController() {
        return this._resizeController;
    }
    /**
     * Gets an observable that action was updated and change detection should be started
     */
    get actionUpdated$() {
        return this._actionsUpdated$.pipe(takeUntil(this._destroy$));
    }
    /**
     * Gets an observable that is notified when the dialog is finished closing.
     */
    get afterClosed$() {
        return this._afterClosed$.pipe(takeUntil(this._destroy$));
    }
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     */
    get afterOpened$() {
        return this._afterOpened$.pipe(takeUntil(this._destroy$));
    }
    /**
     * Gets an observable that is notified when the dialog open starts.
     */
    get openStart$() {
        return this._openStart$.pipe(takeUntil(this._destroy$));
    }
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     */
    get closeStart$() {
        return this._closeStart$.pipe(takeUntil(this._destroy$));
    }
    closeWhen() {
        return (source) => {
            this._closeStart$
                .pipe(switchMap((observer) => {
                return source.pipe(map(() => {
                    return observer;
                }));
            }))
                .subscribe((observer) => {
                observer.next();
                observer.complete();
            });
            //   switchMap(() => {
            //     debugger;
            //     return source;
            //   })
            // )
            // .subscribe((observer) => {
            // source.pipe(
            //   tap(() => {
            //     debugger;
            //     observer.next();
            //     observer.complete();
            //   }),
            // );
            return source;
            // return new Observable(subscriber => {
            //   source.subscribe({
            //     next(value) {
            //       if (value !== undefined && value !== null) {
            //         subscriber.next(value);
            //       }
            //     },
            //     error(error) {
            //       subscriber.error(error);
            //     },
            //     complete() {
            //       subscriber.complete();
            //     }
            //   })
            // });
        };
    }
    /**
     * Gets an observable that is notified when data in DRAWER_DATA was changed
     */
    get dataChanged$() {
        return this._dataFactory.dataChange$;
    }
    /**
     * Gets an observable that is notify that side status toggled
     */
    get sideToggle$() {
        return this._sideToggle.pipe(takeUntil(this._destroy$));
    }
    /**
     * Subscribe on keydown events to react on escape
     */
    events() {
        this._overlayRef.keydownEvents()
            .pipe(filter(event => event.keyCode === ESCAPE && !this.drawerConfig.disableClose), takeUntil(this._destroy$))
            .subscribe(() => this.close());
    }
    /**
     * Set value for DRAWER_DATA
     * @param data
     */
    dataChange(data) {
        this._dataFactory.setValue(data);
    }
    /**
     * Open drawer and notify observable
     */
    open() {
        new Observable((obs) => {
            setTimeout(() => {
                if (this._openStart$.observers.length) {
                    this._openStart$.next(obs);
                }
                else {
                    obs.next();
                    obs.complete();
                }
            });
        }).pipe(takeUntil(this._destroy$))
            .subscribe({
            next: () => {
                if (this.activeAction) {
                    this.openSide();
                }
                this._drawerContainerRef.open();
                this._afterOpened$.next();
                this._afterOpened$.complete();
            },
            error: () => {
                this.destroy();
            },
        });
    }
    /**
     * Close the drawer.
     * @param result Optional result to return to the dialog opener.
     */
    close(result) {
        new Observable(observer => {
            if (this._closeStart$.observers.length) {
                zip(...this._closeStart$.observers.map(item => {
                    return Observable.create(closeObserver => {
                        item.next(closeObserver);
                    });
                }))
                    .pipe(takeUntil(this._destroy$))
                    .subscribe(() => {
                    observer.next();
                    observer.complete();
                }, () => {
                    observer.error();
                });
            }
            else {
                observer.next();
                observer.complete();
            }
        }).pipe(takeUntil(this._destroy$))
            .subscribe({
            next: () => {
                this._drawerContainerRef.close();
                this._result = result;
                this._afterClosed$.next(result);
                this.destroy();
            }
        });
    }
    /**
     * Open the side of the drawer
     */
    openSide() {
        this._isSideOpen = true;
        this._sideToggle.next(this._isSideOpen);
    }
    /**
     * Close the side of the drawer
     */
    closeSide() {
        this._isSideOpen = false;
        this._sideToggle.next(this._isSideOpen);
        this.activateAction(null);
    }
    /**
     * Toggle the side of the drawer
     */
    toggleSide() {
        this.isSideOpen ? this.closeSide() : this.openSide();
    }
    /**
     * Change active action
     * @param name
     */
    activateAction(name) {
        this._activeAction.next(name);
        if (name) {
            this.openSide();
        }
    }
    enableAction(name) {
        const action = this.getAction(name);
        if (action) {
            action.disabled = false;
            this._actionsUpdated$.next(name);
        }
    }
    disableAction(name) {
        const action = this.getAction(name);
        if (action) {
            action.disabled = true;
            this._actionsUpdated$.next(name);
        }
    }
    /**
     * Store opened menu reference and subscribe for auto remove
     * @param name
     * @param ref
     */
    addMenuRef(name, ref) {
        this._menuRefs.set(name, ref);
        ref.afterClosed()
            .pipe(take(1), takeUntil(this._destroy$))
            .subscribe(() => {
            this._menuRefs.delete(name);
        });
    }
    /**
     * Get opened menu reference by name
     * @param name
     */
    getMenuRef(name) {
        return this._menuRefs.get(name);
    }
    getAction(name) {
        return this.drawerConfig.actions.find((action) => action.name === name);
    }
    /**
     * Do update for icon for target action
     * @param name
     * @param icon
     */
    updateActionIcon(name, icon) {
        const action = this.getAction(name);
        if (action) {
            action.icon = icon;
            this._actionsUpdated$.next(name);
        }
    }
    /**
     * Do update
     * @param name
     * @param data
     */
    updateAction(name, data) {
        const action = this.getAction(name);
        if (action) {
            const allowedFields = ['icon', 'type', 'toggle', 'tooltip', 'close', 'closeSide', 'component', 'data'];
            const forUpdate = Object.keys(data).filter((key) => allowedFields.indexOf(key) > -1);
            forUpdate.forEach((key) => {
                action[key] = data[key];
            });
            this._actionsUpdated$.next(name);
        }
    }
    updateDrawerWidth(width) {
        this.resizeController.updateMainWidth(width);
    }
    updateSideDrawerWidth(width) {
        this.resizeController.updateSideWidth(width);
    }
    destroy() {
        this._overlayRef.detachBackdrop();
        this._overlayRef.detach();
        this._drawerComponentRef.destroy();
        this._dataFactory.destroy();
        this._destroy$.next();
        this._destroy$.complete();
    }
    _initActiveAction() {
        if (this.drawerConfig.activeAction) {
            const action = this.drawerConfig.actions
                .find((a) => a.name === this.drawerConfig.activeAction);
            if (action) {
                this._activeAction.next(this.drawerConfig.activeAction);
            }
            else {
                console.warn(`Drawer active action - "${this.drawerConfig.activeAction}" does not exists
        `);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,