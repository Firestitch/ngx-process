import { Observable, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class DrawerData {
    constructor(data = {}) {
        this._dataChange = new Subject();
        this._destroy = new Subject();
        this._data = data;
    }
    static createWithProxy(data = {}) {
        const drawerData = new DrawerData(data);
        return new Proxy(drawerData, {
            get(target, property) {
                if (typeof target[property] === 'function'
                    || property === '_data'
                    || target[property] instanceof Observable) {
                    return target[property];
                }
                else {
                    return target._data[property];
                }
            },
            set(target, property, value) {
                if (property !== '_data') {
                    target._data[property] = value;
                }
                else {
                    target[property] = value;
                }
                return true;
            },
            has(target, property) {
                return property in target._data;
            },
            ownKeys(target) {
                return Object.keys(target._data);
            },
            getOwnPropertyDescriptor(target, property) {
                return Object.getOwnPropertyDescriptor(target._data, property);
            }
        });
    }
    get dataChange$() {
        return this._dataChange.pipe(takeUntil(this._destroy));
    }
    getValue() {
        return this._data;
    }
    setValue(value) {
        this._data = value;
        this._dataChange.next(this._data);
    }
    destroy() {
        this._destroy.next();
        this._destroy.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBwL2NsYXNzZXMvZHJhd2VyLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNDLE1BQU0sT0FBTyxVQUFVO0lBTXJCLFlBQVksT0FBWSxFQUFFO1FBSGxCLGdCQUFXLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUNqQyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUdyQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFZLEVBQUU7UUFDMUMsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFeEMsT0FBTyxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDM0IsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRO2dCQUNsQixJQUFJLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFVBQVU7dUJBQ3JDLFFBQVEsS0FBSyxPQUFPO3VCQUNwQixNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksVUFBVSxFQUN6QztvQkFDQSxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDekI7cUJBQU07b0JBQ0wsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUMvQjtZQUNILENBQUM7WUFFRCxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLO2dCQUN6QixJQUFJLFFBQVEsS0FBSyxPQUFPLEVBQUU7b0JBQ3hCLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO2lCQUNoQztxQkFBTTtvQkFDTCxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO2lCQUMxQjtnQkFFRCxPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7WUFFRCxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVE7Z0JBQ2xCLE9BQU8sUUFBUSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDbEMsQ0FBQztZQUVELE9BQU8sQ0FBQyxNQUFNO2dCQUNaLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbkMsQ0FBQztZQUVELHdCQUF3QixDQUFDLE1BQU0sRUFBRSxRQUFRO2dCQUN2QyxPQUFPLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2pFLENBQUM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxLQUFLO1FBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU0sT0FBTztRQUNaLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMzQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cblxuZXhwb3J0IGNsYXNzIERyYXdlckRhdGEge1xuXG4gIHByaXZhdGUgX2RhdGE7XG4gIHByaXZhdGUgX2RhdGFDaGFuZ2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIHByaXZhdGUgX2Rlc3Ryb3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IHt9KSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZVdpdGhQcm94eShkYXRhOiBhbnkgPSB7fSkge1xuICAgIGNvbnN0IGRyYXdlckRhdGEgPSBuZXcgRHJhd2VyRGF0YShkYXRhKTtcblxuICAgIHJldHVybiBuZXcgUHJveHkoZHJhd2VyRGF0YSwge1xuICAgICAgZ2V0KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRbcHJvcGVydHldID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgfHwgcHJvcGVydHkgPT09ICdfZGF0YSdcbiAgICAgICAgICB8fCB0YXJnZXRbcHJvcGVydHldIGluc3RhbmNlb2YgT2JzZXJ2YWJsZVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0Ll9kYXRhW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gJ19kYXRhJykge1xuICAgICAgICAgIHRhcmdldC5fZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG5cbiAgICAgIGhhcyh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0YXJnZXQuX2RhdGE7XG4gICAgICB9LFxuXG4gICAgICBvd25LZXlzKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGFyZ2V0Ll9kYXRhKTtcbiAgICAgIH0sXG5cbiAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5fZGF0YSwgcHJvcGVydHkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IGRhdGFDaGFuZ2UkKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9kYXRhQ2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuX2RhdGEgPSB2YWx1ZTtcbiAgICB0aGlzLl9kYXRhQ2hhbmdlLm5leHQodGhpcy5fZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9kZXN0cm95Lm5leHQoKTtcbiAgICB0aGlzLl9kZXN0cm95LmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==