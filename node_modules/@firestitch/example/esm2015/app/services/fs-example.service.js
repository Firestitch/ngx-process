import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of, forkJoin } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class FsExampleService {
    constructor(http) {
        this.http = http;
    }
    getFileContents(path, name) {
        const fileCodeRequests = this._paths(path, name).reduce((acc, file) => {
            const request = this.http.get(file.path, { responseType: 'text' }).pipe(map(code => ({ type: file.type, name: file.name, code })), catchError((error) => of(null)));
            acc.push(request);
            return acc;
        }, []);
        return forkJoin(...fileCodeRequests).pipe(map((files) => files.filter((file) => !!file)));
    }
    _paths(path, name) {
        const componentPath = path || name;
        return [
            {
                type: 'ts',
                name: `${name}.component.ts`,
                path: `${FsExampleService.EXAMPLE_PATH_PREFIX}/${componentPath}/${name}.component.ts`,
            },
            {
                type: 'html',
                name: `${name}.component.html`,
                path: `${FsExampleService.EXAMPLE_PATH_PREFIX}/${componentPath}/${name}.component.html`,
            },
            {
                type: 'scss',
                name: `${name}.component.scss`,
                path: `${FsExampleService.EXAMPLE_PATH_PREFIX}/${componentPath}/${name}.component.scss`,
            },
        ];
    }
}
FsExampleService.EXAMPLE_PATH_PREFIX = 'assets/components';
FsExampleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsExampleService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
FsExampleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsExampleService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsExampleService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMtZXhhbXBsZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwcC9zZXJ2aWNlcy9mcy1leGFtcGxlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsT0FBTyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSS9DLE1BQU0sT0FBTyxnQkFBZ0I7SUFJM0IsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7SUFFekMsZUFBZSxDQUFDLElBQVksRUFBRSxJQUFZO1FBQ3hDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQVMsRUFBRSxFQUFFO1lBQ3pFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3JFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQ3pELFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ2hDLENBQUM7WUFFRixHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWxCLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRVAsT0FBTyxRQUFRLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FDdkMsR0FBRyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDcEQsQ0FBQztJQUNKLENBQUM7SUFFTyxNQUFNLENBQUMsSUFBWSxFQUFFLElBQVk7UUFDdkMsTUFBTSxhQUFhLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQztRQUNuQyxPQUFPO1lBQ0w7Z0JBQ0UsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsSUFBSSxFQUFFLEdBQUcsSUFBSSxlQUFlO2dCQUM1QixJQUFJLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxtQkFBbUIsSUFBSSxhQUFhLElBQUksSUFBSSxlQUFlO2FBQ3RGO1lBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLE1BQU07Z0JBQ1osSUFBSSxFQUFFLEdBQUcsSUFBSSxpQkFBaUI7Z0JBQzlCLElBQUksRUFBRSxHQUFHLGdCQUFnQixDQUFDLG1CQUFtQixJQUFJLGFBQWEsSUFBSSxJQUFJLGlCQUFpQjthQUN4RjtZQUNEO2dCQUNFLElBQUksRUFBRSxNQUFNO2dCQUNaLElBQUksRUFBRSxHQUFHLElBQUksaUJBQWlCO2dCQUM5QixJQUFJLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxtQkFBbUIsSUFBSSxhQUFhLElBQUksSUFBSSxpQkFBaUI7YUFDeEY7U0FDRixDQUFBO0lBQ0gsQ0FBQzs7QUF4Q3NCLG9DQUFtQixHQUFHLG1CQUFtQixDQUFDOzhHQUZ0RCxnQkFBZ0I7a0hBQWhCLGdCQUFnQjs0RkFBaEIsZ0JBQWdCO2tCQUQ1QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgb2YsIGZvcmtKb2luLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2NhdGNoRXJyb3IsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGc0V4YW1wbGVTZXJ2aWNlIHtcblxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IEVYQU1QTEVfUEFUSF9QUkVGSVggPSAnYXNzZXRzL2NvbXBvbmVudHMnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgZ2V0RmlsZUNvbnRlbnRzKHBhdGg6IHN0cmluZywgbmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTx7fVtdPiB7XG4gICAgY29uc3QgZmlsZUNvZGVSZXF1ZXN0cyA9IHRoaXMuX3BhdGhzKHBhdGgsIG5hbWUpLnJlZHVjZSgoYWNjLCBmaWxlOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmh0dHAuZ2V0KGZpbGUucGF0aCwgeyByZXNwb25zZVR5cGU6ICd0ZXh0JyB9KS5waXBlKFxuICAgICAgICBtYXAoY29kZSA9PiAoeyB0eXBlOiBmaWxlLnR5cGUsIG5hbWU6IGZpbGUubmFtZSwgY29kZSB9KSksXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PiBvZihudWxsKSksXG4gICAgICApO1xuXG4gICAgICBhY2MucHVzaChyZXF1ZXN0KTtcblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gZm9ya0pvaW4oLi4uZmlsZUNvZGVSZXF1ZXN0cykucGlwZShcbiAgICAgIG1hcCgoZmlsZXM6IGFueSkgPT4gZmlsZXMuZmlsdGVyKChmaWxlKSA9PiAhIWZpbGUpKSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBfcGF0aHMocGF0aDogc3RyaW5nLCBuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb21wb25lbnRQYXRoID0gcGF0aCB8fCBuYW1lO1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICd0cycsXG4gICAgICAgIG5hbWU6IGAke25hbWV9LmNvbXBvbmVudC50c2AsXG4gICAgICAgIHBhdGg6IGAke0ZzRXhhbXBsZVNlcnZpY2UuRVhBTVBMRV9QQVRIX1BSRUZJWH0vJHtjb21wb25lbnRQYXRofS8ke25hbWV9LmNvbXBvbmVudC50c2AsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnaHRtbCcsXG4gICAgICAgIG5hbWU6IGAke25hbWV9LmNvbXBvbmVudC5odG1sYCxcbiAgICAgICAgcGF0aDogYCR7RnNFeGFtcGxlU2VydmljZS5FWEFNUExFX1BBVEhfUFJFRklYfS8ke2NvbXBvbmVudFBhdGh9LyR7bmFtZX0uY29tcG9uZW50Lmh0bWxgLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ3Njc3MnLFxuICAgICAgICBuYW1lOiBgJHtuYW1lfS5jb21wb25lbnQuc2Nzc2AsXG4gICAgICAgIHBhdGg6IGAke0ZzRXhhbXBsZVNlcnZpY2UuRVhBTVBMRV9QQVRIX1BSRUZJWH0vJHtjb21wb25lbnRQYXRofS8ke25hbWV9LmNvbXBvbmVudC5zY3NzYCxcbiAgICAgIH0sXG4gICAgXVxuICB9XG59XG4iXX0=