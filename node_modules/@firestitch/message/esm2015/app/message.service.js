import { Injectable, Inject } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { takeUntil } from 'rxjs/operators';
import { Subject, of } from 'rxjs';
import { ToastrService, TOAST_CONFIG } from 'ngx-toastr';
import { FsMessageDialogComponent } from './components/message-dialog/message-dialog.component';
import { MessageType, MessageMode } from './enums';
import { FS_MESSAGE_CONFIG } from './injectors/message-config';
import * as i0 from "@angular/core";
import * as i1 from "ngx-toastr";
import * as i2 from "@angular/material/dialog";
export class FsMessage {
    constructor(toastr, matDialog, _toastToken, _config) {
        this.toastr = toastr;
        this.matDialog = matDialog;
        this._toastToken = _toastToken;
        this._config = _config;
        this.bannerMessages$ = new Subject();
        this._dialogs = 0;
        this._dialogsMessagesQueue = [];
        this._destroy$ = new Subject();
    }
    success(message, options = {}) {
        return this.show(MessageType.Success, message, Object.assign({ title: 'Success', mode: this._config.successMode }, options));
    }
    info(message, options = {}) {
        return this.show(MessageType.Info, message, Object.assign({ title: 'Information', mode: this._config.infoMode }, options));
    }
    error(message, options = {}) {
        return this.show(MessageType.Error, message, Object.assign({ title: 'Attention', mode: this._config.errorMode }, options));
    }
    warning(message, options = {}) {
        return this.show(MessageType.Warning, message, Object.assign({ title: 'Warning', mode: this._config.warningMode }, options));
    }
    show(type, message, options) {
        options = options || {};
        if (options.icon === undefined) {
            options.icon = this.getIconName(type);
        }
        switch (options.mode) {
            case MessageMode.Toast:
                this.toast(type, message, options);
                break;
            case MessageMode.Banner:
                this.banner(type, message, options);
                break;
            case MessageMode.Dialog:
                return this.dialog(type, message, options);
        }
        return of();
    }
    hide() {
        this.toastr.clear();
        this.bannerMessages$.next();
        this.matDialog.closeAll();
    }
    toast(type, message, options) {
        const opts = options;
        opts.enableHtml = true;
        opts.positionClass = options.positionClass || this._toastToken.config.positionClass || 'toast-bottom-left';
        opts.timeOut = (options.timeout || this._config.toastTimeout) * 1000;
        const icon = opts.icon ? `<div class="mat-icon material-icons">${opts.icon}</div>` : '';
        const template = `<div class="mat-toast-content">${icon}<div class="message">${message}</div></div>`;
        this.toastr[type](template, '', opts);
    }
    banner(type, message, options) {
        this.bannerMessages$.next({
            type: type,
            msg: message,
            timeout: (options.timeout || this._config.bannerTimeout || 5) * 1000
        });
    }
    dialog(type, message, options) {
        const typeMessage = type + message;
        if (this._dialogsMessagesQueue.indexOf(typeMessage) > -1) {
            return of(true);
        }
        this._dialogsMessagesQueue.push(typeMessage);
        this._dialogs++;
        const dialogRef = this.matDialog.open(FsMessageDialogComponent, {
            /* Waiting for MatDialog to support array of classes like panelClass
            backdropClass: ['fs-message-backdrop',
                            'fs-message-backdrop-' + type,
                            options.backdropClass], */
            backdropClass: options.backdropClass,
            width: options.width || this._config.dialogWidth,
            data: { type: type, message: message, options: options, icon: this.getIconName(type) },
            panelClass: [
                'fs-message-pane',
                'fs-message-pane-' + type,
                options.panelClass,
            ],
        });
        dialogRef.afterClosed()
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            this._dialogs--;
            const dialogMessageIdx = this._dialogsMessagesQueue.indexOf(typeMessage);
            if (dialogMessageIdx > -1) {
                this._dialogsMessagesQueue.splice(dialogMessageIdx, 1);
            }
        });
        return dialogRef.afterClosed();
    }
    getIconName(type) {
        switch (type) {
            case MessageType.Success:
                return 'done';
            case MessageType.Error:
                return 'report_problem';
            case MessageType.Info:
                return 'info';
            case MessageType.Warning:
                return 'report_problem';
        }
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
}
FsMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsMessage, deps: [{ token: i1.ToastrService }, { token: i2.MatDialog }, { token: TOAST_CONFIG }, { token: FS_MESSAGE_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
FsMessage.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsMessage });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsMessage, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ToastrService }, { type: i2.MatDialog }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOAST_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [FS_MESSAGE_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,