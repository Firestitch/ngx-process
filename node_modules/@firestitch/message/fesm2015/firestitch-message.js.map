{"version":3,"file":"firestitch-message.js","sources":["../../src/app/components/message-dialog/message-dialog.component.ts","../../src/app/components/message-dialog/message-dialog.component.html","../../src/app/enums.ts","../../src/app/injectors/message-config.ts","../../src/app/message.service.ts","../../src/app/components/message/message.component.ts","../../src/app/components/message/message.component.html","../../src/app/components/messages/messages.component.ts","../../src/app/fs-message.module.ts","../../src/public_api.ts","../../src/firestitch-message.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, Inject, OnDestroy } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { isObservable, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'fs-message-dialog',\n  templateUrl: './message-dialog.component.html',\n  styleUrls: ['./message-dialog.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FsMessageDialogComponent implements OnDestroy {\n\n  private _destroy$ = new Subject();\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private dialogRef: MatDialogRef<FsMessageDialogComponent>,\n  ) {}\n\n  public hide() {\n    this.dialogRef.close();\n  }\n\n  public buttonClick(button) {\n    if (button.click) {\n      const result = button.click();\n      const observable$ = isObservable(result) ? result : of(true);\n\n      observable$\n        .pipe(\n          takeUntil(this._destroy$),\n        )\n        .subscribe(() => {\n          this.hide();\n        });\n\n    } else {\n      this.hide();\n    }\n  }\n\n  public ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n}\n","<div class=\"fs-message-{{ data.type }}\">\n  <div mat-dialog-title fxLayout=\"row\" fxLayoutAlign=\"start center\">\n    <mat-icon>{{ data.icon }}</mat-icon>\n    <span>{{ data.options.title }}</span>\n  </div>\n  <mat-dialog-content [innerHTML]=\"data.message\"></mat-dialog-content>\n  <mat-dialog-actions>\n    <button mat-button (click)=\"hide()\" *ngIf=\"!data.options.buttons\" color=\"primary\">OK</button>\n    <button mat-button *ngFor=\"let button of data.options.buttons || []\" (click)=\"buttonClick(button)\" [color]=\"button.color\">{{button.label}}</button>\n  </mat-dialog-actions>\n</div>\n","import { MessageBannerConfig, MessageDialogConfig, MessageToastConfig } from './interfaces';\n\nexport enum MessageType {\n  Success = 'success',\n  Info = 'info',\n  Error = 'error',\n  Warning = 'warning'\n}\n\nexport enum MessageMode {\n  Dialog = 'dialog',\n  Toast = 'toast',\n  Banner = 'banner'\n}\n\nexport type MessageConfig = MessageDialogConfig | MessageToastConfig | MessageBannerConfig;\n","import { InjectionToken } from '@angular/core';\n\nexport const FS_MESSAGE_CONFIG = new InjectionToken<any[]>('fs-message.config');\nexport const FS_MESSAGE_DEFAULT_CONFIG = new InjectionToken<any[]>('fs-message.default-config');\n","import { Injectable, OnDestroy, Inject } from '@angular/core';\n\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { takeUntil } from 'rxjs/operators';\nimport { Observable, Subject, of } from 'rxjs';\n\nimport { ToastrService, TOAST_CONFIG, ToastToken } from 'ngx-toastr';\n\nimport { FsMessageDialogComponent } from './components/message-dialog/message-dialog.component';\nimport { MessageType, MessageMode, MessageConfig } from './enums';\nimport { FS_MESSAGE_CONFIG } from './injectors/message-config';\nimport { FsMessageConfig } from './interfaces';\nimport { MessageDialogConfig } from './interfaces/message-dialog-config';\nimport { MessageToastConfig } from './interfaces/message-toast-config';\nimport { MessageBannerConfig } from './interfaces/message-banner-config';\n\n\n@Injectable()\nexport class FsMessage implements OnDestroy {\n\n  public bannerMessages$ = new Subject();\n\n  private _dialogs = 0;\n  private _dialogsMessagesQueue = [];\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private toastr: ToastrService,\n    private matDialog: MatDialog,\n    @Inject(TOAST_CONFIG) private _toastToken: ToastToken,\n    @Inject(FS_MESSAGE_CONFIG) private _config: FsMessageConfig,\n  ) { }\n\n  public success(message: string, options: MessageConfig = {}): Observable<any> {\n    return this.show(MessageType.Success, message, { title: 'Success', mode: this._config.successMode, ...options });\n  }\n\n  public info(message: string, options: MessageConfig = {}): Observable<any> {\n    return this.show(MessageType.Info, message, { title: 'Information', mode: this._config.infoMode, ...options });\n  }\n\n  public error(message: string, options: MessageConfig = {}): Observable<any> {\n    return this.show(MessageType.Error, message, { title: 'Attention', mode: this._config.errorMode, ...options });\n  }\n\n  public warning(message: string, options: MessageConfig = {}): Observable<any> {\n    return this.show(MessageType.Warning, message, { title: 'Warning', mode: this._config.warningMode, ...options });\n  }\n\n  public show(type: string, message: string, options: MessageConfig): Observable<any> {\n    options = options || {};\n    if (options.icon === undefined) {\n      options.icon = this.getIconName(type);\n    }\n\n    switch (options.mode) {\n      case MessageMode.Toast:\n        this.toast(type, message, options);\n        break;\n      case MessageMode.Banner:\n        this.banner(type, message, options);\n        break;\n      case MessageMode.Dialog:\n        return this.dialog(type, message, options);\n    }\n\n    return of();\n  }\n\n  public hide(): void {\n    this.toastr.clear();\n    this.bannerMessages$.next();\n    this.matDialog.closeAll();\n  }\n\n  public toast(type: string, message: string, options: MessageToastConfig): void {\n    const opts: any = options;\n    opts.enableHtml = true;\n    opts.positionClass = options.positionClass || this._toastToken.config.positionClass || 'toast-bottom-left';\n    opts.timeOut = (options.timeout || this._config.toastTimeout) * 1000;\n\n    const icon = opts.icon ? `<div class=\"mat-icon material-icons\">${ opts.icon }</div>` : '';\n    const template = `<div class=\"mat-toast-content\">${icon}<div class=\"message\">${message}</div></div>`;\n\n    this.toastr[type](template, '', opts);\n  }\n\n  public banner(type: string, message: string, options: MessageBannerConfig): void {\n    this.bannerMessages$.next({\n      type: type,\n      msg: message,\n      timeout: (options.timeout || this._config.bannerTimeout || 5) * 1000\n    });\n  }\n\n  public dialog(type: string, message: string, options: MessageDialogConfig): Observable<any> {\n    const typeMessage = type + message;\n\n    if (this._dialogsMessagesQueue.indexOf(typeMessage) > -1) {\n      return of(true);\n    }\n\n    this._dialogsMessagesQueue.push(typeMessage);\n    this._dialogs++;\n\n    const dialogRef = this.matDialog.open(FsMessageDialogComponent, {\n      /* Waiting for MatDialog to support array of classes like panelClass\n      backdropClass: ['fs-message-backdrop',\n                      'fs-message-backdrop-' + type,\n                      options.backdropClass], */\n      backdropClass: options.backdropClass,\n      width: options.width || this._config.dialogWidth,\n      data: { type: type, message: message, options: options, icon: this.getIconName(type) },\n      panelClass: [\n        'fs-message-pane',\n        'fs-message-pane-' + type,\n        options.panelClass,\n      ],\n    });\n\n    dialogRef.afterClosed()\n      .pipe(\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => {\n        this._dialogs--;\n\n        const dialogMessageIdx = this._dialogsMessagesQueue.indexOf(typeMessage);\n        if (dialogMessageIdx > -1) {\n          this._dialogsMessagesQueue.splice(dialogMessageIdx, 1);\n        }\n      });\n\n    return dialogRef.afterClosed();\n  }\n\n  public getIconName(type: string): string {\n    switch (type) {\n      case MessageType.Success:\n        return 'done';\n      case MessageType.Error:\n        return 'report_problem';\n      case MessageType.Info:\n        return 'info';\n      case MessageType.Warning:\n        return 'report_problem';\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n}\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { MessageType } from '../../enums';\nimport { FsMessage } from '../../message.service';\n\n@Component({\n  selector: 'fs-message',\n  templateUrl: './message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FsMessageComponent implements OnInit {\n\n  @Input() public type = MessageType.Info;\n  @Input() public message: string;\n\n  @Input('fsType')\n  set fsType(value) {\n    this.type = value;\n  }\n\n  @Input('fsMessage')\n  set fsMessage(value) {\n    this.message = value;\n  }\n\n  public icon = 'info';\n\n  constructor(private _fsMessage: FsMessage) { }\n\n  public ngOnInit() {\n    this.icon = this._fsMessage.getIconName(this.type);\n  }\n}\n","<div class=\"fs-message-banner fs-message-{{ type }}\">\n  <mat-icon *ngIf=\"icon\" class=\"mat-icon material-icons\" role=\"img\">{{ icon }}</mat-icon>\n  <div class=\"message\">\n    {{ message }}\n    <ng-content></ng-content>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnDestroy,\n  OnInit\n} from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { remove } from 'lodash-es';\n\nimport { FsMessage } from '../../message.service';\n\n\n@Component({\n  selector: 'fs-messages',\n  template: `<fs-message *ngFor=\"let item of messages\" [fsType]=\"item.type\" [fsMessage]=\"item.msg\"></fs-message>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FsMessagesComponent implements OnInit, OnDestroy {\n\n  public messages = [];\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private _fsMessage: FsMessage,\n    private _cdRef: ChangeDetectorRef,\n  ) {}\n\n  public ngOnInit () {\n    this._fsMessage\n      .bannerMessages$\n      .pipe(\n        takeUntil(this._destroy$),\n      )\n      .subscribe((message: any) => {\n        if (!message) {\n          this.messages = [];\n        } else {\n          this.messages.push(message);\n\n          if (message.timeout) {\n            setTimeout(() => {\n              remove(this.messages, (item) => {\n                return item === message;\n              });\n\n              this._cdRef.markForCheck();\n            }, message.timeout);\n          }\n        }\n\n        this._cdRef.markForCheck();\n      });\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n}\n","import { NgModule, ModuleWithProviders, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { merge } from 'lodash-es';\n\nimport { FsMessageDialogComponent } from './components/message-dialog/message-dialog.component';\nimport { FsMessagesComponent } from './components/messages/messages.component';\nimport { FsMessageComponent } from './components/message/message.component';\nimport { FsMessage } from './message.service';\nimport { FsMessageConfig } from './interfaces/fs-message-config';\nimport { FS_MESSAGE_CONFIG, FS_MESSAGE_DEFAULT_CONFIG } from './injectors/message-config';\nimport { MessageMode } from './enums';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    MatIconModule,\n    MatButtonModule\n  ],\n  exports: [\n    FsMessagesComponent,\n    FsMessageComponent\n  ],\n  entryComponents: [\n    FsMessageDialogComponent\n  ],\n  declarations: [\n    FsMessagesComponent,\n    FsMessageComponent,\n    FsMessageDialogComponent\n  ],\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA ]\n})\nexport class FsMessageModule {\n\n  static forRoot(config: FsMessageConfig = {}): ModuleWithProviders<FsMessageModule> {\n    return {\n      ngModule: FsMessageModule,\n      providers: [\n        FsMessage,\n        { provide: FS_MESSAGE_DEFAULT_CONFIG, useValue: config },\n        {\n          provide: FS_MESSAGE_CONFIG,\n          useFactory: FsMessageConfigFactory,\n          deps: [FS_MESSAGE_DEFAULT_CONFIG]\n        },\n      ]\n    };\n  }\n}\n\n\nexport function FsMessageConfigFactory(config: FsMessageConfig) {\n  return merge({\n    toastTimeout: 5,\n    bannerTimeout: 5,\n    dialogWidth: '500px',\n    successMode: MessageMode.Toast,\n    errorMode: MessageMode.Dialog,\n    warningMode: MessageMode.Toast,\n    infoMode: MessageMode.Toast\n  }, config);\n}","/*\n * Public API Surface of fs-menu\n */\n\n// Modules\nexport { FsMessageModule } from './app/fs-message.module';\n\n// Components\nexport { FsMessagesComponent } from './app/components/messages/messages.component';\nexport { FsMessageComponent } from './app/components/message/message.component';\n\n// Services\nexport { FsMessage } from './app/message.service';\nexport { MessageMode, MessageType, MessageConfig } from './app/enums';\n\nexport { FsMessageConfig } from './app/interfaces/fs-message-config';\nexport { MessageBannerConfig } from './app/interfaces/message-banner-config';\nexport { MessageDialogConfig } from './app/interfaces/message-dialog-config';\nexport { MessageToastConfig } from './app/interfaces/message-toast-config';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1","i2","i1.FsMessage","i3","i2.FsMessageComponent"],"mappings":"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"}