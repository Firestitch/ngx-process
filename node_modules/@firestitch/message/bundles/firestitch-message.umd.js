(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/material/button'), require('@angular/material/dialog'), require('@angular/material/icon'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('ngx-toastr')) :
    typeof define === 'function' && define.amd ? define('@firestitch/message', ['exports', '@angular/core', '@angular/common', '@angular/material/button', '@angular/material/dialog', '@angular/material/icon', 'lodash-es', 'rxjs', 'rxjs/operators', 'ngx-toastr'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firestitch = global.firestitch || {}, global.firestitch.message = {}), global.ng.core, global.ng.common, global.ng.material.button, global.ng.material.dialog, global.ng.material.icon, global.lodashEs, global.rxjs, global.rxjs.operators, global.i1$1));
})(this, (function (exports, i0, i4, i3, i1, i2, lodashEs, rxjs, operators, i1$1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);

    var FsMessageDialogComponent = /** @class */ (function () {
        function FsMessageDialogComponent(data, dialogRef) {
            this.data = data;
            this.dialogRef = dialogRef;
            this._destroy$ = new rxjs.Subject();
        }
        FsMessageDialogComponent.prototype.hide = function () {
            this.dialogRef.close();
        };
        FsMessageDialogComponent.prototype.buttonClick = function (button) {
            var _this = this;
            if (button.click) {
                var result = button.click();
                var observable$ = rxjs.isObservable(result) ? result : rxjs.of(true);
                observable$
                    .pipe(operators.takeUntil(this._destroy$))
                    .subscribe(function () {
                    _this.hide();
                });
            }
            else {
                this.hide();
            }
        };
        FsMessageDialogComponent.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        return FsMessageDialogComponent;
    }());
    FsMessageDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessageDialogComponent, deps: [{ token: i1.MAT_DIALOG_DATA }, { token: i1__namespace.MatDialogRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsMessageDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsMessageDialogComponent, selector: "fs-message-dialog", ngImport: i0__namespace, template: "<div class=\"fs-message-{{ data.type }}\">\n  <div mat-dialog-title fxLayout=\"row\" fxLayoutAlign=\"start center\">\n    <mat-icon>{{ data.icon }}</mat-icon>\n    <span>{{ data.options.title }}</span>\n  </div>\n  <mat-dialog-content [innerHTML]=\"data.message\"></mat-dialog-content>\n  <mat-dialog-actions>\n    <button mat-button (click)=\"hide()\" *ngIf=\"!data.options.buttons\" color=\"primary\">OK</button>\n    <button mat-button *ngFor=\"let button of data.options.buttons || []\" (click)=\"buttonClick(button)\" [color]=\"button.color\">{{button.label}}</button>\n  </mat-dialog-actions>\n</div>\n", styles: [":host .mat-dialog-title{display:flex;flex-direction:row;align-items:center}\n"], components: [{ type: i2__namespace.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i3__namespace.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }], directives: [{ type: i1__namespace.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { type: i1__namespace.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { type: i1__namespace.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]" }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessageDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-message-dialog',
                        templateUrl: './message-dialog.component.html',
                        styleUrls: ['./message-dialog.component.css'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.MAT_DIALOG_DATA]
                        }] }, { type: i1__namespace.MatDialogRef }];
        } });

    exports.MessageType = void 0;
    (function (MessageType) {
        MessageType["Success"] = "success";
        MessageType["Info"] = "info";
        MessageType["Error"] = "error";
        MessageType["Warning"] = "warning";
    })(exports.MessageType || (exports.MessageType = {}));
    exports.MessageMode = void 0;
    (function (MessageMode) {
        MessageMode["Dialog"] = "dialog";
        MessageMode["Toast"] = "toast";
        MessageMode["Banner"] = "banner";
    })(exports.MessageMode || (exports.MessageMode = {}));

    var FS_MESSAGE_CONFIG = new i0.InjectionToken('fs-message.config');
    var FS_MESSAGE_DEFAULT_CONFIG = new i0.InjectionToken('fs-message.default-config');

    var FsMessage = /** @class */ (function () {
        function FsMessage(toastr, matDialog, _toastToken, _config) {
            this.toastr = toastr;
            this.matDialog = matDialog;
            this._toastToken = _toastToken;
            this._config = _config;
            this.bannerMessages$ = new rxjs.Subject();
            this._dialogs = 0;
            this._dialogsMessagesQueue = [];
            this._destroy$ = new rxjs.Subject();
        }
        FsMessage.prototype.success = function (message, options) {
            if (options === void 0) { options = {}; }
            return this.show(exports.MessageType.Success, message, Object.assign({ title: 'Success', mode: this._config.successMode }, options));
        };
        FsMessage.prototype.info = function (message, options) {
            if (options === void 0) { options = {}; }
            return this.show(exports.MessageType.Info, message, Object.assign({ title: 'Information', mode: this._config.infoMode }, options));
        };
        FsMessage.prototype.error = function (message, options) {
            if (options === void 0) { options = {}; }
            return this.show(exports.MessageType.Error, message, Object.assign({ title: 'Attention', mode: this._config.errorMode }, options));
        };
        FsMessage.prototype.warning = function (message, options) {
            if (options === void 0) { options = {}; }
            return this.show(exports.MessageType.Warning, message, Object.assign({ title: 'Warning', mode: this._config.warningMode }, options));
        };
        FsMessage.prototype.show = function (type, message, options) {
            options = options || {};
            if (options.icon === undefined) {
                options.icon = this.getIconName(type);
            }
            switch (options.mode) {
                case exports.MessageMode.Toast:
                    this.toast(type, message, options);
                    break;
                case exports.MessageMode.Banner:
                    this.banner(type, message, options);
                    break;
                case exports.MessageMode.Dialog:
                    return this.dialog(type, message, options);
            }
            return rxjs.of();
        };
        FsMessage.prototype.hide = function () {
            this.toastr.clear();
            this.bannerMessages$.next();
            this.matDialog.closeAll();
        };
        FsMessage.prototype.toast = function (type, message, options) {
            var opts = options;
            opts.enableHtml = true;
            opts.positionClass = options.positionClass || this._toastToken.config.positionClass || 'toast-bottom-left';
            opts.timeOut = (options.timeout || this._config.toastTimeout) * 1000;
            var icon = opts.icon ? "<div class=\"mat-icon material-icons\">" + opts.icon + "</div>" : '';
            var template = "<div class=\"mat-toast-content\">" + icon + "<div class=\"message\">" + message + "</div></div>";
            this.toastr[type](template, '', opts);
        };
        FsMessage.prototype.banner = function (type, message, options) {
            this.bannerMessages$.next({
                type: type,
                msg: message,
                timeout: (options.timeout || this._config.bannerTimeout || 5) * 1000
            });
        };
        FsMessage.prototype.dialog = function (type, message, options) {
            var _this = this;
            var typeMessage = type + message;
            if (this._dialogsMessagesQueue.indexOf(typeMessage) > -1) {
                return rxjs.of(true);
            }
            this._dialogsMessagesQueue.push(typeMessage);
            this._dialogs++;
            var dialogRef = this.matDialog.open(FsMessageDialogComponent, {
                /* Waiting for MatDialog to support array of classes like panelClass
                backdropClass: ['fs-message-backdrop',
                                'fs-message-backdrop-' + type,
                                options.backdropClass], */
                backdropClass: options.backdropClass,
                width: options.width || this._config.dialogWidth,
                data: { type: type, message: message, options: options, icon: this.getIconName(type) },
                panelClass: [
                    'fs-message-pane',
                    'fs-message-pane-' + type,
                    options.panelClass,
                ],
            });
            dialogRef.afterClosed()
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function () {
                _this._dialogs--;
                var dialogMessageIdx = _this._dialogsMessagesQueue.indexOf(typeMessage);
                if (dialogMessageIdx > -1) {
                    _this._dialogsMessagesQueue.splice(dialogMessageIdx, 1);
                }
            });
            return dialogRef.afterClosed();
        };
        FsMessage.prototype.getIconName = function (type) {
            switch (type) {
                case exports.MessageType.Success:
                    return 'done';
                case exports.MessageType.Error:
                    return 'report_problem';
                case exports.MessageType.Info:
                    return 'info';
                case exports.MessageType.Warning:
                    return 'report_problem';
            }
        };
        FsMessage.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        return FsMessage;
    }());
    FsMessage.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessage, deps: [{ token: i1__namespace$1.ToastrService }, { token: i1__namespace.MatDialog }, { token: i1$1.TOAST_CONFIG }, { token: FS_MESSAGE_CONFIG }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FsMessage.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessage });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessage, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.ToastrService }, { type: i1__namespace.MatDialog }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1$1.TOAST_CONFIG]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [FS_MESSAGE_CONFIG]
                        }] }];
        } });

    var FsMessageComponent = /** @class */ (function () {
        function FsMessageComponent(_fsMessage) {
            this._fsMessage = _fsMessage;
            this.type = exports.MessageType.Info;
            this.icon = 'info';
        }
        Object.defineProperty(FsMessageComponent.prototype, "fsType", {
            set: function (value) {
                this.type = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsMessageComponent.prototype, "fsMessage", {
            set: function (value) {
                this.message = value;
            },
            enumerable: false,
            configurable: true
        });
        FsMessageComponent.prototype.ngOnInit = function () {
            this.icon = this._fsMessage.getIconName(this.type);
        };
        return FsMessageComponent;
    }());
    FsMessageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessageComponent, deps: [{ token: FsMessage }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsMessageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsMessageComponent, selector: "fs-message", inputs: { type: "type", message: "message", fsType: "fsType", fsMessage: "fsMessage" }, ngImport: i0__namespace, template: "<div class=\"fs-message-banner fs-message-{{ type }}\">\n  <mat-icon *ngIf=\"icon\" class=\"mat-icon material-icons\" role=\"img\">{{ icon }}</mat-icon>\n  <div class=\"message\">\n    {{ message }}\n    <ng-content></ng-content>\n  </div>\n</div>\n", components: [{ type: i2__namespace.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-message',
                        templateUrl: './message.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: FsMessage }]; }, propDecorators: { type: [{
                    type: i0.Input
                }], message: [{
                    type: i0.Input
                }], fsType: [{
                    type: i0.Input,
                    args: ['fsType']
                }], fsMessage: [{
                    type: i0.Input,
                    args: ['fsMessage']
                }] } });

    var FsMessagesComponent = /** @class */ (function () {
        function FsMessagesComponent(_fsMessage, _cdRef) {
            this._fsMessage = _fsMessage;
            this._cdRef = _cdRef;
            this.messages = [];
            this._destroy$ = new rxjs.Subject();
        }
        FsMessagesComponent.prototype.ngOnInit = function () {
            var _this = this;
            this._fsMessage
                .bannerMessages$
                .pipe(operators.takeUntil(this._destroy$))
                .subscribe(function (message) {
                if (!message) {
                    _this.messages = [];
                }
                else {
                    _this.messages.push(message);
                    if (message.timeout) {
                        setTimeout(function () {
                            lodashEs.remove(_this.messages, function (item) {
                                return item === message;
                            });
                            _this._cdRef.markForCheck();
                        }, message.timeout);
                    }
                }
                _this._cdRef.markForCheck();
            });
        };
        FsMessagesComponent.prototype.ngOnDestroy = function () {
            this._destroy$.next();
            this._destroy$.complete();
        };
        return FsMessagesComponent;
    }());
    FsMessagesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessagesComponent, deps: [{ token: FsMessage }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FsMessagesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsMessagesComponent, selector: "fs-messages", ngImport: i0__namespace, template: "<fs-message *ngFor=\"let item of messages\" [fsType]=\"item.type\" [fsMessage]=\"item.msg\"></fs-message>", isInline: true, components: [{ type: FsMessageComponent, selector: "fs-message", inputs: ["type", "message", "fsType", "fsMessage"] }], directives: [{ type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessagesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'fs-messages',
                        template: "<fs-message *ngFor=\"let item of messages\" [fsType]=\"item.type\" [fsMessage]=\"item.msg\"></fs-message>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: FsMessage }, { type: i0__namespace.ChangeDetectorRef }]; } });

    var FsMessageModule = /** @class */ (function () {
        function FsMessageModule() {
        }
        FsMessageModule.forRoot = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: FsMessageModule,
                providers: [
                    FsMessage,
                    { provide: FS_MESSAGE_DEFAULT_CONFIG, useValue: config },
                    {
                        provide: FS_MESSAGE_CONFIG,
                        useFactory: FsMessageConfigFactory,
                        deps: [FS_MESSAGE_DEFAULT_CONFIG]
                    },
                ]
            };
        };
        return FsMessageModule;
    }());
    FsMessageModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessageModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsMessageModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessageModule, declarations: [FsMessagesComponent,
            FsMessageComponent,
            FsMessageDialogComponent], imports: [i4.CommonModule,
            i1.MatDialogModule,
            i2.MatIconModule,
            i3.MatButtonModule], exports: [FsMessagesComponent,
            FsMessageComponent] });
    FsMessageModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessageModule, imports: [[
                i4.CommonModule,
                i1.MatDialogModule,
                i2.MatIconModule,
                i3.MatButtonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsMessageModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            i1.MatDialogModule,
                            i2.MatIconModule,
                            i3.MatButtonModule
                        ],
                        exports: [
                            FsMessagesComponent,
                            FsMessageComponent
                        ],
                        entryComponents: [
                            FsMessageDialogComponent
                        ],
                        declarations: [
                            FsMessagesComponent,
                            FsMessageComponent,
                            FsMessageDialogComponent
                        ],
                        schemas: [i0.CUSTOM_ELEMENTS_SCHEMA]
                    }]
            }] });
    function FsMessageConfigFactory(config) {
        return lodashEs.merge({
            toastTimeout: 5,
            bannerTimeout: 5,
            dialogWidth: '500px',
            successMode: exports.MessageMode.Toast,
            errorMode: exports.MessageMode.Dialog,
            warningMode: exports.MessageMode.Toast,
            infoMode: exports.MessageMode.Toast
        }, config);
    }

    /*
     * Public API Surface of fs-menu
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FsMessage = FsMessage;
    exports.FsMessageComponent = FsMessageComponent;
    exports.FsMessageModule = FsMessageModule;
    exports.FsMessagesComponent = FsMessagesComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=firestitch-message.umd.js.map
