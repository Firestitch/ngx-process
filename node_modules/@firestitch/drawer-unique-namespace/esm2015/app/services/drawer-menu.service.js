import { __decorate, __metadata } from "tslib";
import { ElementRef, Injectable, Injector } from '@angular/core';
import { ConnectedPosition, Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { FsDrawerMenuComponent } from '../components/drawer-menu/drawer-menu.component';
import { DrawerMenuRef } from '../classes/drawer-menu-ref';
import { DrawerData } from '../classes/drawer-data';
import { DRAWER_MENU_DATA } from '../services/drawer-menu-data';
let FsDrawerMenuService = class FsDrawerMenuService {
    constructor(_overlay, _injector, _breakpointObserver) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._breakpointObserver = _breakpointObserver;
    }
    create(component, container, config) {
        const overlayRef = this.createOverlay(container);
        const dataFactory = DrawerData.createWithProxy(config.data);
        const menuRef = new DrawerMenuRef(overlayRef, dataFactory);
        const containerRef = this.attachContainer(overlayRef, menuRef, dataFactory);
        const componentRef = this.attachComponent(component, containerRef, menuRef, dataFactory);
        menuRef.containerRef = containerRef;
        containerRef.setDrawerMenuRef(menuRef);
        menuRef.componentRef = componentRef;
        return menuRef;
    }
    createOverlay(container) {
        const overlayConfig = this.getOverlayConfig(container);
        return this._overlay.create(overlayConfig);
    }
    getOverlayConfig(container) {
        const element = new ElementRef(container); // positionStrategy needs ElementRef;
        let strategy = null;
        if (this._breakpointObserver.isMatched(Breakpoints.XSmall)) {
            strategy = this._overlay
                .position()
                .global()
                .centerHorizontally()
                .centerVertically();
        }
        else {
            const positions = [
                { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' }
            ];
            strategy = this._overlay
                .position()
                .flexibleConnectedTo(element)
                .withPositions(positions);
        }
        return new OverlayConfig({
            positionStrategy: strategy,
            scrollStrategy: this._overlay.scrollStrategies.reposition(),
            hasBackdrop: true,
            backdropClass: 'cdk-overlay-transparent-backdrop'
        });
    }
    attachContainer(overlayRef, menuRef, dataFactory) {
        const injector = this.createInjector(menuRef, dataFactory);
        const containerPortal = new ComponentPortal(FsDrawerMenuComponent, undefined, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    attachComponent(componentRef, externalContainer, externalRef, config) {
        const injector = this.createInjector(externalRef, config);
        return externalContainer.attachComponentPortal(new ComponentPortal(componentRef, undefined, injector));
    }
    createInjector(componentRef, dataFactory) {
        const injectionTokens = new WeakMap([
            [DrawerMenuRef, componentRef],
            [DRAWER_MENU_DATA, dataFactory]
        ]);
        return new PortalInjector(this._injector, injectionTokens);
    }
};
FsDrawerMenuService.ctorParameters = () => [
    { type: Overlay },
    { type: Injector },
    { type: BreakpointObserver }
];
FsDrawerMenuService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Overlay,
        Injector,
        BreakpointObserver])
], FsDrawerMenuService);
export { FsDrawerMenuService };
//# sourceMappingURL=data:application/json;base64,