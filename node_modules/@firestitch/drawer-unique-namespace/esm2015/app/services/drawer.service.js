import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Injector, OnDestroy, Optional, SkipSelf } from '@angular/core';
import { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { Subject, merge } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { FsDrawerComponent } from '../components/drawer/drawer.component';
import { DrawerRef } from '../classes/drawer-ref';
import { DrawerData } from '../classes/drawer-data';
import { DRAWER_DATA } from './drawer-data';
let FsDrawerService = class FsDrawerService {
    constructor(_parentDrawerService, _overlay, _injector) {
        this._parentDrawerService = _parentDrawerService;
        this._overlay = _overlay;
        this._injector = _injector;
        this._drawerRefs = new Set();
        this._destroy$ = new Subject();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    open(component, config) {
        const overlayRef = this._createOverlay();
        const dataFactory = DrawerData.createWithProxy(config.data);
        const drawerRef = new DrawerRef(overlayRef, dataFactory, config);
        const containerRef = this._attachDrawerContainer(overlayRef, drawerRef, dataFactory);
        const componentRef = this._attachComponent(component, containerRef, drawerRef, dataFactory);
        drawerRef.containerRef = containerRef;
        containerRef.setDrawerRef(drawerRef);
        drawerRef.componentRef = componentRef;
        drawerRef.events();
        drawerRef.open();
        this._storeDrawerRef(drawerRef);
        merge(drawerRef.afterOpened$, drawerRef.afterClosed$)
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            setTimeout(() => {
                this._applyBackdrop();
                this._applyBodyOpenClass();
            });
        });
        return drawerRef;
    }
    closeAll() {
        this._drawerRefs.forEach((ref) => ref.close());
        if (this._parentDrawerService) {
            this._parentDrawerService.closeAll();
        }
    }
    _applyBackdrop() {
        Array.from(this._drawerRefs)
            .forEach((drawerRef, index) => {
            const backdrop = drawerRef.overlayRef.backdropElement;
            if (backdrop) {
                if (index && index === (this._drawerRefs.size - 1)) {
                    backdrop.classList.add('fs-drawer-backdrop-active');
                }
                else {
                    backdrop.classList.remove('fs-drawer-backdrop-active');
                }
            }
        });
    }
    _applyBodyOpenClass() {
        if (this._drawerRefs.size) {
            document.body.classList.add('fs-drawer-open');
        }
        else {
            document.body.classList.remove('fs-drawer-open');
        }
    }
    _storeDrawerRef(ref) {
        this._drawerRefs.add(ref);
        this._pushDrawersCascade();
        ref.destroy$
            .pipe(take(1), takeUntil(this._destroy$))
            .subscribe(() => {
            this._drawerRefs.delete(ref);
        });
    }
    /**
     * In case, when we want to open more than 1 drawer
     * our previously opened drawers should be visible
     *
     *      d1   d2   d3
     *     ---- ---- ---
     *    | x  | x1 | x2
     *    | y  | y1 | y2
     *    | z  | z1 | z2
     *     ---- ---- ---
     *
     * Where d1, d2 - previously opened drawers
     * d1 and d2 must be pushed left to be visible under just opened d3
     */
    _pushDrawersCascade() {
        if (this._drawerRefs.size > 1) {
            // SetTimeout should be here because we must wait render newly opened drawer
            // to be able to get his width
            setTimeout(() => {
                const refsArr = Array.from(this._drawerRefs.values());
                for (let i = refsArr.length - 1; i > 0; i--) {
                    const prevRef = refsArr[i - 1];
                    const currRef = refsArr[i];
                    prevRef.resizeController.pushMainWidth(currRef);
                }
            });
        }
    }
    _createOverlay() {
        const overlayConfig = this._getOverlayConfig();
        return this._overlay.create(overlayConfig);
    }
    _getOverlayConfig() {
        return new OverlayConfig({
            hasBackdrop: true,
            backdropClass: 'fs-drawer-backdrop'
        });
    }
    _attachDrawerContainer(overlayRef, drawerRef, dataFactory) {
        const injector = this._createInjector(drawerRef, dataFactory);
        const containerPortal = new ComponentPortal(FsDrawerComponent, undefined, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    _attachComponent(componentRef, drawerContainer, drawerRef, dataFactory) {
        const injector = this._createInjector(drawerRef, dataFactory);
        return drawerContainer.attachComponentPortal(new ComponentPortal(componentRef, undefined, injector));
    }
    _createInjector(componentRef, dataFactory) {
        const injectionTokens = new WeakMap([
            [DrawerRef, componentRef],
            [DRAWER_DATA, dataFactory]
        ]);
        return new PortalInjector(this._injector, injectionTokens);
    }
};
FsDrawerService.ctorParameters = () => [
    { type: FsDrawerService, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: Overlay },
    { type: Injector }
];
FsDrawerService = __decorate([
    Injectable(),
    __param(0, Optional()), __param(0, SkipSelf()),
    __metadata("design:paramtypes", [FsDrawerService,
        Overlay,
        Injector])
], FsDrawerService);
export { FsDrawerService };
//# sourceMappingURL=data:application/json;base64,