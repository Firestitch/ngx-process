import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, filter, takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../../../classes/drawer-ref';
import { FsDrawerAction } from '../../../helpers/action-type.enum';
import { Action } from '../../../models/action.model';
let FsDrawerActionItemComponent = class FsDrawerActionItemComponent {
    constructor(drawer, _cdRef) {
        this.drawer = drawer;
        this._cdRef = _cdRef;
        this.actionClicked = new EventEmitter();
        this.isActive = false;
        this.actionTypes = FsDrawerAction;
        this._destroy$ = new Subject();
        this._listenActionChanges();
        this._listenDataChanges();
    }
    ngOnInit() {
        this._updateVisibilityAndLinks();
    }
    ngOnChanges(changes) {
        if (changes.activeAction) {
            this.isActive = this.action.name !== '' && this.action.name === this.activeAction;
        }
    }
    actionClick(event) {
        this.actionClicked.emit(event);
    }
    menuActionClick(action, event) {
        if (action.click) {
            action.click.call(null, {
                data: this.drawer.drawerData,
                event: event,
                drawerRef: this.drawer,
                action: action
            });
        }
    }
    _listenActionChanges() {
        this.drawer.actionUpdated$
            .pipe(filter((name) => name === this.action.name), takeUntil(this._destroy$))
            .subscribe(() => {
            this._cdRef.detectChanges();
        });
    }
    _listenDataChanges() {
        this.drawer.dataChanged$
            .pipe(takeUntil(this._destroy$), debounceTime(50))
            .subscribe(() => {
            this._updateVisibilityAndLinks();
        });
    }
    _updateVisibilityAndLinks() {
        this._updateVisibility();
        this._updateRouterLinks();
        this._cdRef.detectChanges();
    }
    _updateVisibility() {
        this.action.checkVisibility(this.drawer.drawerData);
    }
    _updateRouterLinks() {
        if (this.action.type === this.actionTypes.Menu) {
            this.action.updateRouterLink({
                data: this.drawer.drawerData,
                drawerRef: this.drawer
            });
        }
    }
};
FsDrawerActionItemComponent.ctorParameters = () => [
    { type: DrawerRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Action)
], FsDrawerActionItemComponent.prototype, "action", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FsDrawerActionItemComponent.prototype, "activeAction", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FsDrawerActionItemComponent.prototype, "actionClicked", void 0);
FsDrawerActionItemComponent = __decorate([
    Component({
        selector: 'fs-drawer-action-item',
        template: "<ng-container [ngSwitch]=\"action.type\">\n  <ng-container *ngSwitchCase=\"actionTypes.Button\">\n    <button mat-icon-button\n            type=\"button\"\n            *ngIf=\"action.visible\"\n            [matTooltip]=\"action.tooltip\"\n            [class.active]=\"isActive\"\n            (click)=\"actionClick($event)\">\n      <i class=\"material-icons\">{{action.icon}}</i>\n    </button>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"actionTypes.Menu\">\n    <ng-container *ngIf=\"action.visible\">\n      <button mat-icon-button\n              type=\"button\"\n              class=\"sub-action\"\n              [fsMenuTriggerFor]=\"menu\"\n              [matTooltip]=\"action.tooltip\"\n              [class.active]=\"isActive\"\n              (click)=\"actionClick($event)\">\n        <i class=\"material-icons\">{{action.icon}}</i>\n      </button>\n\n      <fs-menu #menu>\n        <ng-container *ngFor=\"let menuAction of action.menuActions\">\n          <ng-container *ngIf=\"menuAction.isGroup else simpleMenuItem\">\n            <fs-menu-group [label]=\"menuAction.label\" [hidden]=\"!menuAction.visible\">\n              <ng-container *ngFor=\"let groupAction of menuAction.actions\">\n                <ng-template fs-menu-item\n                             [hidden]=\"!groupAction.visible\"\n                             [link]=\"groupAction.routerLink?.link\"\n                             [queryParams]=\"groupAction.routerLink?.queryParams\"\n                             (click)=\"menuActionClick(groupAction, $event);\">\n                  <mat-icon *ngIf=\"menuAction.icon\">{{groupAction.icon}}</mat-icon>\n                  {{groupAction.label}}\n                </ng-template>\n              </ng-container>\n            </fs-menu-group>\n          </ng-container>\n          <ng-template #simpleMenuItem>\n            <ng-template fs-menu-item\n                         [hidden]=\"!menuAction.visible\"\n                         [link]=\"menuAction.routerLink?.link\"\n                         [queryParams]=\"menuAction.routerLink?.queryParams\"\n                         (click)=\"menuActionClick(menuAction, $event);\">\n              <i class=\"material-icons\" *ngIf=\"menuAction.icon\">{{menuAction.icon}}</i>\n              <span>{{menuAction.label}}</span>\n            </ng-template>\n          </ng-template>\n        </ng-container>\n      </fs-menu>\n    </ng-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"actionTypes.Component\">\n    <button mat-icon-button\n            type=\"button\"\n            *ngIf=\"action.visible\"\n            [matTooltip]=\"action.tooltip\"\n            [class.active]=\"isActive\"\n            (click)=\"actionClick($event)\">\n      <i class=\"material-icons\">{{action.icon}}</i>\n    </button>\n  </ng-container>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [DrawerRef,
        ChangeDetectorRef])
], FsDrawerActionItemComponent);
export { FsDrawerActionItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLWFjdGlvbi1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXJlc3RpdGNoL2RyYXdlci8iLCJzb3VyY2VzIjpbImFwcC9jb21wb25lbnRzL2RyYXdlci1hY3Rpb25zL2RyYXdlci1hY3Rpb24taXRlbS9kcmF3ZXItYWN0aW9uLWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQUUsWUFBWSxFQUN2QixLQUFLLEVBQ0wsU0FBUyxFQUFFLE1BQU0sRUFDakIsTUFBTSxFQUNOLGFBQWEsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWpFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDbkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBUXRELElBQWEsMkJBQTJCLEdBQXhDLE1BQWEsMkJBQTJCO0lBZXRDLFlBQ1MsTUFBc0IsRUFDckIsTUFBeUI7UUFEMUIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFDckIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFUNUIsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRW5DLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsZ0JBQVcsR0FBRyxjQUFjLENBQUM7UUFFNUIsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFNdEMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVN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LCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLCBPbkluaXQsXG4gIE91dHB1dCxcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBmaWx0ZXIsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgRHJhd2VyUmVmIH0gZnJvbSAnLi4vLi4vLi4vY2xhc3Nlcy9kcmF3ZXItcmVmJztcbmltcG9ydCB7IEZzRHJhd2VyQWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycy9hY3Rpb24tdHlwZS5lbnVtJztcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4uLy4uLy4uL21vZGVscy9hY3Rpb24ubW9kZWwnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZzLWRyYXdlci1hY3Rpb24taXRlbScsXG4gIHRlbXBsYXRlVXJsOiAnLi9kcmF3ZXItYWN0aW9uLWl0ZW0uY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgRnNEcmF3ZXJBY3Rpb25JdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKVxuICBwdWJsaWMgYWN0aW9uOiBBY3Rpb247XG5cbiAgQElucHV0KClcbiAgcHVibGljIGFjdGl2ZUFjdGlvbjogc3RyaW5nO1xuXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgYWN0aW9uQ2xpY2tlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwdWJsaWMgaXNBY3RpdmUgPSBmYWxzZTtcbiAgcHVibGljIGFjdGlvblR5cGVzID0gRnNEcmF3ZXJBY3Rpb247XG5cbiAgcHJpdmF0ZSBfZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBkcmF3ZXI6IERyYXdlclJlZjxhbnk+LFxuICAgIHByaXZhdGUgX2NkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgKSB7XG4gICAgdGhpcy5fbGlzdGVuQWN0aW9uQ2hhbmdlcygpO1xuICAgIHRoaXMuX2xpc3RlbkRhdGFDaGFuZ2VzKCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eUFuZExpbmtzKCk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLmFjdGl2ZUFjdGlvbikge1xuICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRoaXMuYWN0aW9uLm5hbWUgIT09ICcnICYmIHRoaXMuYWN0aW9uLm5hbWUgPT09IHRoaXMuYWN0aXZlQWN0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhY3Rpb25DbGljayhldmVudCkge1xuICAgIHRoaXMuYWN0aW9uQ2xpY2tlZC5lbWl0KGV2ZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBtZW51QWN0aW9uQ2xpY2soYWN0aW9uLCBldmVudCkge1xuICAgIGlmIChhY3Rpb24uY2xpY2spIHtcbiAgICAgIGFjdGlvbi5jbGljay5jYWxsKG51bGwsIHtcbiAgICAgICAgZGF0YTogdGhpcy5kcmF3ZXIuZHJhd2VyRGF0YSxcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBkcmF3ZXJSZWY6IHRoaXMuZHJhd2VyLFxuICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfbGlzdGVuQWN0aW9uQ2hhbmdlcygpIHtcbiAgICB0aGlzLmRyYXdlci5hY3Rpb25VcGRhdGVkJFxuICAgICAgLnBpcGUoXG4gICAgICAgIGZpbHRlcigobmFtZSkgPT4gbmFtZSA9PT0gdGhpcy5hY3Rpb24ubmFtZSksXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95JCksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5fY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgX2xpc3RlbkRhdGFDaGFuZ2VzKCkge1xuICAgIHRoaXMuZHJhd2VyLmRhdGFDaGFuZ2VkJFxuICAgICAgLnBpcGUoXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95JCksXG4gICAgICAgIGRlYm91bmNlVGltZSg1MCksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eUFuZExpbmtzKCk7XG4gICAgICB9KTtcbiAgfVxuXG5cbiAgcHJpdmF0ZSBfdXBkYXRlVmlzaWJpbGl0eUFuZExpbmtzKCkge1xuICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoKTtcbiAgICB0aGlzLl91cGRhdGVSb3V0ZXJMaW5rcygpO1xuXG4gICAgdGhpcy5fY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBfdXBkYXRlVmlzaWJpbGl0eSgpIHtcbiAgICB0aGlzLmFjdGlvbi5jaGVja1Zpc2liaWxpdHkodGhpcy5kcmF3ZXIuZHJhd2VyRGF0YSk7XG4gIH1cblxuICBwcml2YXRlIF91cGRhdGVSb3V0ZXJMaW5rcygpIHtcbiAgICBpZiAodGhpcy5hY3Rpb24udHlwZSA9PT0gdGhpcy5hY3Rpb25UeXBlcy5NZW51KSB7XG4gICAgICB0aGlzLmFjdGlvbi51cGRhdGVSb3V0ZXJMaW5rKHtcbiAgICAgICAgZGF0YTogdGhpcy5kcmF3ZXIuZHJhd2VyRGF0YSxcbiAgICAgICAgZHJhd2VyUmVmOiB0aGlzLmRyYXdlclxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG4iXX0=