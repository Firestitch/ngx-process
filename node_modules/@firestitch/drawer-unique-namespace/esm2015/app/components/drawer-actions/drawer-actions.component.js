import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit, } from '@angular/core';
import { Subject } from 'rxjs';
import { FsDrawerAction } from '../../helpers/action-type.enum';
import { DrawerRef } from '../../classes/drawer-ref';
import { FsDrawerMenuService } from '../../services/drawer-menu.service';
let FsDrawerActionsComponent = class FsDrawerActionsComponent {
    constructor(_drawerRef, _drawerMenu, _cdRef) {
        this._drawerRef = _drawerRef;
        this._drawerMenu = _drawerMenu;
        this._cdRef = _cdRef;
        this._destroy$ = new Subject();
    }
    ngOnInit() {
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    actionClick(action, event) {
        const hasComponentType = action.type === FsDrawerAction.Component;
        const hasMenuType = action.type === FsDrawerAction.Menu;
        if (hasComponentType) {
            const menuRef = this._drawerMenu.create(action.component, event.srcElement, action);
            this._drawerRef.addMenuRef(action.menuRefName, menuRef);
            const params = {
                event: event,
                action: action,
                drawerRef: this._drawerRef,
                menuRef: menuRef
            };
            // Call click
            action.click.call(null, params);
            if (action.closeSide) {
                this._drawerRef.closeSide();
            }
        }
        else if (action.click) {
            const params = { event: event, action: action };
            action.click.call(null, params);
        }
        if (action.close) {
            this._drawerRef.close();
        }
        if (action.toggle && ((!hasComponentType && !hasMenuType) || action.closeSide)) {
            if (this._drawerRef.isSideOpen && this._drawerRef.activeAction === action.name) {
                this._drawerRef.toggleSide();
            }
            else {
                this._drawerRef.setActiveAction(action.name);
            }
        }
    }
};
FsDrawerActionsComponent.ctorParameters = () => [
    { type: DrawerRef },
    { type: FsDrawerMenuService },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Array)
], FsDrawerActionsComponent.prototype, "actions", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FsDrawerActionsComponent.prototype, "activeAction", void 0);
FsDrawerActionsComponent = __decorate([
    Component({
        selector: 'fs-drawer-actions',
        template: "<div class=\"actions-container\">\n  <div *ngFor=\"let action of actions\" class=\"action-btn\">\n    <fs-drawer-action-item [action]=\"action\"\n                           [activeAction]=\"activeAction\"\n                           (actionClicked)=\"actionClick(action, $event)\">\n    </fs-drawer-action-item>\n  </div>\n</div>\n\n<div class=\"drag-icon\">\n  <a mat-icon-button class=\"resize-icon\"><mat-icon>drag_indicator</mat-icon></a>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:flex}.actions-container{flex:0}.drag-icon{display:flex;flex:1;align-items:center}"]
    }),
    __metadata("design:paramtypes", [DrawerRef,
        FsDrawerMenuService,
        ChangeDetectorRef])
], FsDrawerActionsComponent);
export { FsDrawerActionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVzdGl0Y2gvZHJhd2VyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBvbmVudHMvZHJhd2VyLWFjdGlvbnMvZHJhd2VyLWFjdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQzFDLFNBQVMsRUFDVCxLQUFLLEVBQ0wsU0FBUyxFQUNULE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFckQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFTekUsSUFBYSx3QkFBd0IsR0FBckMsTUFBYSx3QkFBd0I7SUFNbkMsWUFDVSxVQUEwQixFQUMxQixXQUFnQyxFQUNoQyxNQUF5QjtRQUZ6QixlQUFVLEdBQVYsVUFBVSxDQUFnQjtRQUMxQixnQkFBVyxHQUFYLFdBQVcsQ0FBcUI7UUFDaEMsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFMM0IsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFNckMsQ0FBQztJQUVHLFFBQVE7SUFDZixDQUFDO0lBRU0sV0FBVztRQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSztRQUM5QixNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLFNBQVMsQ0FBQztRQUNsRSxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQyxJQUFJLENBQUM7UUFFeEQsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFcEYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUV4RCxNQUFNLE1BQU0sR0FBRztnQkFDYixLQUFLLEVBQUUsS0FBSztnQkFDWixNQUFNLEVBQUUsTUFBTTtnQkFDZCxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVU7Z0JBQzFCLE9BQU8sRUFBRSxPQUFPO2FBQ2pCLENBQUM7WUFDRixhQUFhO1lBQ2IsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBRWhDLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQzthQUM3QjtTQUNGO2FBQU0sSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLE1BQU0sTUFBTSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7WUFDaEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDekI7UUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDOUUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFO2dCQUM5RSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM5QztTQUNGO0lBQ0gsQ0FBQztDQUVGLENBQUE7O1lBcER1QixTQUFTO1lBQ1IsbUJBQW1CO1lBQ3hCLGlCQUFpQjs7QUFSMUI7SUFBUixLQUFLLEVBQUU7O3lEQUEwQjtBQUN6QjtJQUFSLEtBQUssRUFBRTs7OERBQTZCO0FBRjFCLHdCQUF3QjtJQU5wQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLGdkQUE4QztRQUU5QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7S0FDaEQsQ0FBQztxQ0FRc0IsU0FBUztRQUNSLG1CQUFtQjtRQUN4QixpQkFBaUI7R0FUeEIsd0JBQXdCLENBMkRwQztTQTNEWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBGc0RyYXdlckFjdGlvbiB9IGZyb20gJy4uLy4uL2hlbHBlcnMvYWN0aW9uLXR5cGUuZW51bSc7XG5pbXBvcnQgeyBEcmF3ZXJSZWYgfSBmcm9tICcuLi8uLi9jbGFzc2VzL2RyYXdlci1yZWYnO1xuaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2FjdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBGc0RyYXdlck1lbnVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZHJhd2VyLW1lbnUuc2VydmljZSc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZnMtZHJhd2VyLWFjdGlvbnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vZHJhd2VyLWFjdGlvbnMuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsgJy4vZHJhd2VyLWFjdGlvbnMuY29tcG9uZW50LnNjc3MnIF0sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBGc0RyYXdlckFjdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHB1YmxpYyBhY3Rpb25zOiBBY3Rpb25bXTtcbiAgQElucHV0KCkgcHVibGljIGFjdGl2ZUFjdGlvbjogc3RyaW5nO1xuXG4gIHByaXZhdGUgX2Rlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9kcmF3ZXJSZWY6IERyYXdlclJlZjxhbnk+LFxuICAgIHByaXZhdGUgX2RyYXdlck1lbnU6IEZzRHJhd2VyTWVudVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBfY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICApIHt9XG5cbiAgcHVibGljIG5nT25Jbml0KCkge1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX2Rlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLl9kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHVibGljIGFjdGlvbkNsaWNrKGFjdGlvbiwgZXZlbnQpIHtcbiAgICBjb25zdCBoYXNDb21wb25lbnRUeXBlID0gYWN0aW9uLnR5cGUgPT09IEZzRHJhd2VyQWN0aW9uLkNvbXBvbmVudDtcbiAgICBjb25zdCBoYXNNZW51VHlwZSA9IGFjdGlvbi50eXBlID09PSBGc0RyYXdlckFjdGlvbi5NZW51O1xuXG4gICAgaWYgKGhhc0NvbXBvbmVudFR5cGUpIHtcbiAgICAgIGNvbnN0IG1lbnVSZWYgPSB0aGlzLl9kcmF3ZXJNZW51LmNyZWF0ZShhY3Rpb24uY29tcG9uZW50LCBldmVudC5zcmNFbGVtZW50LCBhY3Rpb24pO1xuXG4gICAgICB0aGlzLl9kcmF3ZXJSZWYuYWRkTWVudVJlZihhY3Rpb24ubWVudVJlZk5hbWUsIG1lbnVSZWYpO1xuXG4gICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGRyYXdlclJlZjogdGhpcy5fZHJhd2VyUmVmLFxuICAgICAgICBtZW51UmVmOiBtZW51UmVmXG4gICAgICB9O1xuICAgICAgLy8gQ2FsbCBjbGlja1xuICAgICAgYWN0aW9uLmNsaWNrLmNhbGwobnVsbCwgcGFyYW1zKTtcblxuICAgICAgaWYgKGFjdGlvbi5jbG9zZVNpZGUpIHtcbiAgICAgICAgdGhpcy5fZHJhd2VyUmVmLmNsb3NlU2lkZSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0aW9uLmNsaWNrKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSB7IGV2ZW50OiBldmVudCwgYWN0aW9uOiBhY3Rpb24gfTtcbiAgICAgIGFjdGlvbi5jbGljay5jYWxsKG51bGwsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgaWYgKGFjdGlvbi5jbG9zZSkge1xuICAgICAgdGhpcy5fZHJhd2VyUmVmLmNsb3NlKCk7XG4gICAgfVxuXG4gICAgaWYgKGFjdGlvbi50b2dnbGUgJiYgKCghaGFzQ29tcG9uZW50VHlwZSAmJiAhaGFzTWVudVR5cGUpIHx8IGFjdGlvbi5jbG9zZVNpZGUpKSB7XG4gICAgICBpZiAodGhpcy5fZHJhd2VyUmVmLmlzU2lkZU9wZW4gJiYgdGhpcy5fZHJhd2VyUmVmLmFjdGl2ZUFjdGlvbiA9PT0gYWN0aW9uLm5hbWUpIHtcbiAgICAgICAgdGhpcy5fZHJhd2VyUmVmLnRvZ2dsZVNpZGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2RyYXdlclJlZi5zZXRBY3RpdmVBY3Rpb24oYWN0aW9uLm5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4iXX0=