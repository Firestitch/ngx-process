import { __decorate, __metadata } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef, } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../../classes/drawer-ref';
import { FsDrawerActionDirective } from '../../directives/drawer-action.directive';
let FsDrawerSideComponent = class FsDrawerSideComponent {
    constructor(_cdRef, _renderer, _elRef) {
        this._cdRef = _cdRef;
        this._renderer = _renderer;
        this._elRef = _elRef;
        this.classSide = true;
        this.activeTemplate = null;
        this._hidden = false;
        this._destroy$ = new EventEmitter();
    }
    set hidden(value) {
        this._hidden = value;
        if (this._hidden) {
            this._renderer.setAttribute(this._elRef.nativeElement, 'hidden', 'true');
        }
        else {
            this._renderer.removeAttribute(this._elRef.nativeElement, 'hidden');
        }
    }
    ngOnInit() {
        this.hidden = true;
        if (!this.drawer) {
            console.error('Drawer reference is null for @Input("fsDrawerSide")');
        }
        this._subscribeToActionChanges();
    }
    ngAfterViewInit() {
        setTimeout(() => {
            // Check current side status
            if (this.drawer) {
                this.hidden = !this.drawer.isSideOpen;
            }
            this._updateActiveActionTemplate();
        });
    }
    ngOnDestroy() {
        this._destroy$.emit();
        this._destroy$.complete();
    }
    _subscribeToActionChanges() {
        if (this.drawer) {
            this.drawer.sideToggle$
                .pipe(takeUntil(this._destroy$))
                .subscribe(() => {
                this.hidden = !this.drawer.isSideOpen;
                this._updateActiveActionTemplate();
                this._cdRef.detectChanges();
            });
        }
    }
    _updateActiveActionTemplate() {
        if (this.drawer) {
            const activatedAction = this.drawer.activeAction;
            if (this.drawer.isSideOpen && activatedAction) {
                const selectedActionIndex = this.actions
                    .toArray()
                    .findIndex((action) => action.name === activatedAction);
                this.activeTemplate = this.actionsTemplates.toArray()[selectedActionIndex];
            }
            else {
                this.activeTemplate = null;
            }
        }
    }
};
FsDrawerSideComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    Input('fsDrawerSide'),
    __metadata("design:type", DrawerRef)
], FsDrawerSideComponent.prototype, "drawer", void 0);
__decorate([
    HostBinding('class.side'),
    __metadata("design:type", Object)
], FsDrawerSideComponent.prototype, "classSide", void 0);
__decorate([
    ContentChildren(FsDrawerActionDirective),
    __metadata("design:type", QueryList)
], FsDrawerSideComponent.prototype, "actions", void 0);
__decorate([
    ContentChildren(FsDrawerActionDirective, { read: TemplateRef }),
    __metadata("design:type", QueryList)
], FsDrawerSideComponent.prototype, "actionsTemplates", void 0);
FsDrawerSideComponent = __decorate([
    Component({
        selector: '[fsDrawerSide]',
        template: "<ng-container [ngSwitch]=\"drawer.drawerConfig.position\" *ngIf=\"activeTemplate\">\n  <ng-container *ngSwitchCase=\"'right'\">\n    <div class=\"side-container\" #sideContainer>\n      <div class=\"side-content\">\n        <ng-template [ngTemplateOutlet]=\"activeTemplate\"></ng-template>\n      </div>\n    </div>\n    <div class=\"resize-side\"\n         resizable=\"true\"\n         direction=\"left\"\n         type=\"side\"\n         [fsDrawerResizer]=\"sideContainer\"\n         [resizable]=\"drawer.drawerConfig.resizable\"\n         [sizeController]=\"drawer.resizeController\"\n         [parentContainer]=\"drawer.drawerContentContainer\"\n         [actionsContainer]=\"drawer.drawerActionsContainer\"\n    >\n      <a mat-icon-button class=\"resize-icon\"><mat-icon>drag_indicator</mat-icon></a>\n    </div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'left'\">\n    <div class=\"resize-side\"\n         resizable=\"true\"\n         direction=\"right\"\n         [fsDrawerResizer]=\"sideContainer\"\n    >\n    <a mat-icon-button class=\"resize-icon\"><mat-icon>drag_indicator</mat-icon></a>\n    </div>\n    <div class=\"side-container\" #sideContainer>\n      <div class=\"side-content\">\n        <ng-template [ngTemplateOutlet]=\"activeTemplate\"></ng-template>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [".resize-icon{width:24px;height:24px;line-height:24px}.resize-icon span{width:24px}"]
    }),
    __metadata("design:paramtypes", [ChangeDetectorRef,
        Renderer2,
        ElementRef])
], FsDrawerSideComponent);
export { FsDrawerSideComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLXNpZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVzdGl0Y2gvZHJhd2VyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBvbmVudHMvZHJhd2VyLXNpZGUvZHJhd2VyLXNpZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsYUFBYSxFQUNiLHVCQUF1QixFQUFFLGlCQUFpQixFQUMxQyxTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLEtBQUssRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLFNBQVMsRUFDVCxTQUFTLEVBQ1QsV0FBVyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFXbkYsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFnQmhDLFlBQ1UsTUFBeUIsRUFDekIsU0FBb0IsRUFDcEIsTUFBa0I7UUFGbEIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFDekIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBZk0sY0FBUyxHQUFHLElBQUksQ0FBQztRQU81QyxtQkFBYyxHQUFxQixJQUFJLENBQUM7UUFFdkMsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU1wQyxDQUFDO0lBRUosSUFBVyxNQUFNLENBQUMsS0FBYztRQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUVyQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxD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LFVBQVU7R0FuQmpCLHFCQUFxQixDQXdGakM7U0F4RlkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBRdWVyeUxpc3QsXG4gIFJlbmRlcmVyMixcbiAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBEcmF3ZXJSZWYgfSBmcm9tICcuLi8uLi9jbGFzc2VzL2RyYXdlci1yZWYnO1xuaW1wb3J0IHsgRnNEcmF3ZXJBY3Rpb25EaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL2RyYXdlci1hY3Rpb24uZGlyZWN0aXZlJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdbZnNEcmF3ZXJTaWRlXScsXG4gIHRlbXBsYXRlVXJsOiAnLi9kcmF3ZXItc2lkZS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBzdHlsZVVybHM6IFtcbiAgICAnLi9kcmF3ZXItc2lkZS5jb21wb25lbnQuc2NzcycsXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIEZzRHJhd2VyU2lkZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcblxuICBASW5wdXQoJ2ZzRHJhd2VyU2lkZScpIHB1YmxpYyBkcmF3ZXI6IERyYXdlclJlZjxhbnk+O1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2lkZScpIHB1YmxpYyBjbGFzc1NpZGUgPSB0cnVlO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oRnNEcmF3ZXJBY3Rpb25EaXJlY3RpdmUpIGFjdGlvbnM6IFF1ZXJ5TGlzdDxGc0RyYXdlckFjdGlvbkRpcmVjdGl2ZT47XG5cbiAgQENvbnRlbnRDaGlsZHJlbihGc0RyYXdlckFjdGlvbkRpcmVjdGl2ZSwgeyByZWFkOiBUZW1wbGF0ZVJlZiB9KVxuICBhY3Rpb25zVGVtcGxhdGVzOiBRdWVyeUxpc3Q8VGVtcGxhdGVSZWY8YW55Pj47XG5cbiAgcHVibGljIGFjdGl2ZVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+ID0gbnVsbDtcblxuICBwcml2YXRlIF9oaWRkZW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfZGVzdHJveSQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgcHJpdmF0ZSBfZWxSZWY6IEVsZW1lbnRSZWYsXG4gICkge31cblxuICBwdWJsaWMgc2V0IGhpZGRlbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGRlbiA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuX2hpZGRlbikge1xuICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMuX2VsUmVmLm5hdGl2ZUVsZW1lbnQsICdoaWRkZW4nLCAndHJ1ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudCwgJ2hpZGRlbicpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG5cbiAgICB0aGlzLmhpZGRlbiA9IHRydWU7XG5cbiAgICBpZiAoIXRoaXMuZHJhd2VyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdEcmF3ZXIgcmVmZXJlbmNlIGlzIG51bGwgZm9yIEBJbnB1dChcImZzRHJhd2VyU2lkZVwiKScpO1xuICAgIH1cblxuICAgIHRoaXMuX3N1YnNjcmliZVRvQWN0aW9uQ2hhbmdlcygpO1xuICB9XG5cbiAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIENoZWNrIGN1cnJlbnQgc2lkZSBzdGF0dXNcbiAgICAgIGlmICh0aGlzLmRyYXdlcikge1xuICAgICAgICB0aGlzLmhpZGRlbiA9ICF0aGlzLmRyYXdlci5pc1NpZGVPcGVuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl91cGRhdGVBY3RpdmVBY3Rpb25UZW1wbGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2Rlc3Ryb3kkLmVtaXQoKTtcbiAgICB0aGlzLl9kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBfc3Vic2NyaWJlVG9BY3Rpb25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmRyYXdlcikge1xuICAgICAgdGhpcy5kcmF3ZXIuc2lkZVRvZ2dsZSRcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kkKSxcbiAgICAgICAgKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmhpZGRlbiA9ICF0aGlzLmRyYXdlci5pc1NpZGVPcGVuO1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUFjdGl2ZUFjdGlvblRlbXBsYXRlKCk7XG5cbiAgICAgICAgICB0aGlzLl9jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3VwZGF0ZUFjdGl2ZUFjdGlvblRlbXBsYXRlKCkge1xuICAgIGlmICh0aGlzLmRyYXdlcikge1xuICAgICAgY29uc3QgYWN0aXZhdGVkQWN0aW9uID0gdGhpcy5kcmF3ZXIuYWN0aXZlQWN0aW9uO1xuXG4gICAgICBpZiAodGhpcy5kcmF3ZXIuaXNTaWRlT3BlbiAmJiBhY3RpdmF0ZWRBY3Rpb24pIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRBY3Rpb25JbmRleCA9IHRoaXMuYWN0aW9uc1xuICAgICAgICAgIC50b0FycmF5KClcbiAgICAgICAgICAuZmluZEluZGV4KChhY3Rpb24pID0+IGFjdGlvbi5uYW1lID09PSBhY3RpdmF0ZWRBY3Rpb24pO1xuXG4gICAgICAgIHRoaXMuYWN0aXZlVGVtcGxhdGUgPSB0aGlzLmFjdGlvbnNUZW1wbGF0ZXMudG9BcnJheSgpW3NlbGVjdGVkQWN0aW9uSW5kZXhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hY3RpdmVUZW1wbGF0ZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=