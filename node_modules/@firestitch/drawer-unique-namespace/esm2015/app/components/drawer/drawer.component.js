import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentRef, ElementRef, EmbeddedViewRef, OnDestroy, OnInit, ViewChild, ViewEncapsulation, } from '@angular/core';
import { BasePortalOutlet, CdkPortalOutlet, } from '@angular/cdk/portal';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../../classes/drawer-ref';
import { FsDrawerMenuService } from '../../services/drawer-menu.service';
import { DrawerSizeController } from '../../classes/drawer-size-controller';
let FsDrawerComponent = class FsDrawerComponent extends BasePortalOutlet {
    constructor(_el, _drawerMenu, _drawerRef, _cdRef, _resizeController) {
        super();
        this._el = _el;
        this._drawerMenu = _drawerMenu;
        this._drawerRef = _drawerRef;
        this._cdRef = _cdRef;
        this._resizeController = _resizeController;
        this.isOpen = false;
        this.isOpenSide = false;
        this.initialized = false;
        this._sideOpen = false;
        this._destroy$ = new Subject();
        this._drawerRef.resizeController = this._resizeController;
    }
    get sideOpen() {
        return this._sideOpen;
    }
    set sideOpen(value) {
        this._sideOpen = value;
        this._el.nativeElement.classList
            .toggle('side-open', this.sideOpen);
    }
    ngOnInit() {
        this._listenDataChanges();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    open() {
        this.isOpen = true;
    }
    close() {
        this.isOpen = false;
    }
    openSide() {
        this.isOpenSide = true;
    }
    closeSide() {
        this.isOpenSide = false;
    }
    setDrawerRef(value) {
        this.drawerRef = value;
        this.config = this.drawerRef.drawerConfig;
        // Need to be like a parent for children resize
        this.drawerRef.drawerContentContainer = this._drawerContentContainer;
        this.drawerRef.drawerActionsContainer = this._drawerActionsContainer;
        this.drawerRef.sideToggle$
            .pipe(takeUntil(this._destroy$))
            .subscribe((opened) => {
            this.sideOpen = opened;
        });
        this.initialized = true;
    }
    /**
     * Attach a ComponentPortal as content to this dialog container.
     * @param portal Portal to be attached as the dialog content.
     */
    attachComponentPortal(portal) {
        if (this._portalOutlet.hasAttached()) {
            throw Error('Drawer component already attached');
        }
        return this._portalOutlet.attachComponentPortal(portal);
    }
    /**
     * Attach a TemplatePortal as content to this dialog container.
     * @param portal Portal to be attached as the dialog content.
     */
    attachTemplatePortal(portal) {
        if (this._portalOutlet.hasAttached()) {
            throw Error('Drawer template already attached');
        }
        return this._portalOutlet.attachTemplatePortal(portal);
    }
    _listenDataChanges() {
        this._drawerRef.dataChanged$
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            this._cdRef.detectChanges();
        });
    }
};
FsDrawerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: FsDrawerMenuService },
    { type: DrawerRef },
    { type: ChangeDetectorRef },
    { type: DrawerSizeController }
];
__decorate([
    ViewChild(CdkPortalOutlet, { static: true }),
    __metadata("design:type", CdkPortalOutlet)
], FsDrawerComponent.prototype, "_portalOutlet", void 0);
__decorate([
    ViewChild('drawerContentContainer', { static: true }),
    __metadata("design:type", ElementRef)
], FsDrawerComponent.prototype, "_drawerContentContainer", void 0);
__decorate([
    ViewChild('drawerActionsContainer', { read: ElementRef, static: true }),
    __metadata("design:type", ElementRef)
], FsDrawerComponent.prototype, "_drawerActionsContainer", void 0);
FsDrawerComponent = __decorate([
    Component({
        selector: 'fs-drawer',
        template: "<div class=\"mat-elevation-z2 drawer\" #drawer\n     hidden\n     [ngClass]=\"config.position\"\n     [hidden]=\"!initialized\">\n  <ng-container>\n    <fs-drawer-actions class=\"drawer-actions\"\n                       #drawerActionsContainer\n                       type=\"main\"\n                       [fsDrawerResizer]=\"drawer\"\n                       [resizable]=\"drawerRef.drawerConfig.resizable\"\n                       [sizeController]=\"drawerRef.resizeController\"\n                       [direction]=\"config.position\"\n                       [actions]=\"config.actions\"\n                       [activeAction]=\"drawerRef.activeAction$ | async\">\n    </fs-drawer-actions>\n    <div class=\"drawer-container\" #drawerContentContainer>\n      <ng-template cdkPortalOutlet></ng-template>\n    </div>\n  </ng-container>\n</div>\n",
        providers: [
            FsDrawerMenuService,
            DrawerSizeController,
        ],
        host: {
            'class': 'fs-drawer-container',
        },
        encapsulation: ViewEncapsulation.None,
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    __metadata("design:paramtypes", [ElementRef,
        FsDrawerMenuService,
        DrawerRef,
        ChangeDetectorRef,
        DrawerSizeController])
], FsDrawerComponent);
export { FsDrawerComponent };
//# sourceMappingURL=data:application/json;base64,