import { Observable, Subject, zip } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class DrawerMenuRef {
    constructor(_overlayRef, _dataFactory) {
        this._overlayRef = _overlayRef;
        this._dataFactory = _dataFactory;
        /** Subject for notifying the user that the menu has finished closing. */
        this._afterClosed$ = new Subject();
        /** Subject for notifying the user that the menu has started closing. */
        this._closeStart$ = new Subject();
        /** Destroy notifier **/
        this._destroy$ = new Subject();
        this._overlayRef.backdropClick()
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            this.close();
        });
    }
    /**
     * Getter for DRAWER_MENU_DATA for current drawer
     */
    get menuData() {
        return Object.assign({}, this._dataFactory.getValue()); // Like immutable.... TODO switch to Immer
    }
    /**
     * Set reference to menu container
     * @param value
     */
    set containerRef(value) {
        this._externalMenuContainerRef = value;
    }
    /**
     * Set reference to menu component
     * @param value
     */
    set componentRef(value) {
        this._externalMenuComponentRef = value;
    }
    /**
     * Gets an observable that is notified when data in DRAWER_DATA was changed
     */
    get dataChanged$() {
        return this._dataFactory.dataChange$;
    }
    /**
     * Set value for DRAWER_DATA
     * @param data
     */
    dataChange(data) {
        this._dataFactory.setValue(data);
    }
    /**
     * Gets an observable that is notified when the dialog is finished closing.
     */
    afterClosed() {
        return this._afterClosed$.pipe(takeUntil(this._destroy$));
    }
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     */
    closeStart() {
        return this._closeStart$.pipe(takeUntil(this._destroy$));
    }
    /**
     * Close the menu.
     * @param result Optional result to return to the dialog opener.
     */
    close(result) {
        new Observable(observer => {
            if (this._closeStart$.observers.length) {
                zip(...this._closeStart$.observers.map(item => {
                    return Observable.create(closeObserver => {
                        item.next(closeObserver);
                    });
                }))
                    .pipe(takeUntil(this._destroy$))
                    .subscribe(() => {
                    observer.next();
                    observer.complete();
                }, () => {
                    observer.error();
                });
            }
            else {
                observer.next();
                observer.complete();
            }
        }).pipe(takeUntil(this._destroy$))
            .subscribe({
            next: () => {
                this._result = result;
                this._afterClosed$.next(result);
                this.destroy();
            }
        });
    }
    destroy() {
        this._overlayRef.detachBackdrop();
        this._overlayRef.detach();
        this._externalMenuComponentRef && this._externalMenuComponentRef.destroy();
        this._dataFactory.destroy();
        this._destroy$.next();
        this._destroy$.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,