import { Observable, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class DrawerData {
    constructor(data = {}) {
        this._dataChange = new Subject();
        this._destroy = new Subject();
        this._data = data;
    }
    static createWithProxy(data = {}) {
        const drawerData = new DrawerData(data);
        return new Proxy(drawerData, {
            get(target, property) {
                if (typeof target[property] === 'function'
                    || property === '_data'
                    || target[property] instanceof Observable) {
                    return target[property];
                }
                else {
                    return target._data[property];
                }
            },
            set(target, property, value) {
                if (property !== '_data') {
                    target._data[property] = value;
                }
                else {
                    target[property] = value;
                }
                return true;
            },
            has(target, property) {
                return property in target._data;
            },
            ownKeys(target) {
                return Object.keys(target._data);
            },
            enumerate(target) {
                return Object.keys(target._data);
            },
            getOwnPropertyDescriptor(target, property) {
                return Object.getOwnPropertyDescriptor(target._data, property);
            }
        });
    }
    get dataChange$() {
        return this._dataChange.pipe(takeUntil(this._destroy));
    }
    getValue() {
        return this._data;
    }
    setValue(value) {
        this._data = value;
        this._dataChange.next(this._data);
    }
    destroy() {
        this._destroy.next();
        this._destroy.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLWRhdGEuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZXN0aXRjaC9kcmF3ZXIvIiwic291cmNlcyI6WyJhcHAvY2xhc3Nlcy9kcmF3ZXItZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHM0MsTUFBTSxPQUFPLFVBQVU7SUFNckIsWUFBWSxPQUFZLEVBQUU7UUFIbEIsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO1FBQ2pDLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBR3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQVksRUFBRTtRQUMxQyxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxPQUFPLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtZQUMzQixHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVE7Z0JBQ2xCLElBQUksT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssVUFBVTt1QkFDckMsUUFBUSxLQUFLLE9BQU87dUJBQ3BCLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxVQUFVLEVBQ3pDO29CQUNBLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUN6QjtxQkFBTTtvQkFDTCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQztZQUVELEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUs7Z0JBQ3pCLElBQUksUUFBUSxLQUFLLE9BQU8sRUFBRTtvQkFDeEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQ2hDO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQzFCO2dCQUVELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUVELEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUTtnQkFDbEIsT0FBTyxRQUFRLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNsQyxDQUFDO1lBRUQsT0FBTyxDQUFDLE1BQU07Z0JBQ1osT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxDQUFDO1lBRUQsU0FBUyxDQUFDLE1BQU07Z0JBQ2QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxDQUFDO1lBRUQsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVE7Z0JBQ3ZDLE9BQU8sTUFBTSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDakUsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU0sUUFBUTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRU0sUUFBUSxDQUFDLEtBQUs7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuXG5leHBvcnQgY2xhc3MgRHJhd2VyRGF0YSB7XG5cbiAgcHJpdmF0ZSBfZGF0YTtcbiAgcHJpdmF0ZSBfZGF0YUNoYW5nZSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgcHJpdmF0ZSBfZGVzdHJveSA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoZGF0YTogYW55ID0ge30pIHtcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlV2l0aFByb3h5KGRhdGE6IGFueSA9IHt9KSB7XG4gICAgY29uc3QgZHJhd2VyRGF0YSA9IG5ldyBEcmF3ZXJEYXRhKGRhdGEpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm94eShkcmF3ZXJEYXRhLCB7XG4gICAgICBnZXQodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtwcm9wZXJ0eV0gPT09ICdmdW5jdGlvbidcbiAgICAgICAgICB8fCBwcm9wZXJ0eSA9PT0gJ19kYXRhJ1xuICAgICAgICAgIHx8IHRhcmdldFtwcm9wZXJ0eV0gaW5zdGFuY2VvZiBPYnNlcnZhYmxlXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0YXJnZXRbcHJvcGVydHldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0YXJnZXQuX2RhdGFbcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBzZXQodGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5ICE9PSAnX2RhdGEnKSB7XG4gICAgICAgICAgdGFyZ2V0Ll9kYXRhW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcblxuICAgICAgaGFzKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5IGluIHRhcmdldC5fZGF0YTtcbiAgICAgIH0sXG5cbiAgICAgIG93bktleXModGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQuX2RhdGEpO1xuICAgICAgfSxcblxuICAgICAgZW51bWVyYXRlKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGFyZ2V0Ll9kYXRhKTtcbiAgICAgIH0sXG5cbiAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5fZGF0YSwgcHJvcGVydHkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IGRhdGFDaGFuZ2UkKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9kYXRhQ2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMuX2RhdGEgPSB2YWx1ZTtcbiAgICB0aGlzLl9kYXRhQ2hhbmdlLm5leHQodGhpcy5fZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9kZXN0cm95Lm5leHQoKTtcbiAgICB0aGlzLl9kZXN0cm95LmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==