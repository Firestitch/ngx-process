import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, OnDestroy } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../classes/drawer-ref';
const MAIN_DRAWER_DEFAULT_WIDTH = 500;
const SIDE_DRAWER_DEFAULT_WIDTH = 200;
const SIDE_RESIZE_BAR_WIDTH = 25;
const MAIN_RESIZE_ACTION_BAR_WIDTH = 40;
let DrawerSizeController = class DrawerSizeController {
    constructor(_drawerRef, _ngZone) {
        this._drawerRef = _drawerRef;
        this._ngZone = _ngZone;
        this._sideOpened = false;
        this._borderPadding = 0;
        this._destroy$ = new Subject();
        this._initDefaultConfigs();
        this._updateScreenWidth();
        this._listenWindowResize();
        this._listenSideToggle();
    }
    get mainElRef() {
        return this._mainElRef;
    }
    get sideElRef() {
        return this._sideElRef;
    }
    get mainConfig() {
        return this._mainConfig;
    }
    get sideConfig() {
        return this._sideConfig;
    }
    get screenWidth() {
        return this._screenWidth;
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    registerElRef(el) {
        if (el.type === 'main') {
            this._registerMainRef(el);
        }
        else if (el.type === 'side') {
            this._registerSideRef(el);
        }
        else {
            throw Error('Unrecognized resize element type');
        }
    }
    getInitialWidth(type) {
        if (type === 'main') {
            return this.mainConfig.initial;
        }
        else if (type === 'side') {
            return this.sideConfig.initial;
        }
        else {
            return void 0;
        }
    }
    getMinWidth(type) {
        if (type === 'main') {
            return this.mainConfig.min;
        }
        else if (type === 'side') {
            return this.sideConfig.min;
        }
        else {
            return void 0;
        }
    }
    getMaxWidth(type) {
        if (type === 'main') {
            return this.mainConfig.max;
        }
        else if (type === 'side') {
            return this.sideConfig.max;
        }
        else {
            return void 0;
        }
    }
    /**
     * Update width from outside with all calculations to be done
     * @param width
     */
    updateMainWidth(width) {
        const sideWidth = (this.sideElRef && this.sideElRef.width) || 0;
        this.mainElRef.updateWidth(sideWidth + width);
    }
    /**
     * Update width from outside with all calculations to be done
     * @param width
     */
    updateSideWidth(width) {
        if (this.sideElRef) {
            const currentWidth = this.mainElRef.width - this.sideElRef.width;
            this.mainElRef.updateWidth(currentWidth + width);
            this.sideElRef.updateWidth(width);
        }
    }
    /**
     * Push current drawer to be visible under new one opened
     * @param inFrontDrawer
     */
    pushMainWidth(inFrontDrawer) {
        const inFrontDrawerTotalWidth = inFrontDrawer.resizeController.mainElRef.width + MAIN_RESIZE_ACTION_BAR_WIDTH;
        if (this.mainElRef.width <= inFrontDrawerTotalWidth) {
            this.updateMainWidth(inFrontDrawerTotalWidth);
        }
    }
    /**
     * Listen for browser resize and update restrictions
     */
    _listenWindowResize() {
        this._ngZone.runOutsideAngular(() => {
            fromEvent(window, 'resize')
                .pipe(debounceTime(50), takeUntil(this._destroy$))
                .subscribe(() => {
                this._updateScreenWidth();
                this._updateMinMaxStyles();
            });
        });
    }
    /**
     * Copy initial configs or set default values
     */
    _initDefaultConfigs() {
        this._mainConfig =
            (this._drawerRef.drawerConfig.width && this._drawerRef.drawerConfig.width.main)
                || {};
        this._mainConfig.initial = this._mainConfig.initial || MAIN_DRAWER_DEFAULT_WIDTH;
        this._sideConfig =
            (this._drawerRef.drawerConfig.width && this._drawerRef.drawerConfig.width.side)
                || {};
        this._sideConfig.initial = this._sideConfig.initial || SIDE_DRAWER_DEFAULT_WIDTH;
    }
    _registerMainRef(el) {
        this._mainElRef = el;
    }
    _registerSideRef(el) {
        this._sideElRef = el;
    }
    /**
     * Update current window size
     */
    _updateScreenWidth() {
        this._screenWidth = (window.innerWidth - this._borderPadding);
    }
    /**
     * Update min&max css props for containers
     */
    _updateMinMaxStyles() {
        this.mainElRef.setMinMaxStyles();
        if (this.sideElRef) {
            this.sideElRef.setMinMaxStyles();
        }
    }
    _listenSideToggle() {
        this._drawerRef.sideToggle$
            .pipe(takeUntil(this._destroy$))
            .subscribe((opened) => {
            if (this._sideOpened === opened) {
                return;
            }
            this._sideOpened = opened;
            if (opened) {
                const currentWidth = this.mainElRef.width;
                const sideWidth = this.getInitialWidth('side');
                this._mainElRef.updateWidth(currentWidth + sideWidth + SIDE_RESIZE_BAR_WIDTH);
            }
            else {
                const actualSideWidth = this.sideElRef.fsDrawerResizer.getBoundingClientRect().width;
                const mainWidth = this.mainElRef.width - actualSideWidth - SIDE_RESIZE_BAR_WIDTH;
                this._mainElRef.updateWidth(mainWidth);
            }
        });
    }
};
DrawerSizeController.ctorParameters = () => [
    { type: DrawerRef },
    { type: NgZone }
];
DrawerSizeController = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [DrawerRef,
        NgZone])
], DrawerSizeController);
export { DrawerSizeController };
//# sourceMappingURL=data:application/json;base64,