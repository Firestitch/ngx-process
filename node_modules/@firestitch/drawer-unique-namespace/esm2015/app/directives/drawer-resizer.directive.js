import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, NgZone, OnDestroy, OnInit, Renderer2, } from '@angular/core';
import { Subject } from 'rxjs';
import { DrawerSizeController } from '../classes/drawer-size-controller';
let FsDrawerResizerDirective = class FsDrawerResizerDirective {
    constructor(_el, _renderer, _ngZone) {
        this._el = _el;
        this._renderer = _renderer;
        this._ngZone = _ngZone;
        this.fsDrawerResizer = this._el.nativeElement;
        this.direction = 'left';
        this.resizable = true;
        this._dragStartHandler = this._dragStart.bind(this);
        this._dragHandler = this._drag.bind(this);
        this._dragEndHandler = this._dragEnd.bind(this);
        this._x = 0;
        this._width = 0;
        this._actionsWidth = 0;
        this._destroy$ = new Subject();
    }
    get width() {
        return this._width;
    }
    get minWidth() {
        const minWidth = this.sizeController.getMinWidth(this.type);
        if (minWidth && minWidth >= 0) {
            if (minWidth > this.sizeController.screenWidth) {
                return this.sizeController.screenWidth;
            }
            else {
                return minWidth;
            }
        }
    }
    get maxWidth() {
        const maxWidth = this.sizeController.getMaxWidth(this.type);
        let parentContainerWidth = null;
        if (this.parentContainer) {
            parentContainerWidth = this._getElementWidth(this.parentContainer.nativeElement);
        }
        if (parentContainerWidth !== null) {
            return !maxWidth || maxWidth >= parentContainerWidth
                ? parentContainerWidth - this._actionsWidth * 2
                : maxWidth;
        }
        else {
            return !maxWidth || maxWidth >= this.sizeController.screenWidth
                ? this.sizeController.screenWidth
                : maxWidth;
        }
    }
    ngOnInit() {
        this.sizeController.registerElRef(this);
        if (this.resizable) {
            this._ngZone.runOutsideAngular(() => {
                this._el.nativeElement.addEventListener('mousedown', this._dragStartHandler, false);
                this._el.nativeElement.addEventListener('touchstart', this._dragStartHandler, false);
            });
            if (this.actionsContainer) {
                this._actionsWidth = this._getElementWidth(this.actionsContainer.nativeElement);
            }
            this.setMinMaxStyles();
            const minWidth = this.sizeController.getMinWidth(this.type);
            let width = this.sizeController.getInitialWidth(this.type)
                || this._getElementWidth(this.fsDrawerResizer);
            if (width < minWidth) {
                width = minWidth;
            }
            this.updateWidth(width);
        }
    }
    updateWidth(width) {
        this._width = width;
        requestAnimationFrame(() => {
            this._renderer.setStyle(this.fsDrawerResizer, 'width', `${width}px`);
        });
    }
    ngOnDestroy() {
        this._el.nativeElement.removeEventListener('mousedown', this._dragStartHandler, false);
        this._el.nativeElement.removeEventListener('touchstart', this._dragStartHandler, false);
        this._destroy$.next();
        this._destroy$.complete();
    }
    /**
     * Set inline styles min/max width
     */
    setMinMaxStyles() {
        requestAnimationFrame(() => {
            this._renderer.setStyle(this.fsDrawerResizer, 'min-width', `${this.minWidth}px`);
            this._renderer.setStyle(this.fsDrawerResizer, 'max-width', `${this.maxWidth}px`);
        });
    }
    /**
     * Subscribe to move events and init base dimensions/restrictions
     * @param event { MouseEvent }
     */
    _dragStart(event) {
        this._x = this._getClientX(event);
        this._width = this._getElementWidth(this.fsDrawerResizer);
        this.setMinMaxStyles();
        document.addEventListener('touchmove', this._dragHandler, false);
        document.addEventListener('touchend', this._dragEndHandler, false);
        document.addEventListener('mousemove', this._dragHandler, false);
        document.addEventListener('mouseup', this._dragEndHandler, false);
    }
    /**
     * Update coordinates during drag
     * @param event
     */
    _drag(event) {
        const clientX = this._getClientX(event);
        const predictedWidth = this._calcWidth(this.direction, clientX);
        this._updatePosition(clientX, predictedWidth);
        this._emitResizeEvent();
    }
    /**
     * Remove listeners when drag finished
     * @param event
     */
    _dragEnd(event) {
        document.removeEventListener('mousemove', this._dragHandler, false);
        document.removeEventListener('mouseup', this._dragEndHandler, false);
        document.removeEventListener('touchmove', this._dragHandler, false);
        document.removeEventListener('touchend', this._dragEndHandler, false);
    }
    /**
     *
     * @param event
     */
    _getClientX(event) {
        return event.touches ? event.touches[0].clientX : event.clientX;
    }
    /**
     * Will return width of element
     * @param el
     */
    _getElementWidth(el) {
        return el.getBoundingClientRect().width;
    }
    /**
     * Update width and position of target element
     * @param clientX
     * @param width
     */
    _updatePosition(clientX, width) {
        this._x = clientX;
        this.updateWidth(width < 0 ? 0 : width);
    }
    /**
     * Calc new width based on offset from previous position
     * @param direction
     * @param clientX
     */
    _calcWidth(direction, clientX) {
        const directionSign = direction === 'left' ? -1 : 1;
        return this._width + (this._x - clientX) * directionSign;
    }
    /**
     * Resize event for Window
     */
    _emitResizeEvent() {
        const resizeEvent = window.document.createEvent('UIEvents');
        resizeEvent.initEvent('resize', true, false);
        window.dispatchEvent(resizeEvent);
    }
};
FsDrawerResizerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], FsDrawerResizerDirective.prototype, "fsDrawerResizer", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FsDrawerResizerDirective.prototype, "type", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FsDrawerResizerDirective.prototype, "direction", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FsDrawerResizerDirective.prototype, "resizable", void 0);
__decorate([
    Input(),
    __metadata("design:type", ElementRef)
], FsDrawerResizerDirective.prototype, "parentContainer", void 0);
__decorate([
    Input(),
    __metadata("design:type", ElementRef)
], FsDrawerResizerDirective.prototype, "actionsContainer", void 0);
__decorate([
    Input(),
    __metadata("design:type", DrawerSizeController)
], FsDrawerResizerDirective.prototype, "sizeController", void 0);
FsDrawerResizerDirective = __decorate([
    Directive({
        selector: '[fsDrawerResizer]',
        host: {
            '[style.cursor]': '"col-resize"',
        }
    }),
    __metadata("design:paramtypes", [ElementRef,
        Renderer2,
        NgZone])
], FsDrawerResizerDirective);
export { FsDrawerResizerDirective };
//# sourceMappingURL=data:application/json;base64,