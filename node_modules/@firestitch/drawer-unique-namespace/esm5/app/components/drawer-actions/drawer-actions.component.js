import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit, } from '@angular/core';
import { Subject } from 'rxjs';
import { FsDrawerAction } from '../../helpers/action-type.enum';
import { DrawerRef } from '../../classes/drawer-ref';
import { FsDrawerMenuService } from '../../services/drawer-menu.service';
var FsDrawerActionsComponent = /** @class */ (function () {
    function FsDrawerActionsComponent(_drawerRef, _drawerMenu, _cdRef) {
        this._drawerRef = _drawerRef;
        this._drawerMenu = _drawerMenu;
        this._cdRef = _cdRef;
        this._destroy$ = new Subject();
    }
    FsDrawerActionsComponent.prototype.ngOnInit = function () {
    };
    FsDrawerActionsComponent.prototype.ngOnDestroy = function () {
        this._destroy$.next();
        this._destroy$.complete();
    };
    FsDrawerActionsComponent.prototype.actionClick = function (action, event) {
        var hasComponentType = action.type === FsDrawerAction.Component;
        var hasMenuType = action.type === FsDrawerAction.Menu;
        if (hasComponentType) {
            var menuRef = this._drawerMenu.create(action.component, event.srcElement, action);
            this._drawerRef.addMenuRef(action.menuRefName, menuRef);
            var params = {
                event: event,
                action: action,
                drawerRef: this._drawerRef,
                menuRef: menuRef
            };
            // Call click
            action.click.call(null, params);
            if (action.closeSide) {
                this._drawerRef.closeSide();
            }
        }
        else if (action.click) {
            var params = { event: event, action: action };
            action.click.call(null, params);
        }
        if (action.close) {
            this._drawerRef.close();
        }
        if (action.toggle && ((!hasComponentType && !hasMenuType) || action.closeSide)) {
            if (this._drawerRef.isSideOpen && this._drawerRef.activeAction === action.name) {
                this._drawerRef.toggleSide();
            }
            else {
                this._drawerRef.setActiveAction(action.name);
            }
        }
    };
    FsDrawerActionsComponent.ctorParameters = function () { return [
        { type: DrawerRef },
        { type: FsDrawerMenuService },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], FsDrawerActionsComponent.prototype, "actions", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FsDrawerActionsComponent.prototype, "activeAction", void 0);
    FsDrawerActionsComponent = __decorate([
        Component({
            selector: 'fs-drawer-actions',
            template: "<div class=\"actions-container\">\n  <div *ngFor=\"let action of actions\" class=\"action-btn\">\n    <fs-drawer-action-item [action]=\"action\"\n                           [activeAction]=\"activeAction\"\n                           (actionClicked)=\"actionClick(action, $event)\">\n    </fs-drawer-action-item>\n  </div>\n</div>\n\n<div class=\"drag-icon\">\n  <a mat-icon-button class=\"resize-icon\"><mat-icon>drag_indicator</mat-icon></a>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:flex}.actions-container{flex:0}.drag-icon{display:flex;flex:1;align-items:center}"]
        }),
        __metadata("design:paramtypes", [DrawerRef,
            FsDrawerMenuService,
            ChangeDetectorRef])
    ], FsDrawerActionsComponent);
    return FsDrawerActionsComponent;
}());
export { FsDrawerActionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVzdGl0Y2gvZHJhd2VyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBvbmVudHMvZHJhd2VyLWFjdGlvbnMvZHJhd2VyLWFjdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQzFDLFNBQVMsRUFDVCxLQUFLLEVBQ0wsU0FBUyxFQUNULE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFckQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFTekU7SUFNRSxrQ0FDVSxVQUEwQixFQUMxQixXQUFnQyxFQUNoQyxNQUF5QjtRQUZ6QixlQUFVLEdBQVYsVUFBVSxDQUFnQjtRQUMxQixnQkFBVyxHQUFYLFdBQVcsQ0FBcUI7UUFDaEMsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFMM0IsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFNckMsQ0FBQztJQUVHLDJDQUFRLEdBQWY7SUFDQSxDQUFDO0lBRU0sOENBQVcsR0FBbEI7UUFDRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVNLDhDQUFXLEdBQWxCLFVBQW1CLE1BQU0sRUFBRSxLQUFLO1FBQzlCLElBQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsU0FBUyxDQUFDO1FBQ2xFLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEtBQUssY0FBYyxDQUFDLElBQUksQ0FBQztRQUV4RCxJQUFJLGdCQUFnQixFQUFFO1lBQ3BCLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUVwRixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRXhELElBQU0sTUFBTSxHQUFHO2dCQUNiLEtBQUssRUFBRSxLQUFLO2dCQUNaLE1BQU0sRUFBRSxNQUFNO2dCQUNkLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVTtnQkFDMUIsT0FBTyxFQUFFLE9BQU87YUFDakIsQ0FBQztZQUNGLGFBQWE7WUFDYixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFFaEMsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUNwQixJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQzdCO1NBQ0Y7YUFBTSxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDdkIsSUFBTSxNQUFNLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUNoRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDakM7UUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN6QjtRQUVELElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUM5RSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Z0JBQzlFLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLENBQUM7YUFDOUI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzlDO1NBQ0Y7SUFDSCxDQUFDOztnQkFsRHFCLFNBQVM7Z0JBQ1IsbUJBQW1CO2dCQUN4QixpQkFBaUI7O0lBUjFCO1FBQVIsS0FBSyxFQUFFOzs2REFBMEI7SUFDekI7UUFBUixLQUFLLEVBQUU7O2tFQUE2QjtJQUYxQix3QkFBd0I7UUFOcEMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixnZEFBOEM7WUFFOUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O1NBQ2hELENBQUM7eUNBUXNCLFNBQVM7WUFDUixtQkFBbUI7WUFDeEIsaUJBQWlCO09BVHhCLHdCQUF3QixDQTJEcEM7SUFBRCwrQkFBQztDQUFBLEFBM0RELElBMkRDO1NBM0RZLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEZzRHJhd2VyQWN0aW9uIH0gZnJvbSAnLi4vLi4vaGVscGVycy9hY3Rpb24tdHlwZS5lbnVtJztcbmltcG9ydCB7IERyYXdlclJlZiB9IGZyb20gJy4uLy4uL2NsYXNzZXMvZHJhd2VyLXJlZic7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuLi8uLi9tb2RlbHMvYWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IEZzRHJhd2VyTWVudVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kcmF3ZXItbWVudS5zZXJ2aWNlJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmcy1kcmF3ZXItYWN0aW9ucycsXG4gIHRlbXBsYXRlVXJsOiAnLi9kcmF3ZXItYWN0aW9ucy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWyAnLi9kcmF3ZXItYWN0aW9ucy5jb21wb25lbnQuc2NzcycgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEZzRHJhd2VyQWN0aW9uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgcHVibGljIGFjdGlvbnM6IEFjdGlvbltdO1xuICBASW5wdXQoKSBwdWJsaWMgYWN0aXZlQWN0aW9uOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfZGVzdHJveSQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgX2RyYXdlclJlZjogRHJhd2VyUmVmPGFueT4sXG4gICAgcHJpdmF0ZSBfZHJhd2VyTWVudTogRnNEcmF3ZXJNZW51U2VydmljZSxcbiAgICBwcml2YXRlIF9jZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICkge31cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5fZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwdWJsaWMgYWN0aW9uQ2xpY2soYWN0aW9uLCBldmVudCkge1xuICAgIGNvbnN0IGhhc0NvbXBvbmVudFR5cGUgPSBhY3Rpb24udHlwZSA9PT0gRnNEcmF3ZXJBY3Rpb24uQ29tcG9uZW50O1xuICAgIGNvbnN0IGhhc01lbnVUeXBlID0gYWN0aW9uLnR5cGUgPT09IEZzRHJhd2VyQWN0aW9uLk1lbnU7XG5cbiAgICBpZiAoaGFzQ29tcG9uZW50VHlwZSkge1xuICAgICAgY29uc3QgbWVudVJlZiA9IHRoaXMuX2RyYXdlck1lbnUuY3JlYXRlKGFjdGlvbi5jb21wb25lbnQsIGV2ZW50LnNyY0VsZW1lbnQsIGFjdGlvbik7XG5cbiAgICAgIHRoaXMuX2RyYXdlclJlZi5hZGRNZW51UmVmKGFjdGlvbi5tZW51UmVmTmFtZSwgbWVudVJlZik7XG5cbiAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgZHJhd2VyUmVmOiB0aGlzLl9kcmF3ZXJSZWYsXG4gICAgICAgIG1lbnVSZWY6IG1lbnVSZWZcbiAgICAgIH07XG4gICAgICAvLyBDYWxsIGNsaWNrXG4gICAgICBhY3Rpb24uY2xpY2suY2FsbChudWxsLCBwYXJhbXMpO1xuXG4gICAgICBpZiAoYWN0aW9uLmNsb3NlU2lkZSkge1xuICAgICAgICB0aGlzLl9kcmF3ZXJSZWYuY2xvc2VTaWRlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhY3Rpb24uY2xpY2spIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IHsgZXZlbnQ6IGV2ZW50LCBhY3Rpb246IGFjdGlvbiB9O1xuICAgICAgYWN0aW9uLmNsaWNrLmNhbGwobnVsbCwgcGFyYW1zKTtcbiAgICB9XG5cbiAgICBpZiAoYWN0aW9uLmNsb3NlKSB7XG4gICAgICB0aGlzLl9kcmF3ZXJSZWYuY2xvc2UoKTtcbiAgICB9XG5cbiAgICBpZiAoYWN0aW9uLnRvZ2dsZSAmJiAoKCFoYXNDb21wb25lbnRUeXBlICYmICFoYXNNZW51VHlwZSkgfHwgYWN0aW9uLmNsb3NlU2lkZSkpIHtcbiAgICAgIGlmICh0aGlzLl9kcmF3ZXJSZWYuaXNTaWRlT3BlbiAmJiB0aGlzLl9kcmF3ZXJSZWYuYWN0aXZlQWN0aW9uID09PSBhY3Rpb24ubmFtZSkge1xuICAgICAgICB0aGlzLl9kcmF3ZXJSZWYudG9nZ2xlU2lkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZHJhd2VyUmVmLnNldEFjdGl2ZUFjdGlvbihhY3Rpb24ubmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==