import { __decorate, __metadata } from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef, } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../../classes/drawer-ref';
import { FsDrawerActionDirective } from '../../directives/drawer-action.directive';
var FsDrawerSideComponent = /** @class */ (function () {
    function FsDrawerSideComponent(_cdRef, _renderer, _elRef) {
        this._cdRef = _cdRef;
        this._renderer = _renderer;
        this._elRef = _elRef;
        this.classSide = true;
        this.activeTemplate = null;
        this._hidden = false;
        this._destroy$ = new EventEmitter();
    }
    Object.defineProperty(FsDrawerSideComponent.prototype, "hidden", {
        set: function (value) {
            this._hidden = value;
            if (this._hidden) {
                this._renderer.setAttribute(this._elRef.nativeElement, 'hidden', 'true');
            }
            else {
                this._renderer.removeAttribute(this._elRef.nativeElement, 'hidden');
            }
        },
        enumerable: true,
        configurable: true
    });
    FsDrawerSideComponent.prototype.ngOnInit = function () {
        this.hidden = true;
        if (!this.drawer) {
            console.error('Drawer reference is null for @Input("fsDrawerSide")');
        }
        this._subscribeToActionChanges();
    };
    FsDrawerSideComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            // Check current side status
            if (_this.drawer) {
                _this.hidden = !_this.drawer.isSideOpen;
            }
            _this._updateActiveActionTemplate();
        });
    };
    FsDrawerSideComponent.prototype.ngOnDestroy = function () {
        this._destroy$.emit();
        this._destroy$.complete();
    };
    FsDrawerSideComponent.prototype._subscribeToActionChanges = function () {
        var _this = this;
        if (this.drawer) {
            this.drawer.sideToggle$
                .pipe(takeUntil(this._destroy$))
                .subscribe(function () {
                _this.hidden = !_this.drawer.isSideOpen;
                _this._updateActiveActionTemplate();
                _this._cdRef.detectChanges();
            });
        }
    };
    FsDrawerSideComponent.prototype._updateActiveActionTemplate = function () {
        if (this.drawer) {
            var activatedAction_1 = this.drawer.activeAction;
            if (this.drawer.isSideOpen && activatedAction_1) {
                var selectedActionIndex = this.actions
                    .toArray()
                    .findIndex(function (action) { return action.name === activatedAction_1; });
                this.activeTemplate = this.actionsTemplates.toArray()[selectedActionIndex];
            }
            else {
                this.activeTemplate = null;
            }
        }
    };
    FsDrawerSideComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    __decorate([
        Input('fsDrawerSide'),
        __metadata("design:type", DrawerRef)
    ], FsDrawerSideComponent.prototype, "drawer", void 0);
    __decorate([
        HostBinding('class.side'),
        __metadata("design:type", Object)
    ], FsDrawerSideComponent.prototype, "classSide", void 0);
    __decorate([
        ContentChildren(FsDrawerActionDirective),
        __metadata("design:type", QueryList)
    ], FsDrawerSideComponent.prototype, "actions", void 0);
    __decorate([
        ContentChildren(FsDrawerActionDirective, { read: TemplateRef }),
        __metadata("design:type", QueryList)
    ], FsDrawerSideComponent.prototype, "actionsTemplates", void 0);
    FsDrawerSideComponent = __decorate([
        Component({
            selector: '[fsDrawerSide]',
            template: "<ng-container [ngSwitch]=\"drawer.drawerConfig.position\" *ngIf=\"activeTemplate\">\n  <ng-container *ngSwitchCase=\"'right'\">\n    <div class=\"side-container\" #sideContainer>\n      <div class=\"side-content\">\n        <ng-template [ngTemplateOutlet]=\"activeTemplate\"></ng-template>\n      </div>\n    </div>\n    <div class=\"resize-side\"\n         resizable=\"true\"\n         direction=\"left\"\n         type=\"side\"\n         [fsDrawerResizer]=\"sideContainer\"\n         [resizable]=\"drawer.drawerConfig.resizable\"\n         [sizeController]=\"drawer.resizeController\"\n         [parentContainer]=\"drawer.drawerContentContainer\"\n         [actionsContainer]=\"drawer.drawerActionsContainer\"\n    >\n      <a mat-icon-button class=\"resize-icon\"><mat-icon>drag_indicator</mat-icon></a>\n    </div>\n  </ng-container>\n  <ng-container *ngSwitchCase=\"'left'\">\n    <div class=\"resize-side\"\n         resizable=\"true\"\n         direction=\"right\"\n         [fsDrawerResizer]=\"sideContainer\"\n    >\n    <a mat-icon-button class=\"resize-icon\"><mat-icon>drag_indicator</mat-icon></a>\n    </div>\n    <div class=\"side-container\" #sideContainer>\n      <div class=\"side-content\">\n        <ng-template [ngTemplateOutlet]=\"activeTemplate\"></ng-template>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".resize-icon{width:24px;height:24px;line-height:24px}.resize-icon span{width:24px}"]
        }),
        __metadata("design:paramtypes", [ChangeDetectorRef,
            Renderer2,
            ElementRef])
    ], FsDrawerSideComponent);
    return FsDrawerSideComponent;
}());
export { FsDrawerSideComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLXNpZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVzdGl0Y2gvZHJhd2VyLyIsInNvdXJjZXMiOlsiYXBwL2NvbXBvbmVudHMvZHJhd2VyLXNpZGUvZHJhd2VyLXNpZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsYUFBYSxFQUNiLHVCQUF1QixFQUFFLGlCQUFpQixFQUMxQyxTQUFTLEVBQ1QsZUFBZSxFQUNmLFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLEtBQUssRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLFNBQVMsRUFDVCxTQUFTLEVBQ1QsV0FBVyxHQUNaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFXbkY7SUFnQkUsK0JBQ1UsTUFBeUIsRUFDekIsU0FBb0IsRUFDcEIsTUFBa0I7UUFGbEIsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7UUFDekIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBZk0sY0FBUyxHQUFHLElBQUksQ0FBQztRQU81QyxtQkFBYyxHQUFxQixJQUFJLENBQUM7UUFFdkMsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNoQixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQU1wQyxDQUFDO0lBRUosc0JBQVcseUNBQU07YUFBakIsVUFBa0IsS0FBYztZQUM5QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUVyQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxF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LGlCQUFpQjtZQUNkLFNBQVM7WUFDWixVQUFVO09BbkJqQixxQkFBcUIsQ0F3RmpDO0lBQUQsNEJBQUM7Q0FBQSxBQXhGRCxJQXdGQztTQXhGWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFF1ZXJ5TGlzdCxcbiAgUmVuZGVyZXIyLFxuICBUZW1wbGF0ZVJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IERyYXdlclJlZiB9IGZyb20gJy4uLy4uL2NsYXNzZXMvZHJhd2VyLXJlZic7XG5pbXBvcnQgeyBGc0RyYXdlckFjdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvZHJhd2VyLWFjdGlvbi5kaXJlY3RpdmUnO1xuXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1tmc0RyYXdlclNpZGVdJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2RyYXdlci1zaWRlLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0eWxlVXJsczogW1xuICAgICcuL2RyYXdlci1zaWRlLmNvbXBvbmVudC5zY3NzJyxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgRnNEcmF3ZXJTaWRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgnZnNEcmF3ZXJTaWRlJykgcHVibGljIGRyYXdlcjogRHJhd2VyUmVmPGFueT47XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zaWRlJykgcHVibGljIGNsYXNzU2lkZSA9IHRydWU7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihGc0RyYXdlckFjdGlvbkRpcmVjdGl2ZSkgYWN0aW9uczogUXVlcnlMaXN0PEZzRHJhd2VyQWN0aW9uRGlyZWN0aXZlPjtcblxuICBAQ29udGVudENoaWxkcmVuKEZzRHJhd2VyQWN0aW9uRGlyZWN0aXZlLCB7IHJlYWQ6IFRlbXBsYXRlUmVmIH0pXG4gIGFjdGlvbnNUZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxUZW1wbGF0ZVJlZjxhbnk+PjtcblxuICBwdWJsaWMgYWN0aXZlVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4gPSBudWxsO1xuXG4gIHByaXZhdGUgX2hpZGRlbiA9IGZhbHNlO1xuICBwcml2YXRlIF9kZXN0cm95JCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9jZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIF9lbFJlZjogRWxlbWVudFJlZixcbiAgKSB7fVxuXG4gIHB1YmxpYyBzZXQgaGlkZGVuKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faGlkZGVuID0gdmFsdWU7XG5cbiAgICBpZiAodGhpcy5faGlkZGVuKSB7XG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5fZWxSZWYubmF0aXZlRWxlbWVudCwgJ2hpZGRlbicsICd0cnVlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLl9lbFJlZi5uYXRpdmVFbGVtZW50LCAnaGlkZGVuJyk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBuZ09uSW5pdCgpIHtcblxuICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcblxuICAgIGlmICghdGhpcy5kcmF3ZXIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RyYXdlciByZWZlcmVuY2UgaXMgbnVsbCBmb3IgQElucHV0KFwiZnNEcmF3ZXJTaWRlXCIpJyk7XG4gICAgfVxuXG4gICAgdGhpcy5fc3Vic2NyaWJlVG9BY3Rpb25DaGFuZ2VzKCk7XG4gIH1cblxuICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gQ2hlY2sgY3VycmVudCBzaWRlIHN0YXR1c1xuICAgICAgaWYgKHRoaXMuZHJhd2VyKSB7XG4gICAgICAgIHRoaXMuaGlkZGVuID0gIXRoaXMuZHJhd2VyLmlzU2lkZU9wZW47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3VwZGF0ZUFjdGl2ZUFjdGlvblRlbXBsYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fZGVzdHJveSQuZW1pdCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcml2YXRlIF9zdWJzY3JpYmVUb0FjdGlvbkNoYW5nZXMoKSB7XG4gICAgaWYgKHRoaXMuZHJhd2VyKSB7XG4gICAgICB0aGlzLmRyYXdlci5zaWRlVG9nZ2xlJFxuICAgICAgICAucGlwZShcbiAgICAgICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpLFxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaGlkZGVuID0gIXRoaXMuZHJhd2VyLmlzU2lkZU9wZW47XG4gICAgICAgICAgdGhpcy5fdXBkYXRlQWN0aXZlQWN0aW9uVGVtcGxhdGUoKTtcblxuICAgICAgICAgIHRoaXMuX2NkUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfdXBkYXRlQWN0aXZlQWN0aW9uVGVtcGxhdGUoKSB7XG4gICAgaWYgKHRoaXMuZHJhd2VyKSB7XG4gICAgICBjb25zdCBhY3RpdmF0ZWRBY3Rpb24gPSB0aGlzLmRyYXdlci5hY3RpdmVBY3Rpb247XG5cbiAgICAgIGlmICh0aGlzLmRyYXdlci5pc1NpZGVPcGVuICYmIGFjdGl2YXRlZEFjdGlvbikge1xuICAgICAgICBjb25zdCBzZWxlY3RlZEFjdGlvbkluZGV4ID0gdGhpcy5hY3Rpb25zXG4gICAgICAgICAgLnRvQXJyYXkoKVxuICAgICAgICAgIC5maW5kSW5kZXgoKGFjdGlvbikgPT4gYWN0aW9uLm5hbWUgPT09IGFjdGl2YXRlZEFjdGlvbik7XG5cbiAgICAgICAgdGhpcy5hY3RpdmVUZW1wbGF0ZSA9IHRoaXMuYWN0aW9uc1RlbXBsYXRlcy50b0FycmF5KClbc2VsZWN0ZWRBY3Rpb25JbmRleF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFjdGl2ZVRlbXBsYXRlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==