import { __extends } from "tslib";
import { FsDrawerAction } from '../helpers/action-type.enum';
import { BaseAction } from './base-action';
import { MenuAction } from './menu-action.model';
var Action = /** @class */ (function (_super) {
    __extends(Action, _super);
    function Action(data) {
        if (data === void 0) { data = {}; }
        var _this = _super.call(this, data) || this;
        _this._data = null;
        _this._close = false;
        _this._closeSide = true;
        _this._menuActions = [];
        _this._component = null;
        _this._menuRefName = null;
        _this._icon = data.icon || '';
        _this._type = data.type || '';
        _this._name = data.name || '';
        _this._toggle = data.toggle === void 0 ? true : data.toggle;
        _this._tooltip = data.tooltip || '';
        _this._close = !!data.close;
        _this._component = data.component || null;
        _this._data = data.data === void 0 ? {} : data.data;
        if (_this._type === FsDrawerAction.Component) {
            _this._menuRefName = data.name || data.icon;
        }
        if (_this._type === FsDrawerAction.Menu && data.closeSide === void 0) {
            _this._closeSide = false;
        }
        else {
            _this._closeSide = data.closeSide === void 0 ? true : !!data.closeSide;
        }
        if (Array.isArray(data.actions)) {
            _this._menuActions = data.actions.map(function (action) { return new MenuAction(action); });
        }
        return _this;
    }
    Object.defineProperty(Action.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (value) {
            this._icon = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "toggle", {
        get: function () {
            return this._toggle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "tooltip", {
        get: function () {
            return this._tooltip;
        },
        set: function (value) {
            this._tooltip = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "close", {
        get: function () {
            return this._close;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "closeSide", {
        get: function () {
            return this._closeSide;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "menuActions", {
        get: function () {
            return this._menuActions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "component", {
        get: function () {
            return this._component;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (value) {
            this._data = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "menuRefName", {
        get: function () {
            return this._menuRefName;
        },
        enumerable: true,
        configurable: true
    });
    Action.prototype.updateRouterLink = function (data) {
        if (this._visible) {
            _super.prototype.updateRouterLink.call(this, data);
            if (this._menuActions.length > 0) {
                this._menuActions.forEach(function (action) {
                    action.updateRouterLink(data);
                });
            }
        }
    };
    Action.prototype.checkVisibility = function (data) {
        _super.prototype.checkVisibility.call(this, data);
        if (this._menuActions.length > 0) {
            this._menuActions.forEach(function (action) {
                action.checkVisibility(data);
            });
        }
        if (this.menuActions.length > 0) {
            this._visible = this.menuActions.some(function (action) { return action.visible; });
        }
    };
    return Action;
}(BaseAction));
export { Action };
//# sourceMappingURL=data:application/json;base64,