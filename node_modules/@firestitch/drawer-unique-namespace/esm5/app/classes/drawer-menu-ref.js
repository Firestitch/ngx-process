import { __assign, __read, __spread } from "tslib";
import { Observable, Subject, zip } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var DrawerMenuRef = /** @class */ (function () {
    function DrawerMenuRef(_overlayRef, _dataFactory) {
        var _this = this;
        this._overlayRef = _overlayRef;
        this._dataFactory = _dataFactory;
        /** Subject for notifying the user that the menu has finished closing. */
        this._afterClosed$ = new Subject();
        /** Subject for notifying the user that the menu has started closing. */
        this._closeStart$ = new Subject();
        /** Destroy notifier **/
        this._destroy$ = new Subject();
        this._overlayRef.backdropClick()
            .pipe(takeUntil(this._destroy$))
            .subscribe(function () {
            _this.close();
        });
    }
    Object.defineProperty(DrawerMenuRef.prototype, "menuData", {
        /**
         * Getter for DRAWER_MENU_DATA for current drawer
         */
        get: function () {
            return __assign({}, this._dataFactory.getValue()); // Like immutable.... TODO switch to Immer
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerMenuRef.prototype, "containerRef", {
        /**
         * Set reference to menu container
         * @param value
         */
        set: function (value) {
            this._externalMenuContainerRef = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerMenuRef.prototype, "componentRef", {
        /**
         * Set reference to menu component
         * @param value
         */
        set: function (value) {
            this._externalMenuComponentRef = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerMenuRef.prototype, "dataChanged$", {
        /**
         * Gets an observable that is notified when data in DRAWER_DATA was changed
         */
        get: function () {
            return this._dataFactory.dataChange$;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Set value for DRAWER_DATA
     * @param data
     */
    DrawerMenuRef.prototype.dataChange = function (data) {
        this._dataFactory.setValue(data);
    };
    /**
     * Gets an observable that is notified when the dialog is finished closing.
     */
    DrawerMenuRef.prototype.afterClosed = function () {
        return this._afterClosed$.pipe(takeUntil(this._destroy$));
    };
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     */
    DrawerMenuRef.prototype.closeStart = function () {
        return this._closeStart$.pipe(takeUntil(this._destroy$));
    };
    /**
     * Close the menu.
     * @param result Optional result to return to the dialog opener.
     */
    DrawerMenuRef.prototype.close = function (result) {
        var _this = this;
        new Observable(function (observer) {
            if (_this._closeStart$.observers.length) {
                zip.apply(void 0, __spread(_this._closeStart$.observers.map(function (item) {
                    return Observable.create(function (closeObserver) {
                        item.next(closeObserver);
                    });
                }))).pipe(takeUntil(_this._destroy$))
                    .subscribe(function () {
                    observer.next();
                    observer.complete();
                }, function () {
                    observer.error();
                });
            }
            else {
                observer.next();
                observer.complete();
            }
        }).pipe(takeUntil(this._destroy$))
            .subscribe({
            next: function () {
                _this._result = result;
                _this._afterClosed$.next(result);
                _this.destroy();
            }
        });
    };
    DrawerMenuRef.prototype.destroy = function () {
        this._overlayRef.detachBackdrop();
        this._overlayRef.detach();
        this._externalMenuComponentRef && this._externalMenuComponentRef.destroy();
        this._dataFactory.destroy();
        this._destroy$.next();
        this._destroy$.complete();
    };
    return DrawerMenuRef;
}());
export { DrawerMenuRef };
//# sourceMappingURL=data:application/json;base64,