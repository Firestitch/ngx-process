import { __decorate, __metadata } from "tslib";
import { Injectable, NgZone, OnDestroy } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { DrawerRef } from '../classes/drawer-ref';
var MAIN_DRAWER_DEFAULT_WIDTH = 500;
var SIDE_DRAWER_DEFAULT_WIDTH = 200;
var SIDE_RESIZE_BAR_WIDTH = 25;
var MAIN_RESIZE_ACTION_BAR_WIDTH = 40;
var DrawerSizeController = /** @class */ (function () {
    function DrawerSizeController(_drawerRef, _ngZone) {
        this._drawerRef = _drawerRef;
        this._ngZone = _ngZone;
        this._sideOpened = false;
        this._borderPadding = 0;
        this._destroy$ = new Subject();
        this._initDefaultConfigs();
        this._updateScreenWidth();
        this._listenWindowResize();
        this._listenSideToggle();
    }
    Object.defineProperty(DrawerSizeController.prototype, "mainElRef", {
        get: function () {
            return this._mainElRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerSizeController.prototype, "sideElRef", {
        get: function () {
            return this._sideElRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerSizeController.prototype, "mainConfig", {
        get: function () {
            return this._mainConfig;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerSizeController.prototype, "sideConfig", {
        get: function () {
            return this._sideConfig;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerSizeController.prototype, "screenWidth", {
        get: function () {
            return this._screenWidth;
        },
        enumerable: true,
        configurable: true
    });
    DrawerSizeController.prototype.ngOnDestroy = function () {
        this._destroy$.next();
        this._destroy$.complete();
    };
    DrawerSizeController.prototype.registerElRef = function (el) {
        if (el.type === 'main') {
            this._registerMainRef(el);
        }
        else if (el.type === 'side') {
            this._registerSideRef(el);
        }
        else {
            throw Error('Unrecognized resize element type');
        }
    };
    DrawerSizeController.prototype.getInitialWidth = function (type) {
        if (type === 'main') {
            return this.mainConfig.initial;
        }
        else if (type === 'side') {
            return this.sideConfig.initial;
        }
        else {
            return void 0;
        }
    };
    DrawerSizeController.prototype.getMinWidth = function (type) {
        if (type === 'main') {
            return this.mainConfig.min;
        }
        else if (type === 'side') {
            return this.sideConfig.min;
        }
        else {
            return void 0;
        }
    };
    DrawerSizeController.prototype.getMaxWidth = function (type) {
        if (type === 'main') {
            return this.mainConfig.max;
        }
        else if (type === 'side') {
            return this.sideConfig.max;
        }
        else {
            return void 0;
        }
    };
    /**
     * Update width from outside with all calculations to be done
     * @param width
     */
    DrawerSizeController.prototype.updateMainWidth = function (width) {
        var sideWidth = (this.sideElRef && this.sideElRef.width) || 0;
        this.mainElRef.updateWidth(sideWidth + width);
    };
    /**
     * Update width from outside with all calculations to be done
     * @param width
     */
    DrawerSizeController.prototype.updateSideWidth = function (width) {
        if (this.sideElRef) {
            var currentWidth = this.mainElRef.width - this.sideElRef.width;
            this.mainElRef.updateWidth(currentWidth + width);
            this.sideElRef.updateWidth(width);
        }
    };
    /**
     * Push current drawer to be visible under new one opened
     * @param inFrontDrawer
     */
    DrawerSizeController.prototype.pushMainWidth = function (inFrontDrawer) {
        var inFrontDrawerTotalWidth = inFrontDrawer.resizeController.mainElRef.width + MAIN_RESIZE_ACTION_BAR_WIDTH;
        if (this.mainElRef.width <= inFrontDrawerTotalWidth) {
            this.updateMainWidth(inFrontDrawerTotalWidth);
        }
    };
    /**
     * Listen for browser resize and update restrictions
     */
    DrawerSizeController.prototype._listenWindowResize = function () {
        var _this = this;
        this._ngZone.runOutsideAngular(function () {
            fromEvent(window, 'resize')
                .pipe(debounceTime(50), takeUntil(_this._destroy$))
                .subscribe(function () {
                _this._updateScreenWidth();
                _this._updateMinMaxStyles();
            });
        });
    };
    /**
     * Copy initial configs or set default values
     */
    DrawerSizeController.prototype._initDefaultConfigs = function () {
        this._mainConfig =
            (this._drawerRef.drawerConfig.width && this._drawerRef.drawerConfig.width.main)
                || {};
        this._mainConfig.initial = this._mainConfig.initial || MAIN_DRAWER_DEFAULT_WIDTH;
        this._sideConfig =
            (this._drawerRef.drawerConfig.width && this._drawerRef.drawerConfig.width.side)
                || {};
        this._sideConfig.initial = this._sideConfig.initial || SIDE_DRAWER_DEFAULT_WIDTH;
    };
    DrawerSizeController.prototype._registerMainRef = function (el) {
        this._mainElRef = el;
    };
    DrawerSizeController.prototype._registerSideRef = function (el) {
        this._sideElRef = el;
    };
    /**
     * Update current window size
     */
    DrawerSizeController.prototype._updateScreenWidth = function () {
        this._screenWidth = (window.innerWidth - this._borderPadding);
    };
    /**
     * Update min&max css props for containers
     */
    DrawerSizeController.prototype._updateMinMaxStyles = function () {
        this.mainElRef.setMinMaxStyles();
        if (this.sideElRef) {
            this.sideElRef.setMinMaxStyles();
        }
    };
    DrawerSizeController.prototype._listenSideToggle = function () {
        var _this = this;
        this._drawerRef.sideToggle$
            .pipe(takeUntil(this._destroy$))
            .subscribe(function (opened) {
            if (_this._sideOpened === opened) {
                return;
            }
            _this._sideOpened = opened;
            if (opened) {
                var currentWidth = _this.mainElRef.width;
                var sideWidth = _this.getInitialWidth('side');
                _this._mainElRef.updateWidth(currentWidth + sideWidth + SIDE_RESIZE_BAR_WIDTH);
            }
            else {
                var actualSideWidth = _this.sideElRef.fsDrawerResizer.getBoundingClientRect().width;
                var mainWidth = _this.mainElRef.width - actualSideWidth - SIDE_RESIZE_BAR_WIDTH;
                _this._mainElRef.updateWidth(mainWidth);
            }
        });
    };
    DrawerSizeController.ctorParameters = function () { return [
        { type: DrawerRef },
        { type: NgZone }
    ]; };
    DrawerSizeController = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [DrawerRef,
            NgZone])
    ], DrawerSizeController);
    return DrawerSizeController;
}());
export { DrawerSizeController };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLXNpemUtY29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXJlc3RpdGNoL2RyYXdlci8iLCJzb3VyY2VzIjpbImFwcC9jbGFzc2VzL2RyYXdlci1zaXplLWNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQyxPQUFPLEVBQUUsWUFBWSxFQUFTLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWhFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUlsRCxJQUFNLHlCQUF5QixHQUFHLEdBQUcsQ0FBQztBQUN0QyxJQUFNLHlCQUF5QixHQUFHLEdBQUcsQ0FBQztBQUN0QyxJQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUNqQyxJQUFNLDRCQUE0QixHQUFHLEVBQUUsQ0FBQztBQUd4QztJQWVFLDhCQUNVLFVBQTBCLEVBQzFCLE9BQWU7UUFEZixlQUFVLEdBQVYsVUFBVSxDQUFnQjtRQUMxQixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBVGpCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBR1gsbUJBQWMsR0FBRyxDQUFDLENBQUM7UUFFNUIsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFNdEMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELHNCQUFXLDJDQUFTO2FBQXBCO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3pCLENBQUM7OztPQUFBO0lBRUQsc0JB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SSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFFL0MsS0FBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsWUFBWSxHQUFHLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxDQUFDO2FBQy9FO2lCQUFNO2dCQUNMLElBQU0sZUFBZSxHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBSyxDQUFDO2dCQUNyRixJQUFNLFNBQVMsR0FBRyxLQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxlQUFlLEdBQUcscUJBQXFCLENBQUM7Z0JBRWpGLEtBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3hDO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDOztnQkEvTHFCLFNBQVM7Z0JBQ1osTUFBTTs7SUFqQmQsb0JBQW9CO1FBRGhDLFVBQVUsRUFBRTt5Q0FpQlcsU0FBUztZQUNaLE1BQU07T0FqQmQsb0JBQW9CLENBZ05oQztJQUFELDJCQUFDO0NBQUEsQUFoTkQsSUFnTkM7U0FoTlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGRlbGF5LCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IERyYXdlclJlZiB9IGZyb20gJy4uL2NsYXNzZXMvZHJhd2VyLXJlZic7XG5pbXBvcnQgeyBGc0RyYXdlclJlc2l6ZXJEaXJlY3RpdmUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL2RyYXdlci1yZXNpemVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJRHJhd2VyV2lkdGhEZWZpbml0aW9uIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9kcmF3ZXItY29uZmlnLmludGVyZmFjZSc7XG5cbmNvbnN0IE1BSU5fRFJBV0VSX0RFRkFVTFRfV0lEVEggPSA1MDA7XG5jb25zdCBTSURFX0RSQVdFUl9ERUZBVUxUX1dJRFRIID0gMjAwO1xuY29uc3QgU0lERV9SRVNJWkVfQkFSX1dJRFRIID0gMjU7XG5jb25zdCBNQUlOX1JFU0laRV9BQ1RJT05fQkFSX1dJRFRIID0gNDA7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEcmF3ZXJTaXplQ29udHJvbGxlciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG5cbiAgcHJpdmF0ZSBfbWFpbkVsUmVmOiBGc0RyYXdlclJlc2l6ZXJEaXJlY3RpdmU7XG4gIHByaXZhdGUgX3NpZGVFbFJlZjogRnNEcmF3ZXJSZXNpemVyRGlyZWN0aXZlO1xuXG4gIHByaXZhdGUgX21haW5Db25maWc6IElEcmF3ZXJXaWR0aERlZmluaXRpb247XG4gIHByaXZhdGUgX3NpZGVDb25maWc6IElEcmF3ZXJXaWR0aERlZmluaXRpb247XG5cbiAgcHJpdmF0ZSBfc2lkZU9wZW5lZCA9IGZhbHNlO1xuICBwcml2YXRlIF9zY3JlZW5XaWR0aDogbnVtYmVyO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2JvcmRlclBhZGRpbmcgPSAwO1xuXG4gIHByaXZhdGUgX2Rlc3Ryb3kkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9kcmF3ZXJSZWY6IERyYXdlclJlZjxhbnk+LFxuICAgIHByaXZhdGUgX25nWm9uZTogTmdab25lLFxuICApIHtcbiAgICB0aGlzLl9pbml0RGVmYXVsdENvbmZpZ3MoKTtcbiAgICB0aGlzLl91cGRhdGVTY3JlZW5XaWR0aCgpO1xuICAgIHRoaXMuX2xpc3RlbldpbmRvd1Jlc2l6ZSgpO1xuICAgIHRoaXMuX2xpc3RlblNpZGVUb2dnbGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbWFpbkVsUmVmKCkge1xuICAgIHJldHVybiB0aGlzLl9tYWluRWxSZWY7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHNpZGVFbFJlZigpIHtcbiAgICByZXR1cm4gdGhpcy5fc2lkZUVsUmVmO1xuICB9XG5cbiAgcHVibGljIGdldCBtYWluQ29uZmlnKCk6IElEcmF3ZXJXaWR0aERlZmluaXRpb24ge1xuICAgIHJldHVybiB0aGlzLl9tYWluQ29uZmlnO1xuICB9XG5cbiAgcHVibGljIGdldCBzaWRlQ29uZmlnKCk6IElEcmF3ZXJXaWR0aERlZmluaXRpb24ge1xuICAgIHJldHVybiB0aGlzLl9zaWRlQ29uZmlnO1xuICB9XG5cbiAgcHVibGljIGdldCBzY3JlZW5XaWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zY3JlZW5XaWR0aDtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLl9kZXN0cm95JC5uZXh0KCk7XG4gICAgdGhpcy5fZGVzdHJveSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHB1YmxpYyByZWdpc3RlckVsUmVmKGVsOiBGc0RyYXdlclJlc2l6ZXJEaXJlY3RpdmUpIHtcbiAgICBpZiAoZWwudHlwZSA9PT0gJ21haW4nKSB7XG4gICAgICB0aGlzLl9yZWdpc3Rlck1haW5SZWYoZWwpO1xuICAgIH0gZWxzZSBpZiAoZWwudHlwZSA9PT0gJ3NpZGUnKSB7XG4gICAgICB0aGlzLl9yZWdpc3RlclNpZGVSZWYoZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBFcnJvcignVW5yZWNvZ25pemVkIHJlc2l6ZSBlbGVtZW50IHR5cGUnKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXRJbml0aWFsV2lkdGgodHlwZTogJ21haW4nIHwgJ3NpZGUnKTogbnVtYmVyIHtcbiAgICBpZiAodHlwZSA9PT0gJ21haW4nKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYWluQ29uZmlnLmluaXRpYWw7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc2lkZScpIHtcbiAgICAgIHJldHVybiB0aGlzLnNpZGVDb25maWcuaW5pdGlhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0TWluV2lkdGgodHlwZTogJ21haW4nIHwgJ3NpZGUnKTogbnVtYmVyIHtcbiAgICBpZiAodHlwZSA9PT0gJ21haW4nKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYWluQ29uZmlnLm1pbjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzaWRlJykge1xuICAgICAgcmV0dXJuIHRoaXMuc2lkZUNvbmZpZy5taW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldE1heFdpZHRoKHR5cGU6ICdtYWluJyB8ICdzaWRlJyk6IG51bWJlciB7XG4gICAgaWYgKHR5cGUgPT09ICdtYWluJykge1xuICAgICAgcmV0dXJuIHRoaXMubWFpbkNvbmZpZy5tYXg7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc2lkZScpIHtcbiAgICAgIHJldHVybiB0aGlzLnNpZGVDb25maWcubWF4O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgd2lkdGggZnJvbSBvdXRzaWRlIHdpdGggYWxsIGNhbGN1bGF0aW9ucyB0byBiZSBkb25lXG4gICAqIEBwYXJhbSB3aWR0aFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZU1haW5XaWR0aCh3aWR0aDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc2lkZVdpZHRoID0gKHRoaXMuc2lkZUVsUmVmICYmIHRoaXMuc2lkZUVsUmVmLndpZHRoKSB8fCAwO1xuICAgIHRoaXMubWFpbkVsUmVmLnVwZGF0ZVdpZHRoKHNpZGVXaWR0aCArIHdpZHRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgd2lkdGggZnJvbSBvdXRzaWRlIHdpdGggYWxsIGNhbGN1bGF0aW9ucyB0byBiZSBkb25lXG4gICAqIEBwYXJhbSB3aWR0aFxuICAgKi9cbiAgcHVibGljIHVwZGF0ZVNpZGVXaWR0aCh3aWR0aDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuc2lkZUVsUmVmKSB7XG4gICAgICBjb25zdCBjdXJyZW50V2lkdGggPSB0aGlzLm1haW5FbFJlZi53aWR0aCAtIHRoaXMuc2lkZUVsUmVmLndpZHRoO1xuICAgICAgdGhpcy5tYWluRWxSZWYudXBkYXRlV2lkdGgoY3VycmVudFdpZHRoICsgd2lkdGgpO1xuICAgICAgdGhpcy5zaWRlRWxSZWYudXBkYXRlV2lkdGgod2lkdGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQdXNoIGN1cnJlbnQgZHJhd2VyIHRvIGJlIHZpc2libGUgdW5kZXIgbmV3IG9uZSBvcGVuZWRcbiAgICogQHBhcmFtIGluRnJvbnREcmF3ZXJcbiAgICovXG4gIHB1YmxpYyBwdXNoTWFpbldpZHRoKGluRnJvbnREcmF3ZXI6IERyYXdlclJlZjxhbnk+KSB7XG4gICAgY29uc3QgaW5Gcm9udERyYXdlclRvdGFsV2lkdGggPSBpbkZyb250RHJhd2VyLnJlc2l6ZUNvbnRyb2xsZXIubWFpbkVsUmVmLndpZHRoICsgTUFJTl9SRVNJWkVfQUNUSU9OX0JBUl9XSURUSDtcblxuICAgIGlmICh0aGlzLm1haW5FbFJlZi53aWR0aCA8PSBpbkZyb250RHJhd2VyVG90YWxXaWR0aCkge1xuICAgICAgdGhpcy51cGRhdGVNYWluV2lkdGgoaW5Gcm9udERyYXdlclRvdGFsV2lkdGgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0ZW4gZm9yIGJyb3dzZXIgcmVzaXplIGFuZCB1cGRhdGUgcmVzdHJpY3Rpb25zXG4gICAqL1xuICBwcml2YXRlIF9saXN0ZW5XaW5kb3dSZXNpemUoKSB7XG4gICAgdGhpcy5fbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGZyb21FdmVudCh3aW5kb3csICdyZXNpemUnKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBkZWJvdW5jZVRpbWUoNTApLFxuICAgICAgICAgIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95JCksXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fdXBkYXRlU2NyZWVuV2lkdGgoKTtcbiAgICAgICAgICB0aGlzLl91cGRhdGVNaW5NYXhTdHlsZXMoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29weSBpbml0aWFsIGNvbmZpZ3Mgb3Igc2V0IGRlZmF1bHQgdmFsdWVzXG4gICAqL1xuICBwcml2YXRlIF9pbml0RGVmYXVsdENvbmZpZ3MoKSB7XG4gICAgdGhpcy5fbWFpbkNvbmZpZyA9XG4gICAgICAodGhpcy5fZHJhd2VyUmVmLmRyYXdlckNvbmZpZy53aWR0aCAmJiB0aGlzLl9kcmF3ZXJSZWYuZHJhd2VyQ29uZmlnLndpZHRoLm1haW4pXG4gICAgICB8fCB7fTtcblxuICAgIHRoaXMuX21haW5Db25maWcuaW5pdGlhbCA9IHRoaXMuX21haW5Db25maWcuaW5pdGlhbCB8fCBNQUlOX0RSQVdFUl9ERUZBVUxUX1dJRFRIO1xuXG4gICAgdGhpcy5fc2lkZUNvbmZpZyA9XG4gICAgICAodGhpcy5fZHJhd2VyUmVmLmRyYXdlckNvbmZpZy53aWR0aCAmJiB0aGlzLl9kcmF3ZXJSZWYuZHJhd2VyQ29uZmlnLndpZHRoLnNpZGUpXG4gICAgICB8fCB7fTtcblxuICAgIHRoaXMuX3NpZGVDb25maWcuaW5pdGlhbCA9IHRoaXMuX3NpZGVDb25maWcuaW5pdGlhbCB8fCBTSURFX0RSQVdFUl9ERUZBVUxUX1dJRFRIO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVnaXN0ZXJNYWluUmVmKGVsOiBGc0RyYXdlclJlc2l6ZXJEaXJlY3RpdmUpIHtcbiAgICB0aGlzLl9tYWluRWxSZWYgPSBlbDtcbiAgfVxuXG4gIHByaXZhdGUgX3JlZ2lzdGVyU2lkZVJlZihlbDogRnNEcmF3ZXJSZXNpemVyRGlyZWN0aXZlKSB7XG4gICAgdGhpcy5fc2lkZUVsUmVmID0gZWw7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGN1cnJlbnQgd2luZG93IHNpemVcbiAgICovXG4gIHByaXZhdGUgX3VwZGF0ZVNjcmVlbldpZHRoKCk6IHZvaWQge1xuICAgIHRoaXMuX3NjcmVlbldpZHRoID0gKHdpbmRvdy5pbm5lcldpZHRoIC0gdGhpcy5fYm9yZGVyUGFkZGluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIG1pbiZtYXggY3NzIHByb3BzIGZvciBjb250YWluZXJzXG4gICAqL1xuICBwcml2YXRlIF91cGRhdGVNaW5NYXhTdHlsZXMoKTogdm9pZCB7XG4gICAgdGhpcy5tYWluRWxSZWYuc2V0TWluTWF4U3R5bGVzKCk7XG5cbiAgICBpZiAodGhpcy5zaWRlRWxSZWYpIHtcbiAgICAgIHRoaXMuc2lkZUVsUmVmLnNldE1pbk1heFN0eWxlcygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2xpc3RlblNpZGVUb2dnbGUoKTogdm9pZCB7XG4gICAgdGhpcy5fZHJhd2VyUmVmLnNpZGVUb2dnbGUkXG4gICAgICAucGlwZShcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kkKSxcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKG9wZW5lZDogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZiAodGhpcy5fc2lkZU9wZW5lZCA9PT0gb3BlbmVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2lkZU9wZW5lZCA9IG9wZW5lZDtcblxuICAgICAgICBpZiAob3BlbmVkKSB7XG4gICAgICAgICAgY29uc3QgY3VycmVudFdpZHRoID0gdGhpcy5tYWluRWxSZWYud2lkdGg7XG4gICAgICAgICAgY29uc3Qgc2lkZVdpZHRoID0gdGhpcy5nZXRJbml0aWFsV2lkdGgoJ3NpZGUnKTtcblxuICAgICAgICAgIHRoaXMuX21haW5FbFJlZi51cGRhdGVXaWR0aChjdXJyZW50V2lkdGggKyBzaWRlV2lkdGggKyBTSURFX1JFU0laRV9CQVJfV0lEVEgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGFjdHVhbFNpZGVXaWR0aCA9IHRoaXMuc2lkZUVsUmVmLmZzRHJhd2VyUmVzaXplci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICBjb25zdCBtYWluV2lkdGggPSB0aGlzLm1haW5FbFJlZi53aWR0aCAtIGFjdHVhbFNpZGVXaWR0aCAtIFNJREVfUkVTSVpFX0JBUl9XSURUSDtcblxuICAgICAgICAgIHRoaXMuX21haW5FbFJlZi51cGRhdGVXaWR0aChtYWluV2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9KVxuICB9XG59XG4iXX0=