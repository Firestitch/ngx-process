import { __assign, __read, __spread } from "tslib";
import { ESCAPE } from '@angular/cdk/keycodes';
import { BehaviorSubject, Observable, Subject, zip } from 'rxjs';
import { filter, take, takeUntil } from 'rxjs/operators';
import { DrawerConfig } from '../models/drawer-config.model';
var DrawerRef = /** @class */ (function () {
    function DrawerRef(_overlayRef, _dataFactory, _config) {
        this._overlayRef = _overlayRef;
        this._dataFactory = _dataFactory;
        /** Subject for notifying the user that the drawer has finished opening. */
        this._afterOpened$ = new Subject();
        /** Subject for notifying the user that the drawer has finished closing. */
        this._afterClosed$ = new Subject();
        /** Subject for notifying the user that the drawer has started closing. */
        this._closeStart$ = new Subject();
        /** Subject for notifying the user that the drawer has started opening. */
        this._openStart$ = new Subject();
        /** Subject for notifying the user that the drawer has started closing. */
        this._sideToggle = new Subject();
        /** Subject for notifying the user that the drawer has finished opening. */
        this._actionsUpdated$ = new Subject();
        /** Destroy notifier **/
        this._destroy$ = new Subject();
        this._activeAction = new BehaviorSubject(void 0);
        this._menuRefs = new Map();
        this._isOpen = false;
        this._isSideOpen = false;
        this.drawerConfig = new DrawerConfig(_config);
        this._activeAction.next(this.drawerConfig.activeAction);
    }
    Object.defineProperty(DrawerRef.prototype, "overlayRef", {
        get: function () {
            return this._overlayRef;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "drawerData", {
        /**
         * Getter for DRAWER_DATA for current drawer
         */
        get: function () {
            return __assign({}, this._dataFactory.getValue()); // Like immutable.... TODO switch to Immer
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "destroy$", {
        get: function () {
            return this._destroy$.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "containerRef", {
        /**
         * Set reference to drawer container
         * @param value
         */
        set: function (value) {
            this._drawerContainerRef = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "componentRef", {
        /**
         * Set reference to drawer component
         * @param value
         */
        set: function (value) {
            this._drawerComponentRef = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "drawerContentContainer", {
        get: function () {
            return this._drawerContentContainer;
        },
        set: function (value) {
            this._drawerContentContainer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "drawerActionsContainer", {
        get: function () {
            return this._drawerActionsContainer;
        },
        set: function (value) {
            this._drawerActionsContainer = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "activeAction", {
        get: function () {
            return this._activeAction.getValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "activeAction$", {
        get: function () {
            return this._activeAction.pipe(takeUntil(this._destroy$));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "isOpen", {
        /**
         * Return actual status of the drawer
         */
        get: function () {
            return this._isOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "isSideOpen", {
        /**
         * Return actual status of the side of the drawer
         */
        get: function () {
            return this._isSideOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "resizeController", {
        get: function () {
            return this._resizeController;
        },
        set: function (value) {
            this._resizeController = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "actionUpdated$", {
        /**
         * Gets an observable that action was updated and change detection should be started
         */
        get: function () {
            return this._actionsUpdated$.pipe(takeUntil(this._destroy$));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "afterClosed$", {
        /**
         * Gets an observable that is notified when the dialog is finished closing.
         */
        get: function () {
            return this._afterClosed$.pipe(takeUntil(this._destroy$));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "afterOpened$", {
        /**
         * Gets an observable that is notified when the dialog is finished opening.
         */
        get: function () {
            return this._afterOpened$.pipe(takeUntil(this._destroy$));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "openStart$", {
        /**
         * Gets an observable that is notified when the dialog open starts.
         */
        get: function () {
            return this._openStart$.pipe(takeUntil(this._destroy$));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "closeStart$", {
        /**
         * Gets an observable that is notified when the dialog is finished opening.
         */
        get: function () {
            return this._closeStart$.pipe(takeUntil(this._destroy$));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "dataChanged$", {
        /**
         * Gets an observable that is notified when data in DRAWER_DATA was changed
         */
        get: function () {
            return this._dataFactory.dataChange$;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawerRef.prototype, "sideToggle$", {
        /**
         * Gets an observable that is notify that side status toggled
         */
        get: function () {
            return this._sideToggle.pipe(takeUntil(this._destroy$));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Subscribe on keydown events to react on escape
     */
    DrawerRef.prototype.events = function () {
        var _this = this;
        this._overlayRef.keydownEvents()
            .pipe(filter(function (event) { return event.keyCode === ESCAPE && !_this.drawerConfig.disableClose; }), takeUntil(this._destroy$))
            .subscribe(function () { return _this.close(); });
    };
    /**
     * Set value for DRAWER_DATA
     * @param data
     */
    DrawerRef.prototype.dataChange = function (data) {
        this._dataFactory.setValue(data);
    };
    /**
     * Open drawer and notify observable
     */
    DrawerRef.prototype.open = function () {
        var _this = this;
        new Observable(function (obs) {
            setTimeout(function () {
                if (_this._openStart$.observers.length) {
                    _this._openStart$.next(obs);
                }
                else {
                    obs.next();
                    obs.complete();
                }
            });
        }).pipe(takeUntil(this._destroy$))
            .subscribe({
            next: function () {
                if (_this.activeAction) {
                    _this.openSide();
                }
                _this._drawerContainerRef.open();
                _this._afterOpened$.next();
                _this._afterOpened$.complete();
            },
            error: function () {
                _this.destroy();
            },
        });
    };
    /**
     * Close the drawer.
     * @param result Optional result to return to the dialog opener.
     */
    DrawerRef.prototype.close = function (result) {
        var _this = this;
        new Observable(function (observer) {
            if (_this._closeStart$.observers.length) {
                zip.apply(void 0, __spread(_this._closeStart$.observers.map(function (item) {
                    return Observable.create(function (closeObserver) {
                        item.next(closeObserver);
                    });
                }))).pipe(takeUntil(_this._destroy$))
                    .subscribe(function () {
                    observer.next();
                    observer.complete();
                }, function () {
                    observer.error();
                });
            }
            else {
                observer.next();
                observer.complete();
            }
        }).pipe(takeUntil(this._destroy$))
            .subscribe({
            next: function () {
                _this._drawerContainerRef.close();
                _this._result = result;
                _this._afterClosed$.next(result);
                _this.destroy();
            }
        });
    };
    /**
     * Open the side of the drawer
     */
    DrawerRef.prototype.openSide = function () {
        this._isSideOpen = true;
        this._sideToggle.next(this._isSideOpen);
    };
    /**
     * Close the side of the drawer
     */
    DrawerRef.prototype.closeSide = function () {
        this._isSideOpen = false;
        this._sideToggle.next(this._isSideOpen);
        this.setActiveAction(null);
    };
    /**
     * Toggle the side of the drawer
     */
    DrawerRef.prototype.toggleSide = function () {
        this.isSideOpen ? this.closeSide() : this.openSide();
    };
    /**
     * Change active action
     * @param name
     */
    DrawerRef.prototype.setActiveAction = function (name) {
        this._activeAction.next(name);
        if (name) {
            this.openSide();
        }
    };
    /**
     * Store opened menu reference and subscribe for auto remove
     * @param name
     * @param ref
     */
    DrawerRef.prototype.addMenuRef = function (name, ref) {
        var _this = this;
        this._menuRefs.set(name, ref);
        ref.afterClosed()
            .pipe(take(1), takeUntil(this._destroy$))
            .subscribe(function () {
            _this._menuRefs.delete(name);
        });
    };
    /**
     * Get opened menu reference by name
     * @param name
     */
    DrawerRef.prototype.getMenuRef = function (name) {
        return this._menuRefs.get(name);
    };
    DrawerRef.prototype.getAction = function (name) {
        return this.drawerConfig.actions.find(function (action) { return action.name === name; });
    };
    /**
     * Do update for icon for target action
     * @param name
     * @param icon
     */
    DrawerRef.prototype.updateActionIcon = function (name, icon) {
        var action = this.getAction(name);
        if (action) {
            action.icon = icon;
            this._actionsUpdated$.next(name);
        }
    };
    /**
     * Do update
     * @param name
     * @param data
     */
    DrawerRef.prototype.updateAction = function (name, data) {
        var action = this.getAction(name);
        if (action) {
            var allowedFields_1 = ['icon', 'type', 'toggle', 'tooltip', 'close', 'closeSide', 'component', 'data'];
            var forUpdate = Object.keys(data).filter(function (key) { return allowedFields_1.indexOf(key) > -1; });
            forUpdate.forEach(function (key) {
                action[key] = data[key];
            });
            this._actionsUpdated$.next(name);
        }
    };
    DrawerRef.prototype.updateDrawerWidth = function (width) {
        this.resizeController.updateMainWidth(width);
    };
    DrawerRef.prototype.updateSideDrawerWidth = function (width) {
        this.resizeController.updateSideWidth(width);
    };
    DrawerRef.prototype.destroy = function () {
        this._overlayRef.detachBackdrop();
        this._overlayRef.detach();
        this._drawerComponentRef.destroy();
        this._dataFactory.destroy();
        this._destroy$.next();
        this._destroy$.complete();
    };
    return DrawerRef;
}());
export { DrawerRef };
//# sourceMappingURL=data:application/json;base64,