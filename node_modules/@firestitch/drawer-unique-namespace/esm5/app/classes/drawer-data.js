import { Observable, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var DrawerData = /** @class */ (function () {
    function DrawerData(data) {
        if (data === void 0) { data = {}; }
        this._dataChange = new Subject();
        this._destroy = new Subject();
        this._data = data;
    }
    DrawerData.createWithProxy = function (data) {
        if (data === void 0) { data = {}; }
        var drawerData = new DrawerData(data);
        return new Proxy(drawerData, {
            get: function (target, property) {
                if (typeof target[property] === 'function'
                    || property === '_data'
                    || target[property] instanceof Observable) {
                    return target[property];
                }
                else {
                    return target._data[property];
                }
            },
            set: function (target, property, value) {
                if (property !== '_data') {
                    target._data[property] = value;
                }
                else {
                    target[property] = value;
                }
                return true;
            },
            has: function (target, property) {
                return property in target._data;
            },
            ownKeys: function (target) {
                return Object.keys(target._data);
            },
            enumerate: function (target) {
                return Object.keys(target._data);
            },
            getOwnPropertyDescriptor: function (target, property) {
                return Object.getOwnPropertyDescriptor(target._data, property);
            }
        });
    };
    Object.defineProperty(DrawerData.prototype, "dataChange$", {
        get: function () {
            return this._dataChange.pipe(takeUntil(this._destroy));
        },
        enumerable: true,
        configurable: true
    });
    DrawerData.prototype.getValue = function () {
        return this._data;
    };
    DrawerData.prototype.setValue = function (value) {
        this._data = value;
        this._dataChange.next(this._data);
    };
    DrawerData.prototype.destroy = function () {
        this._destroy.next();
        this._destroy.complete();
    };
    return DrawerData;
}());
export { DrawerData };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLWRhdGEuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZXN0aXRjaC9kcmF3ZXIvIiwic291cmNlcyI6WyJhcHAvY2xhc3Nlcy9kcmF3ZXItZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHM0M7SUFNRSxvQkFBWSxJQUFjO1FBQWQscUJBQUEsRUFBQSxTQUFjO1FBSGxCLGdCQUFXLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQUNqQyxhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUdyQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRWEsMEJBQWUsR0FBN0IsVUFBOEIsSUFBYztRQUFkLHFCQUFBLEVBQUEsU0FBYztRQUMxQyxJQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxPQUFPLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtZQUMzQixHQUFHLFlBQUMsTUFBTSxFQUFFLFFBQVE7Z0JBQ2xCLElBQUksT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssVUFBVTt1QkFDckMsUUFBUSxLQUFLLE9BQU87dUJBQ3BCLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxVQUFVLEVBQ3pDO29CQUNBLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUN6QjtxQkFBTTtvQkFDTCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQy9CO1lBQ0gsQ0FBQztZQUVELEdBQUcsWUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEtBQUs7Z0JBQ3pCLElBQUksUUFBUSxLQUFLLE9BQU8sRUFBRTtvQkFDeEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQ2hDO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQzFCO2dCQUVELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztZQUVELEdBQUcsWUFBQyxNQUFNLEVBQUUsUUFBUTtnQkFDbEIsT0FBTyxRQUFRLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNsQyxDQUFDO1lBRUQsT0FBTyxZQUFDLE1BQU07Z0JBQ1osT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxDQUFDO1lBRUQsU0FBUyxZQUFDLE1BQU07Z0JBQ2QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNuQyxDQUFDO1lBRUQsd0JBQXdCLFlBQUMsTUFBTSxFQUFFLFFBQVE7Z0JBQ3ZDLE9BQU8sTUFBTSxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDakUsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxzQkFBSSxtQ0FBVzthQUFmO1lBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQzs7O09BQUE7SUFFTSw2QkFBUSxHQUFmO1FBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFTSw2QkFBUSxHQUFmLFVBQWdCLEtBQUs7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFTSw0QkFBTyxHQUFkO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUF0RUQsSUFzRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cblxuZXhwb3J0IGNsYXNzIERyYXdlckRhdGEge1xuXG4gIHByaXZhdGUgX2RhdGE7XG4gIHByaXZhdGUgX2RhdGFDaGFuZ2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIHByaXZhdGUgX2Rlc3Ryb3kgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IGFueSA9IHt9KSB7XG4gICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZVdpdGhQcm94eShkYXRhOiBhbnkgPSB7fSkge1xuICAgIGNvbnN0IGRyYXdlckRhdGEgPSBuZXcgRHJhd2VyRGF0YShkYXRhKTtcblxuICAgIHJldHVybiBuZXcgUHJveHkoZHJhd2VyRGF0YSwge1xuICAgICAgZ2V0KHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXRbcHJvcGVydHldID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgfHwgcHJvcGVydHkgPT09ICdfZGF0YSdcbiAgICAgICAgICB8fCB0YXJnZXRbcHJvcGVydHldIGluc3RhbmNlb2YgT2JzZXJ2YWJsZVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGFyZ2V0Ll9kYXRhW3Byb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgc2V0KHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gJ19kYXRhJykge1xuICAgICAgICAgIHRhcmdldC5fZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG5cbiAgICAgIGhhcyh0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0YXJnZXQuX2RhdGE7XG4gICAgICB9LFxuXG4gICAgICBvd25LZXlzKHRhcmdldCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGFyZ2V0Ll9kYXRhKTtcbiAgICAgIH0sXG5cbiAgICAgIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRhcmdldC5fZGF0YSk7XG4gICAgICB9LFxuXG4gICAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQuX2RhdGEsIHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGdldCBkYXRhQ2hhbmdlJCgpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YUNoYW5nZS5waXBlKHRha2VVbnRpbCh0aGlzLl9kZXN0cm95KSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0VmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gIH1cblxuICBwdWJsaWMgc2V0VmFsdWUodmFsdWUpIHtcbiAgICB0aGlzLl9kYXRhID0gdmFsdWU7XG4gICAgdGhpcy5fZGF0YUNoYW5nZS5uZXh0KHRoaXMuX2RhdGEpO1xuICB9XG5cbiAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fZGVzdHJveS5uZXh0KCk7XG4gICAgdGhpcy5fZGVzdHJveS5jb21wbGV0ZSgpO1xuICB9XG59XG4iXX0=