import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Input, NgZone, OnDestroy, OnInit, Renderer2, } from '@angular/core';
import { Subject } from 'rxjs';
import { DrawerSizeController } from '../classes/drawer-size-controller';
var FsDrawerResizerDirective = /** @class */ (function () {
    function FsDrawerResizerDirective(_el, _renderer, _ngZone) {
        this._el = _el;
        this._renderer = _renderer;
        this._ngZone = _ngZone;
        this.fsDrawerResizer = this._el.nativeElement;
        this.direction = 'left';
        this.resizable = true;
        this._dragStartHandler = this._dragStart.bind(this);
        this._dragHandler = this._drag.bind(this);
        this._dragEndHandler = this._dragEnd.bind(this);
        this._x = 0;
        this._width = 0;
        this._actionsWidth = 0;
        this._destroy$ = new Subject();
    }
    Object.defineProperty(FsDrawerResizerDirective.prototype, "width", {
        get: function () {
            return this._width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FsDrawerResizerDirective.prototype, "minWidth", {
        get: function () {
            var minWidth = this.sizeController.getMinWidth(this.type);
            if (minWidth && minWidth >= 0) {
                if (minWidth > this.sizeController.screenWidth) {
                    return this.sizeController.screenWidth;
                }
                else {
                    return minWidth;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FsDrawerResizerDirective.prototype, "maxWidth", {
        get: function () {
            var maxWidth = this.sizeController.getMaxWidth(this.type);
            var parentContainerWidth = null;
            if (this.parentContainer) {
                parentContainerWidth = this._getElementWidth(this.parentContainer.nativeElement);
            }
            if (parentContainerWidth !== null) {
                return !maxWidth || maxWidth >= parentContainerWidth
                    ? parentContainerWidth - this._actionsWidth * 2
                    : maxWidth;
            }
            else {
                return !maxWidth || maxWidth >= this.sizeController.screenWidth
                    ? this.sizeController.screenWidth
                    : maxWidth;
            }
        },
        enumerable: true,
        configurable: true
    });
    FsDrawerResizerDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.sizeController.registerElRef(this);
        if (this.resizable) {
            this._ngZone.runOutsideAngular(function () {
                _this._el.nativeElement.addEventListener('mousedown', _this._dragStartHandler, false);
                _this._el.nativeElement.addEventListener('touchstart', _this._dragStartHandler, false);
            });
            if (this.actionsContainer) {
                this._actionsWidth = this._getElementWidth(this.actionsContainer.nativeElement);
            }
            this.setMinMaxStyles();
            var minWidth = this.sizeController.getMinWidth(this.type);
            var width = this.sizeController.getInitialWidth(this.type)
                || this._getElementWidth(this.fsDrawerResizer);
            if (width < minWidth) {
                width = minWidth;
            }
            this.updateWidth(width);
        }
    };
    FsDrawerResizerDirective.prototype.updateWidth = function (width) {
        var _this = this;
        this._width = width;
        requestAnimationFrame(function () {
            _this._renderer.setStyle(_this.fsDrawerResizer, 'width', width + "px");
        });
    };
    FsDrawerResizerDirective.prototype.ngOnDestroy = function () {
        this._el.nativeElement.removeEventListener('mousedown', this._dragStartHandler, false);
        this._el.nativeElement.removeEventListener('touchstart', this._dragStartHandler, false);
        this._destroy$.next();
        this._destroy$.complete();
    };
    /**
     * Set inline styles min/max width
     */
    FsDrawerResizerDirective.prototype.setMinMaxStyles = function () {
        var _this = this;
        requestAnimationFrame(function () {
            _this._renderer.setStyle(_this.fsDrawerResizer, 'min-width', _this.minWidth + "px");
            _this._renderer.setStyle(_this.fsDrawerResizer, 'max-width', _this.maxWidth + "px");
        });
    };
    /**
     * Subscribe to move events and init base dimensions/restrictions
     * @param event { MouseEvent }
     */
    FsDrawerResizerDirective.prototype._dragStart = function (event) {
        this._x = this._getClientX(event);
        this._width = this._getElementWidth(this.fsDrawerResizer);
        this.setMinMaxStyles();
        document.addEventListener('touchmove', this._dragHandler, false);
        document.addEventListener('touchend', this._dragEndHandler, false);
        document.addEventListener('mousemove', this._dragHandler, false);
        document.addEventListener('mouseup', this._dragEndHandler, false);
    };
    /**
     * Update coordinates during drag
     * @param event
     */
    FsDrawerResizerDirective.prototype._drag = function (event) {
        var clientX = this._getClientX(event);
        var predictedWidth = this._calcWidth(this.direction, clientX);
        this._updatePosition(clientX, predictedWidth);
        this._emitResizeEvent();
    };
    /**
     * Remove listeners when drag finished
     * @param event
     */
    FsDrawerResizerDirective.prototype._dragEnd = function (event) {
        document.removeEventListener('mousemove', this._dragHandler, false);
        document.removeEventListener('mouseup', this._dragEndHandler, false);
        document.removeEventListener('touchmove', this._dragHandler, false);
        document.removeEventListener('touchend', this._dragEndHandler, false);
    };
    /**
     *
     * @param event
     */
    FsDrawerResizerDirective.prototype._getClientX = function (event) {
        return event.touches ? event.touches[0].clientX : event.clientX;
    };
    /**
     * Will return width of element
     * @param el
     */
    FsDrawerResizerDirective.prototype._getElementWidth = function (el) {
        return el.getBoundingClientRect().width;
    };
    /**
     * Update width and position of target element
     * @param clientX
     * @param width
     */
    FsDrawerResizerDirective.prototype._updatePosition = function (clientX, width) {
        this._x = clientX;
        this.updateWidth(width < 0 ? 0 : width);
    };
    /**
     * Calc new width based on offset from previous position
     * @param direction
     * @param clientX
     */
    FsDrawerResizerDirective.prototype._calcWidth = function (direction, clientX) {
        var directionSign = direction === 'left' ? -1 : 1;
        return this._width + (this._x - clientX) * directionSign;
    };
    /**
     * Resize event for Window
     */
    FsDrawerResizerDirective.prototype._emitResizeEvent = function () {
        var resizeEvent = window.document.createEvent('UIEvents');
        resizeEvent.initEvent('resize', true, false);
        window.dispatchEvent(resizeEvent);
    };
    FsDrawerResizerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FsDrawerResizerDirective.prototype, "fsDrawerResizer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], FsDrawerResizerDirective.prototype, "type", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FsDrawerResizerDirective.prototype, "direction", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], FsDrawerResizerDirective.prototype, "resizable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", ElementRef)
    ], FsDrawerResizerDirective.prototype, "parentContainer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", ElementRef)
    ], FsDrawerResizerDirective.prototype, "actionsContainer", void 0);
    __decorate([
        Input(),
        __metadata("design:type", DrawerSizeController)
    ], FsDrawerResizerDirective.prototype, "sizeController", void 0);
    FsDrawerResizerDirective = __decorate([
        Directive({
            selector: '[fsDrawerResizer]',
            host: {
                '[style.cursor]': '"col-resize"',
            }
        }),
        __metadata("design:paramtypes", [ElementRef,
            Renderer2,
            NgZone])
    ], FsDrawerResizerDirective);
    return FsDrawerResizerDirective;
}());
export { FsDrawerResizerDirective };
//# sourceMappingURL=data:application/json;base64,