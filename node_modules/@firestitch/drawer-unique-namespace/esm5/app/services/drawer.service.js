import { __decorate, __metadata, __param } from "tslib";
import { Injectable, Injector, OnDestroy, Optional, SkipSelf } from '@angular/core';
import { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { Subject, merge } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { FsDrawerComponent } from '../components/drawer/drawer.component';
import { DrawerRef } from '../classes/drawer-ref';
import { DrawerData } from '../classes/drawer-data';
import { DRAWER_DATA } from './drawer-data';
var FsDrawerService = /** @class */ (function () {
    function FsDrawerService(_parentDrawerService, _overlay, _injector) {
        this._parentDrawerService = _parentDrawerService;
        this._overlay = _overlay;
        this._injector = _injector;
        this._drawerRefs = new Set();
        this._destroy$ = new Subject();
    }
    FsDrawerService.prototype.ngOnDestroy = function () {
        this._destroy$.next();
        this._destroy$.complete();
    };
    FsDrawerService.prototype.open = function (component, config) {
        var _this = this;
        var overlayRef = this._createOverlay();
        var dataFactory = DrawerData.createWithProxy(config.data);
        var drawerRef = new DrawerRef(overlayRef, dataFactory, config);
        var containerRef = this._attachDrawerContainer(overlayRef, drawerRef, dataFactory);
        var componentRef = this._attachComponent(component, containerRef, drawerRef, dataFactory);
        drawerRef.containerRef = containerRef;
        containerRef.setDrawerRef(drawerRef);
        drawerRef.componentRef = componentRef;
        drawerRef.events();
        drawerRef.open();
        this._storeDrawerRef(drawerRef);
        merge(drawerRef.afterOpened$, drawerRef.afterClosed$)
            .pipe(takeUntil(this._destroy$))
            .subscribe(function () {
            setTimeout(function () {
                _this._applyBackdrop();
                _this._applyBodyOpenClass();
            });
        });
        return drawerRef;
    };
    FsDrawerService.prototype.closeAll = function () {
        this._drawerRefs.forEach(function (ref) { return ref.close(); });
        if (this._parentDrawerService) {
            this._parentDrawerService.closeAll();
        }
    };
    FsDrawerService.prototype._applyBackdrop = function () {
        var _this = this;
        Array.from(this._drawerRefs)
            .forEach(function (drawerRef, index) {
            var backdrop = drawerRef.overlayRef.backdropElement;
            if (backdrop) {
                if (index && index === (_this._drawerRefs.size - 1)) {
                    backdrop.classList.add('fs-drawer-backdrop-active');
                }
                else {
                    backdrop.classList.remove('fs-drawer-backdrop-active');
                }
            }
        });
    };
    FsDrawerService.prototype._applyBodyOpenClass = function () {
        if (this._drawerRefs.size) {
            document.body.classList.add('fs-drawer-open');
        }
        else {
            document.body.classList.remove('fs-drawer-open');
        }
    };
    FsDrawerService.prototype._storeDrawerRef = function (ref) {
        var _this = this;
        this._drawerRefs.add(ref);
        this._pushDrawersCascade();
        ref.destroy$
            .pipe(take(1), takeUntil(this._destroy$))
            .subscribe(function () {
            _this._drawerRefs.delete(ref);
        });
    };
    /**
     * In case, when we want to open more than 1 drawer
     * our previously opened drawers should be visible
     *
     *      d1   d2   d3
     *     ---- ---- ---
     *    | x  | x1 | x2
     *    | y  | y1 | y2
     *    | z  | z1 | z2
     *     ---- ---- ---
     *
     * Where d1, d2 - previously opened drawers
     * d1 and d2 must be pushed left to be visible under just opened d3
     */
    FsDrawerService.prototype._pushDrawersCascade = function () {
        var _this = this;
        if (this._drawerRefs.size > 1) {
            // SetTimeout should be here because we must wait render newly opened drawer
            // to be able to get his width
            setTimeout(function () {
                var refsArr = Array.from(_this._drawerRefs.values());
                for (var i = refsArr.length - 1; i > 0; i--) {
                    var prevRef = refsArr[i - 1];
                    var currRef = refsArr[i];
                    prevRef.resizeController.pushMainWidth(currRef);
                }
            });
        }
    };
    FsDrawerService.prototype._createOverlay = function () {
        var overlayConfig = this._getOverlayConfig();
        return this._overlay.create(overlayConfig);
    };
    FsDrawerService.prototype._getOverlayConfig = function () {
        return new OverlayConfig({
            hasBackdrop: true,
            backdropClass: 'fs-drawer-backdrop'
        });
    };
    FsDrawerService.prototype._attachDrawerContainer = function (overlayRef, drawerRef, dataFactory) {
        var injector = this._createInjector(drawerRef, dataFactory);
        var containerPortal = new ComponentPortal(FsDrawerComponent, undefined, injector);
        var containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    };
    FsDrawerService.prototype._attachComponent = function (componentRef, drawerContainer, drawerRef, dataFactory) {
        var injector = this._createInjector(drawerRef, dataFactory);
        return drawerContainer.attachComponentPortal(new ComponentPortal(componentRef, undefined, injector));
    };
    FsDrawerService.prototype._createInjector = function (componentRef, dataFactory) {
        var injectionTokens = new WeakMap([
            [DrawerRef, componentRef],
            [DRAWER_DATA, dataFactory]
        ]);
        return new PortalInjector(this._injector, injectionTokens);
    };
    FsDrawerService.ctorParameters = function () { return [
        { type: FsDrawerService, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: Overlay },
        { type: Injector }
    ]; };
    FsDrawerService = __decorate([
        Injectable(),
        __param(0, Optional()), __param(0, SkipSelf()),
        __metadata("design:paramtypes", [FsDrawerService,
            Overlay,
            Injector])
    ], FsDrawerService);
    return FsDrawerService;
}());
export { FsDrawerService };
//# sourceMappingURL=data:application/json;base64,