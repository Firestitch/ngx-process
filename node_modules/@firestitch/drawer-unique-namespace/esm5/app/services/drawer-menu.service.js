import { __decorate, __metadata } from "tslib";
import { ElementRef, Injectable, Injector } from '@angular/core';
import { ConnectedPosition, Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { FsDrawerMenuComponent } from '../components/drawer-menu/drawer-menu.component';
import { DrawerMenuRef } from '../classes/drawer-menu-ref';
import { DrawerData } from '../classes/drawer-data';
import { DRAWER_MENU_DATA } from '../services/drawer-menu-data';
var FsDrawerMenuService = /** @class */ (function () {
    function FsDrawerMenuService(_overlay, _injector, _breakpointObserver) {
        this._overlay = _overlay;
        this._injector = _injector;
        this._breakpointObserver = _breakpointObserver;
    }
    FsDrawerMenuService.prototype.create = function (component, container, config) {
        var overlayRef = this.createOverlay(container);
        var dataFactory = DrawerData.createWithProxy(config.data);
        var menuRef = new DrawerMenuRef(overlayRef, dataFactory);
        var containerRef = this.attachContainer(overlayRef, menuRef, dataFactory);
        var componentRef = this.attachComponent(component, containerRef, menuRef, dataFactory);
        menuRef.containerRef = containerRef;
        containerRef.setDrawerMenuRef(menuRef);
        menuRef.componentRef = componentRef;
        return menuRef;
    };
    FsDrawerMenuService.prototype.createOverlay = function (container) {
        var overlayConfig = this.getOverlayConfig(container);
        return this._overlay.create(overlayConfig);
    };
    FsDrawerMenuService.prototype.getOverlayConfig = function (container) {
        var element = new ElementRef(container); // positionStrategy needs ElementRef;
        var strategy = null;
        if (this._breakpointObserver.isMatched(Breakpoints.XSmall)) {
            strategy = this._overlay
                .position()
                .global()
                .centerHorizontally()
                .centerVertically();
        }
        else {
            var positions = [
                { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' }
            ];
            strategy = this._overlay
                .position()
                .flexibleConnectedTo(element)
                .withPositions(positions);
        }
        return new OverlayConfig({
            positionStrategy: strategy,
            scrollStrategy: this._overlay.scrollStrategies.reposition(),
            hasBackdrop: true,
            backdropClass: 'cdk-overlay-transparent-backdrop'
        });
    };
    FsDrawerMenuService.prototype.attachContainer = function (overlayRef, menuRef, dataFactory) {
        var injector = this.createInjector(menuRef, dataFactory);
        var containerPortal = new ComponentPortal(FsDrawerMenuComponent, undefined, injector);
        var containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    };
    FsDrawerMenuService.prototype.attachComponent = function (componentRef, externalContainer, externalRef, config) {
        var injector = this.createInjector(externalRef, config);
        return externalContainer.attachComponentPortal(new ComponentPortal(componentRef, undefined, injector));
    };
    FsDrawerMenuService.prototype.createInjector = function (componentRef, dataFactory) {
        var injectionTokens = new WeakMap([
            [DrawerMenuRef, componentRef],
            [DRAWER_MENU_DATA, dataFactory]
        ]);
        return new PortalInjector(this._injector, injectionTokens);
    };
    FsDrawerMenuService.ctorParameters = function () { return [
        { type: Overlay },
        { type: Injector },
        { type: BreakpointObserver }
    ]; };
    FsDrawerMenuService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [Overlay,
            Injector,
            BreakpointObserver])
    ], FsDrawerMenuService);
    return FsDrawerMenuService;
}());
export { FsDrawerMenuService };
//# sourceMappingURL=data:application/json;base64,