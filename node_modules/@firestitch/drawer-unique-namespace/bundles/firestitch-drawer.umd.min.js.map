{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://@firestitch/drawer/app/helpers/action-type.enum.ts","ng://@firestitch/drawer/app/models/base-action.ts","ng://@firestitch/drawer/app/models/menu-action.model.ts","ng://@firestitch/drawer/app/models/action.model.ts","ng://@firestitch/drawer/app/models/drawer-config.model.ts","ng://@firestitch/drawer/app/classes/drawer-ref.ts","ng://@firestitch/drawer/app/components/drawer-menu/drawer-menu.component.ts","ng://@firestitch/drawer/app/classes/drawer-menu-ref.ts","ng://@firestitch/drawer/app/classes/drawer-data.ts","ng://@firestitch/drawer/app/services/drawer-menu-data.ts","ng://@firestitch/drawer/app/services/drawer-menu.service.ts","ng://@firestitch/drawer/app/components/drawer-actions/drawer-actions.component.ts","ng://@firestitch/drawer/app/classes/drawer-size-controller.ts","ng://@firestitch/drawer/app/components/drawer/drawer.component.ts","ng://@firestitch/drawer/app/directives/drawer-action.directive.ts","ng://@firestitch/drawer/app/components/drawer-side/drawer-side.component.ts","ng://@firestitch/drawer/app/components/drawer-actions/drawer-action-item/drawer-action-item.component.ts","ng://@firestitch/drawer/app/components/drawer-content/drawer-content.component.ts","ng://@firestitch/drawer/app/directives/drawer-resizer.directive.ts","ng://@firestitch/drawer/app/services/drawer-data.ts","ng://@firestitch/drawer/app/services/drawer.service.ts","ng://@firestitch/drawer/app/fs-drawer.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","FsDrawerAction","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","__spread","concat","BaseAction","data","_visible","_icon","icon","_click","click","_link","link","_show","show","_routerLink","checkVisibility","updateRouterLink","MenuAction","_super","_this","actions","_isGroup","isArray","map","action","_label","label","forEach","some","visible","Action","_data","_close","_closeSide","_menuActions","_component","_menuRefName","_type","type","_name","name","_toggle","toggle","_tooltip","tooltip","close","component","Component","Menu","closeSide","menuActions","DrawerConfig","disableClose","position","activeAction","resizable","width","DrawerRef","_overlayRef","_dataFactory","_config","_afterOpened$","Subject","_afterClosed$","_closeStart$","_openStart$","_sideToggle","_actionsUpdated$","_destroy$","_activeAction","BehaviorSubject","_menuRefs","Map","_isOpen","_isSideOpen","drawerConfig","getValue","asObservable","_drawerContainerRef","_drawerComponentRef","_drawerContentContainer","_drawerActionsContainer","pipe","takeUntil","_resizeController","dataChange$","events","keydownEvents","filter","event","keyCode","ESCAPE","subscribe","dataChange","setValue","open","Observable","obs","setTimeout","observers","complete","openSide","destroy","result","observer","zip","item","closeObserver","_result","setActiveAction","toggleSide","isSideOpen","addMenuRef","ref","set","afterClosed","take","delete","getMenuRef","get","getAction","find","updateActionIcon","updateAction","allowedFields_1","keys","indexOf","updateDrawerWidth","resizeController","updateMainWidth","updateSideDrawerWidth","updateSideWidth","detachBackdrop","detach","FsDrawerMenuComponent","setDrawerMenuRef","attachComponentPortal","portal","_portalOutlet","hasAttached","Error","attachTemplatePortal","ViewChild","CdkPortalOutlet","static","selector","template","host","class","changeDetection","ChangeDetectionStrategy","OnPush","BasePortalOutlet","DrawerMenuRef","backdropClick","_externalMenuContainerRef","_externalMenuComponentRef","closeStart","DrawerData","_dataChange","_destroy","createWithProxy","drawerData","Proxy","property","has","ownKeys","enumerate","DRAWER_MENU_DATA","InjectionToken","FsDrawerMenuService","_overlay","_injector","_breakpointObserver","container","config","overlayRef","createOverlay","dataFactory","menuRef","containerRef","attachContainer","componentRef","attachComponent","overlayConfig","getOverlayConfig","element","ElementRef","strategy","isMatched","Breakpoints","XSmall","global","centerHorizontally","centerVertically","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","OverlayConfig","positionStrategy","scrollStrategy","scrollStrategies","reposition","hasBackdrop","backdropClass","injector","createInjector","containerPortal","ComponentPortal","undefined","attach","instance","externalContainer","externalRef","injectionTokens","WeakMap","PortalInjector","Overlay","Injector","BreakpointObserver","Injectable","FsDrawerActionsComponent","_drawerRef","_drawerMenu","_cdRef","ngOnInit","ngOnDestroy","actionClick","hasComponentType","hasMenuType","srcElement","menuRefName","params","drawerRef","ChangeDetectorRef","Input","DrawerSizeController","_ngZone","_sideOpened","_borderPadding","_initDefaultConfigs","_updateScreenWidth","_listenWindowResize","_listenSideToggle","_mainElRef","_sideElRef","_mainConfig","_sideConfig","_screenWidth","registerElRef","el","_registerMainRef","_registerSideRef","getInitialWidth","mainConfig","initial","sideConfig","getMinWidth","min","getMaxWidth","max","sideWidth","sideElRef","mainElRef","updateWidth","currentWidth","pushMainWidth","inFrontDrawer","inFrontDrawerTotalWidth","runOutsideAngular","fromEvent","window","debounceTime","_updateMinMaxStyles","main","side","innerWidth","setMinMaxStyles","sideToggle$","opened","actualSideWidth","fsDrawerResizer","getBoundingClientRect","mainWidth","NgZone","FsDrawerComponent","_el","isOpen","isOpenSide","initialized","_sideOpen","nativeElement","classList","sideOpen","_listenDataChanges","setDrawerRef","drawerContentContainer","drawerActionsContainer","dataChanged$","detectChanges","read","providers","encapsulation","ViewEncapsulation","None","FsDrawerActionDirective","Directive","FsDrawerSideComponent","_renderer","_elRef","classSide","activeTemplate","_hidden","EventEmitter","setAttribute","removeAttribute","hidden","drawer","console","_subscribeToActionChanges","ngAfterViewInit","_updateActiveActionTemplate","emit","activatedAction_1","selectedActionIndex","toArray","findIndex","actionsTemplates","Renderer2","HostBinding","ContentChildren","QueryList","TemplateRef","FsDrawerActionItemComponent","actionClicked","isActive","actionTypes","_listenActionChanges","_updateVisibilityAndLinks","ngOnChanges","changes","menuActionClick","actionUpdated$","_updateVisibility","_updateRouterLinks","Output","FsDrawerContentComponent","FsDrawerResizerDirective","direction","_dragStartHandler","_dragStart","bind","_dragHandler","_drag","_dragEndHandler","_dragEnd","_x","_width","_actionsWidth","minWidth","sizeController","screenWidth","maxWidth","parentContainerWidth","parentContainer","_getElementWidth","addEventListener","actionsContainer","requestAnimationFrame","setStyle","removeEventListener","_getClientX","document","clientX","predictedWidth","_calcWidth","_updatePosition","_emitResizeEvent","touches","directionSign","resizeEvent","createEvent","initEvent","dispatchEvent","[style.cursor]","DRAWER_DATA","FsDrawerService","_parentDrawerService","_drawerRefs","Set","_createOverlay","_attachDrawerContainer","_attachComponent","_storeDrawerRef","merge","afterOpened$","afterClosed$","_applyBackdrop","_applyBodyOpenClass","closeAll","from","index","backdrop","backdropElement","size","add","remove","body","_pushDrawersCascade","destroy$","refsArr","values","prevRef","currRef","_getOverlayConfig","_createInjector","drawerContainer","Optional","SkipSelf","FsDrawerModule","NgModule","imports","CommonModule","MatTooltipModule","MatButtonModule","MatIconModule","OverlayModule","PortalModule","FsMenuModule","MatMenuModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum FsDrawerAction {\n  Button = 'button',\n  Menu = 'menu',\n  Component = 'component',\n}\n","import {\n  IDrawerActionLink,\n  IDrawerActionLinkFn,\n  IDrawerActionShowFn,\n  IMenuActionClick\n} from '../interfaces/action.iterface';\nimport { DrawerData } from '../classes/drawer-data';\n\nexport class BaseAction {\n\n  protected _visible = true;\n  protected _routerLink: IDrawerActionLink;\n\n  protected _icon: string;\n  protected readonly _show: IDrawerActionShowFn;\n  protected readonly _click: Function | null;\n  protected readonly _link: IDrawerActionLinkFn;\n\n  constructor(data: any = {}) {\n    this._icon = data.icon || '';\n    this._click = data.click || null;\n    this._link = data.link;\n    this._show = data.show || null;\n  }\n\n  get icon() {\n    return this._icon;\n  }\n\n  get click() {\n    return this._click;\n  }\n\n  get routerLink() {\n    return this._routerLink;\n  }\n\n  get visible() {\n    return this._visible\n  }\n\n  public checkVisibility(data: DrawerData) {\n    if (this._show) {\n      this._visible = this._show(data);\n    }\n  }\n\n  public updateRouterLink(data: IMenuActionClick) {\n    if (this._visible && this._link) {\n      this._routerLink = this._link(data);\n    }\n  }\n}\n","import { BaseAction } from './base-action';\nimport { DrawerData } from '../classes/drawer-data';\n\n\nexport class MenuAction extends BaseAction {\n  public actions: MenuAction[] = [];\n\n  private _label: string;\n\n  private readonly _isGroup: boolean = false;\n\n  constructor(data: any = {}) {\n    super(data);\n\n    if (Array.isArray(data.actions)) {\n      this._isGroup = true;\n\n      this.actions = data.actions.map((action) => new MenuAction(action));\n    }\n    this._label = data.label || '';\n  }\n\n  get isGroup() {\n    return this._isGroup;\n  }\n\n  get label() {\n    return this._label;\n  }\n\n  public updateRouterLink(data) {\n    super.updateRouterLink(data);\n\n    if (this.actions.length > 0) {\n      this.actions.forEach((action) => {\n        action.updateRouterLink(data);\n      })\n    }\n  }\n\n\n  public checkVisibility(data: DrawerData) {\n    super.checkVisibility(data);\n\n    if (this.actions.length > 0) {\n      this.actions.forEach((action) => {\n        action.checkVisibility(data);\n      })\n    }\n\n    if (this.actions.length > 0) {\n      this._visible = this.actions.some((action) => action.visible);\n    }\n  }\n}\n","import { FsDrawerAction } from '../helpers/action-type.enum';\nimport { BaseAction } from './base-action';\nimport { DrawerData } from '../classes/drawer-data';\nimport { MenuAction } from './menu-action.model';\n\n\nexport class Action extends BaseAction {\n  private _tooltip: string;\n  private _data: any = null;\n  private readonly _toggle: boolean;\n  private readonly _type: FsDrawerAction;\n  private readonly _name: string;\n  private readonly _close: boolean = false;\n  private readonly _closeSide: boolean = true;\n  private readonly _menuActions: MenuAction[] = [];\n  private readonly _component = null;\n  private readonly _menuRefName = null;\n\n  constructor(data: any = {}) {\n    super(data);\n    this._icon = data.icon || '';\n    this._type = data.type || '';\n    this._name = data.name || '';\n    this._toggle = data.toggle === void 0 ? true : data.toggle;\n    this._tooltip = data.tooltip || '';\n    this._close = !!data.close;\n    this._component = data.component || null;\n    this._data = data.data === void 0 ? {} : data.data;\n\n    if (this._type === FsDrawerAction.Component) {\n      this._menuRefName = data.name || data.icon;\n    }\n\n    if (this._type === FsDrawerAction.Menu && data.closeSide === void 0) {\n     this._closeSide = false;\n    } else {\n      this._closeSide = data.closeSide === void 0 ? true : !!data.closeSide;\n    }\n\n    if (Array.isArray(data.actions)) {\n      this._menuActions = data.actions.map((action) => new MenuAction(action));\n    }\n  }\n\n  get icon() {\n    return this._icon;\n  }\n\n  set icon(value: string) {\n    this._icon = value;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get toggle() {\n    return this._toggle;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get tooltip() {\n    return this._tooltip;\n  }\n\n  set tooltip(value: string) {\n    this._tooltip = value;\n  }\n\n  get close() {\n    return this._close;\n  }\n\n  get closeSide() {\n    return this._closeSide;\n  }\n\n  get menuActions() {\n    return this._menuActions;\n  }\n\n  get component() {\n    return this._component;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  set data(value: any) {\n    this._data = value;\n  }\n\n  get menuRefName() {\n    return this._menuRefName;\n  }\n\n  public updateRouterLink(data) {\n    if (this._visible) {\n      super.updateRouterLink(data);\n\n      if (this._menuActions.length > 0) {\n        this._menuActions.forEach((action) => {\n          action.updateRouterLink(data);\n        })\n      }\n    }\n  }\n\n  public checkVisibility(data: DrawerData) {\n    super.checkVisibility(data);\n\n    if (this._menuActions.length > 0) {\n      this._menuActions.forEach((action) => {\n        action.checkVisibility(data);\n      })\n    }\n\n    if (this.menuActions.length > 0) {\n      this._visible = this.menuActions.some((action) => action.visible);\n    }\n  }\n}\n","import { Action } from './action.model';\nimport { IDrawerConfig, IDrawerWidthConfig } from '../interfaces/drawer-config.interface';\n\n\nexport class DrawerConfig {\n  public disableClose: boolean;\n  public position: 'right' | 'left';\n  public activeAction: string;\n  public resizable: boolean;\n  public width: IDrawerWidthConfig;\n  public actions: Action[] | null;\n\n  constructor(data: IDrawerConfig = {}) {\n    this.disableClose = data.disableClose || false;\n    this.position = data.position || 'right';\n    this.activeAction = data.activeAction || '';\n\n    this.resizable = data.resizable === void 0 ? true : data.resizable;\n\n    if (data.width) {\n      this.width = data.width;\n    }\n\n    this.actions = data.actions && data.actions.map((action) => new Action(action)) || null;\n  }\n}\n","import { ComponentRef, ElementRef } from '@angular/core';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { OverlayRef } from '@angular/cdk/overlay';\n\nimport { BehaviorSubject, Observable, Subject, Subscriber, zip } from 'rxjs';\nimport { filter, take, takeUntil } from 'rxjs/operators';\n\nimport { DrawerData } from './drawer-data';\nimport { FsDrawerComponent } from '../components/drawer/drawer.component';\nimport { DrawerConfig } from '../models/drawer-config.model';\nimport { DrawerMenuRef } from '../classes/drawer-menu-ref';\nimport { IDrawerConfig } from '../interfaces/drawer-config.interface';\nimport { DrawerSizeController } from './drawer-size-controller';\n\n\nexport class DrawerRef<T, R = any> {\n\n  public readonly drawerConfig: DrawerConfig;\n\n  /** Subject for notifying the user that the drawer has finished opening. */\n  private readonly _afterOpened$ = new Subject<void>();\n\n  /** Subject for notifying the user that the drawer has finished closing. */\n  private readonly _afterClosed$ = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the drawer has started closing. */\n  private readonly _closeStart$ = new Subject<Subscriber<void>>();\n\n  /** Subject for notifying the user that the drawer has started opening. */\n  private readonly _openStart$ = new Subject<Subscriber<void>>();\n\n  /** Subject for notifying the user that the drawer has started closing. */\n  private readonly _sideToggle = new Subject<boolean>();\n\n  /** Subject for notifying the user that the drawer has finished opening. */\n  private readonly _actionsUpdated$ = new Subject<string>();\n\n  /** Destroy notifier **/\n  private readonly _destroy$ = new Subject<void>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Main drawer component and template */\n  private _drawerContainerRef: FsDrawerComponent;\n\n  /** Main drawer component and template */\n  private _drawerComponentRef: ComponentRef<T>;\n\n  /** Drawer Content Template */\n  private _drawerContentContainer: ElementRef;\n\n  /** Drawer Actions Template */\n  private _drawerActionsContainer: ElementRef;\n\n  private _resizeController: DrawerSizeController;\n\n  private _activeAction = new BehaviorSubject<string>(void 0);\n\n  private _menuRefs = new Map<string, DrawerMenuRef<T, R>>();\n\n  private _isOpen = false;\n  private _isSideOpen = false;\n\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _dataFactory: DrawerData,\n    _config: IDrawerConfig\n  ) {\n    this.drawerConfig = new DrawerConfig(_config);\n    this._activeAction.next(this.drawerConfig.activeAction);\n  }\n\n  public get overlayRef() {\n    return this._overlayRef;\n  }\n\n  /**\n   * Getter for DRAWER_DATA for current drawer\n   */\n  public get drawerData() {\n    return { ...this._dataFactory.getValue() } // Like immutable.... TODO switch to Immer\n  }\n\n  public get destroy$() {\n    return this._destroy$.asObservable();\n  }\n\n  /**\n   * Set reference to drawer container\n   * @param value\n   */\n  public set containerRef(value: FsDrawerComponent) {\n    this._drawerContainerRef = value;\n  }\n\n  /**\n   * Set reference to drawer component\n   * @param value\n   */\n  public set componentRef(value: ComponentRef<T>) {\n    this._drawerComponentRef = value;\n  }\n\n  public set drawerContentContainer(value: ElementRef) {\n    this._drawerContentContainer = value;\n  }\n\n  public set drawerActionsContainer(value: ElementRef) {\n    this._drawerActionsContainer = value;\n  }\n\n  public get drawerContentContainer(): ElementRef {\n    return this._drawerContentContainer;\n  }\n\n  public get drawerActionsContainer(): ElementRef {\n    return this._drawerActionsContainer;\n  }\n\n  public get activeAction() {\n    return this._activeAction.getValue();\n  }\n\n  public get activeAction$() {\n    return this._activeAction.pipe(takeUntil(this._destroy$));\n  }\n\n  /**\n   * Return actual status of the drawer\n   */\n  public get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  /**\n   * Return actual status of the side of the drawer\n   */\n  public get isSideOpen(): boolean {\n    return this._isSideOpen;\n  }\n\n  public set resizeController(value: DrawerSizeController) {\n    this._resizeController = value;\n  }\n\n  public get resizeController(): DrawerSizeController {\n    return this._resizeController;\n  }\n\n  /**\n   * Gets an observable that action was updated and change detection should be started\n   */\n  public get actionUpdated$(): Observable<string> {\n    return this._actionsUpdated$.pipe(takeUntil(this._destroy$));\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  public get afterClosed$(): Observable<R | undefined> {\n    return this._afterClosed$.pipe(takeUntil(this._destroy$));\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  public get afterOpened$(): Observable<void> {\n    return this._afterOpened$.pipe(takeUntil(this._destroy$));\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog open starts.\n   */\n  public get openStart$(): Observable<Subscriber<void>> {\n    return this._openStart$.pipe(takeUntil(this._destroy$));\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  public get closeStart$(): Observable<Subscriber<void>> {\n    return this._closeStart$.pipe(takeUntil(this._destroy$));\n  }\n\n  /**\n   * Gets an observable that is notified when data in DRAWER_DATA was changed\n   */\n  public get dataChanged$(): Observable<any> {\n    return this._dataFactory.dataChange$;\n  }\n\n  /**\n   * Gets an observable that is notify that side status toggled\n   */\n  public get sideToggle$(): Observable<boolean> {\n    return this._sideToggle.pipe(takeUntil(this._destroy$));\n  }\n\n  /**\n   * Subscribe on keydown events to react on escape\n   */\n  public events() {\n    this._overlayRef.keydownEvents()\n      .pipe(\n        filter(event => event.keyCode === ESCAPE && !this.drawerConfig.disableClose),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Set value for DRAWER_DATA\n   * @param data\n   */\n  public dataChange(data) {\n    this._dataFactory.setValue(data);\n  }\n\n  /**\n   * Open drawer and notify observable\n   */\n  public open() {\n    new Observable<void>((obs) => {\n      setTimeout(() => { // FIXME Crutch\n        if (this._openStart$.observers.length) {\n          this._openStart$.next(obs);\n        } else {\n          obs.next();\n          obs.complete();\n        }\n      });\n    }).pipe(takeUntil(this._destroy$))\n      .subscribe({\n        next: () => {\n          if (this.activeAction) {\n            this.openSide();\n          }\n\n          this._drawerContainerRef.open();\n          this._afterOpened$.next();\n          this._afterOpened$.complete();\n        },\n        error: () => {\n          this.destroy();\n        },\n    });\n  }\n\n  /**\n   * Close the drawer.\n   * @param result Optional result to return to the dialog opener.\n   */\n  public close(result?: R): void {\n    new Observable<void>(observer => {\n      if (this._closeStart$.observers.length) {\n        zip(...this._closeStart$.observers.map(item => {\n          return Observable.create(closeObserver => {\n            item.next(closeObserver);\n          });\n        }))\n        .pipe(\n          takeUntil(this._destroy$)\n        )\n        .subscribe(() => {\n          observer.next();\n          observer.complete();\n        }, () => {\n          observer.error();\n        });\n      } else {\n        observer.next();\n        observer.complete();\n      }\n\n    }).pipe(takeUntil(this._destroy$))\n      .subscribe({\n      next: () => {\n        this._drawerContainerRef.close();\n        this._result = result;\n        this._afterClosed$.next(result);\n        this.destroy();\n      }\n    });\n  }\n\n  /**\n   * Open the side of the drawer\n   */\n  public openSide() {\n    this._isSideOpen = true;\n    this._sideToggle.next(this._isSideOpen);\n  }\n\n  /**\n   * Close the side of the drawer\n   */\n  public closeSide() {\n    this._isSideOpen = false;\n    this._sideToggle.next(this._isSideOpen);\n\n    this.setActiveAction(null);\n  }\n\n  /**\n   * Toggle the side of the drawer\n   */\n  public toggleSide() {\n    this.isSideOpen ? this.closeSide() : this.openSide();\n  }\n\n  /**\n   * Change active action\n   * @param name\n   */\n  public setActiveAction(name: string) {\n    this._activeAction.next(name);\n\n    if (name) {\n      this.openSide();\n    }\n  }\n\n  /**\n   * Store opened menu reference and subscribe for auto remove\n   * @param name\n   * @param ref\n   */\n  public addMenuRef(name: string, ref: DrawerMenuRef<T, R>) {\n    this._menuRefs.set(name, ref);\n\n    ref.afterClosed()\n      .pipe(\n        take(1),\n        takeUntil(this._destroy$)\n      )\n      .subscribe(() => {\n        this._menuRefs.delete(name);\n      })\n  }\n\n  /**\n   * Get opened menu reference by name\n   * @param name\n   */\n  public getMenuRef(name: string) {\n    return this._menuRefs.get(name);\n  }\n\n  public getAction(name: string) {\n    return this.drawerConfig.actions.find((action) => action.name === name);\n  }\n\n  /**\n   * Do update for icon for target action\n   * @param name\n   * @param icon\n   */\n  public updateActionIcon(name: string, icon: string) {\n    const action = this.getAction(name);\n\n    if (action) {\n      action.icon = icon;\n\n      this._actionsUpdated$.next(name);\n    }\n  }\n\n  /**\n   * Do update\n   * @param name\n   * @param data\n   */\n  public updateAction(name: string, data) {\n    const action = this.getAction(name);\n\n    if (action) {\n      const allowedFields = ['icon', 'type', 'toggle', 'tooltip', 'close', 'closeSide', 'component', 'data'];\n\n      const forUpdate = Object.keys(data).filter((key) => allowedFields.indexOf(key) > -1);\n\n      forUpdate.forEach((key) => {\n        action[key] = data[key];\n      });\n\n      this._actionsUpdated$.next(name);\n    }\n  }\n\n  public updateDrawerWidth(width: number) {\n    this.resizeController.updateMainWidth(width);\n  }\n\n  public updateSideDrawerWidth(width: number) {\n    this.resizeController.updateSideWidth(width);\n  }\n\n  public destroy() {\n    this._overlayRef.detachBackdrop();\n    this._overlayRef.detach();\n    this._drawerComponentRef.destroy();\n    this._dataFactory.destroy();\n\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n}\n\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n} from '@angular/core';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport { DrawerMenuRef } from '../../classes/drawer-menu-ref';\n\n@Component({\n  selector: 'fs-drawer-menu',\n  templateUrl: 'drawer-menu.component.html',\n  styleUrls: [ 'drawer-menu.component.scss' ],\n  host: {\n    'class': 'mat-elevation-z2'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FsDrawerMenuComponent extends BasePortalOutlet {\n\n  @ViewChild(CdkPortalOutlet, { static: true }) _portalOutlet: CdkPortalOutlet;\n\n  public ref: DrawerMenuRef<any>;\n\n  constructor() {\n    super();\n  }\n\n  public setDrawerMenuRef(value: DrawerMenuRef<any>) {\n    this.ref = value;\n\n    // this.config = this.externalMenuRef.config;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  public attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Drawer component already attached');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  public attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Drawer template already attached');\n    }\n\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n}\n","import { ComponentRef } from '@angular/core';\nimport { OverlayRef } from '@angular/cdk/overlay';\n\nimport { Observable, Subject, Subscriber, zip } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { FsDrawerMenuComponent } from '../components/drawer-menu/drawer-menu.component';\nimport { DrawerData } from './drawer-data';\n\nexport class DrawerMenuRef<TCmp, R = any> {\n\n  /** Subject for notifying the user that the menu has finished closing. */\n  private readonly _afterClosed$ = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the menu has started closing. */\n  private readonly _closeStart$ = new Subject<Subscriber<void>>();\n\n  /** Destroy notifier **/\n  private readonly _destroy$ = new Subject<void>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Main menu component and template */\n  private _externalMenuContainerRef: FsDrawerMenuComponent;\n\n  /** Main menu component and template */\n  private _externalMenuComponentRef: ComponentRef<TCmp>;\n\n\n  constructor(private _overlayRef: OverlayRef, private _dataFactory: DrawerData) {\n    this._overlayRef.backdropClick()\n      .pipe(\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => {\n        this.close();\n      })\n  }\n\n  /**\n   * Getter for DRAWER_MENU_DATA for current drawer\n   */\n  get menuData() {\n    return { ...this._dataFactory.getValue() } // Like immutable.... TODO switch to Immer\n  }\n\n  /**\n   * Set reference to menu container\n   * @param value\n   */\n  set containerRef(value: FsDrawerMenuComponent) {\n    this._externalMenuContainerRef = value;\n  }\n\n  /**\n   * Set reference to menu component\n   * @param value\n   */\n  set componentRef(value: ComponentRef<TCmp>) {\n    this._externalMenuComponentRef = value;\n  }\n\n  /**\n   * Gets an observable that is notified when data in DRAWER_DATA was changed\n   */\n  get dataChanged$(): Observable<void> {\n    return this._dataFactory.dataChange$;\n  }\n\n  /**\n   * Set value for DRAWER_DATA\n   * @param data\n   */\n  public dataChange(data) {\n    this._dataFactory.setValue(data);\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  public afterClosed(): Observable<R | undefined> {\n    return this._afterClosed$.pipe(takeUntil(this._destroy$));\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  public closeStart(): Observable<Subscriber<void>> {\n    return this._closeStart$.pipe(takeUntil(this._destroy$));\n  }\n\n  /**\n   * Close the menu.\n   * @param result Optional result to return to the dialog opener.\n   */\n  public close(result?: R): void {\n    new Observable<void>(observer => {\n      if (this._closeStart$.observers.length) {\n        zip(...this._closeStart$.observers.map(item => {\n          return Observable.create(closeObserver => {\n            item.next(closeObserver);\n          });\n        }))\n        .pipe(\n          takeUntil(this._destroy$)\n        )\n        .subscribe(() => {\n          observer.next();\n          observer.complete();\n        }, () => {\n          observer.error();\n        });\n      } else {\n        observer.next();\n        observer.complete();\n      }\n\n    }).pipe(takeUntil(this._destroy$))\n      .subscribe({\n      next: () => {\n        this._result = result;\n        this._afterClosed$.next(result);\n        this.destroy();\n      }\n    });\n  }\n\n\n  public destroy() {\n    this._overlayRef.detachBackdrop();\n    this._overlayRef.detach();\n    this._externalMenuComponentRef && this._externalMenuComponentRef.destroy();\n\n    this._dataFactory.destroy();\n\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n\n}\n","import { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n\nexport class DrawerData {\n\n  private _data;\n  private _dataChange = new Subject<any>();\n  private _destroy = new Subject<void>();\n\n  constructor(data: any = {}) {\n    this._data = data;\n  }\n\n  public static createWithProxy(data: any = {}) {\n    const drawerData = new DrawerData(data);\n\n    return new Proxy(drawerData, {\n      get(target, property) {\n        if (typeof target[property] === 'function'\n          || property === '_data'\n          || target[property] instanceof Observable\n        ) {\n          return target[property];\n        } else {\n          return target._data[property];\n        }\n      },\n\n      set(target, property, value) {\n        if (property !== '_data') {\n          target._data[property] = value;\n        } else {\n          target[property] = value;\n        }\n\n        return true;\n      },\n\n      has(target, property) {\n        return property in target._data;\n      },\n\n      ownKeys(target) {\n        return Object.keys(target._data);\n      },\n\n      enumerate(target) {\n        return Object.keys(target._data);\n      },\n\n      getOwnPropertyDescriptor(target, property) {\n        return Object.getOwnPropertyDescriptor(target._data, property);\n      }\n    });\n  }\n\n  get dataChange$(): Observable<void> {\n    return this._dataChange.pipe(takeUntil(this._destroy));\n  }\n\n  public getValue() {\n    return this._data;\n  }\n\n  public setValue(value) {\n    this._data = value;\n    this._dataChange.next(this._data);\n  }\n\n  public destroy() {\n    this._destroy.next();\n    this._destroy.complete();\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a drawer. */\nexport const DRAWER_MENU_DATA = new InjectionToken<any>('fs.drawer.menu-data');\n","import {ElementRef, Injectable, Injector} from '@angular/core';\nimport { ConnectedPosition, Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, ComponentType, PortalInjector } from '@angular/cdk/portal';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\nimport { FsDrawerMenuComponent } from '../components/drawer-menu/drawer-menu.component';\nimport { DrawerMenuRef } from '../classes/drawer-menu-ref';\nimport { DrawerData } from '../classes/drawer-data';\nimport { DRAWER_MENU_DATA } from '../services/drawer-menu-data';\n\n\n@Injectable()\nexport class FsDrawerMenuService {\n\n  constructor(private _overlay: Overlay,\n              private _injector: Injector,\n              private _breakpointObserver: BreakpointObserver) {\n  }\n\n  public create(component: ComponentType<any>, container: Element, config?: any) {\n    const overlayRef = this.createOverlay(container);\n    const dataFactory = DrawerData.createWithProxy(config.data);\n    const menuRef = new DrawerMenuRef(overlayRef, dataFactory);\n    const containerRef = this.attachContainer(overlayRef, menuRef, dataFactory);\n    const componentRef = this.attachComponent(component, containerRef, menuRef, dataFactory);\n    menuRef.containerRef = containerRef;\n    containerRef.setDrawerMenuRef(menuRef);\n\n    menuRef.componentRef = componentRef;\n\n    return menuRef;\n  }\n\n  private createOverlay(container: Element): OverlayRef {\n    const overlayConfig = this.getOverlayConfig(container);\n    return this._overlay.create(overlayConfig);\n  }\n\n  private getOverlayConfig(container: Element): OverlayConfig {\n    const element = new ElementRef(container); // positionStrategy needs ElementRef;\n\n    let strategy = null;\n    if (this._breakpointObserver.isMatched(Breakpoints.XSmall)) {\n      strategy = this._overlay\n        .position()\n        .global()\n        .centerHorizontally()\n        .centerVertically();\n    } else {\n      const positions: ConnectedPosition[] = [\n        { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' }\n      ];\n      strategy = this._overlay\n        .position()\n        .flexibleConnectedTo(element)\n        .withPositions(positions);\n    }\n\n    return new OverlayConfig({\n      positionStrategy: strategy,\n      scrollStrategy:  this._overlay.scrollStrategies.reposition(),\n      hasBackdrop: true,\n      backdropClass: 'cdk-overlay-transparent-backdrop'\n    });\n  }\n\n  private attachContainer<T, R>(overlayRef: OverlayRef, menuRef: DrawerMenuRef<T, R>, dataFactory: DrawerData) {\n    const injector = this.createInjector(menuRef, dataFactory);\n    const containerPortal = new ComponentPortal(FsDrawerMenuComponent, undefined, injector);\n    const containerRef = overlayRef.attach<FsDrawerMenuComponent>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  private attachComponent<T, R>(\n    componentRef: ComponentType<T>,\n    externalContainer: FsDrawerMenuComponent,\n    externalRef: DrawerMenuRef<T, R>,\n    config: any,\n  ) {\n\n    const injector = this.createInjector(externalRef, config);\n\n    return externalContainer.attachComponentPortal<T>(\n      new ComponentPortal<T>(componentRef, undefined, injector)\n    );\n  }\n\n\n  private createInjector(componentRef, dataFactory: DrawerData) {\n    const injectionTokens = new WeakMap<any, any>([\n      [DrawerMenuRef, componentRef],\n      [DRAWER_MENU_DATA, dataFactory]\n    ]);\n\n    return new PortalInjector(this._injector, injectionTokens);\n  }\n}\n","import {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { FsDrawerAction } from '../../helpers/action-type.enum';\nimport { DrawerRef } from '../../classes/drawer-ref';\nimport { Action } from '../../models/action.model';\nimport { FsDrawerMenuService } from '../../services/drawer-menu.service';\n\n\n@Component({\n  selector: 'fs-drawer-actions',\n  templateUrl: './drawer-actions.component.html',\n  styleUrls: [ './drawer-actions.component.scss' ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FsDrawerActionsComponent implements OnInit, OnDestroy {\n  @Input() public actions: Action[];\n  @Input() public activeAction: string;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private _drawerRef: DrawerRef<any>,\n    private _drawerMenu: FsDrawerMenuService,\n    private _cdRef: ChangeDetectorRef,\n  ) {}\n\n  public ngOnInit() {\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public actionClick(action, event) {\n    const hasComponentType = action.type === FsDrawerAction.Component;\n    const hasMenuType = action.type === FsDrawerAction.Menu;\n\n    if (hasComponentType) {\n      const menuRef = this._drawerMenu.create(action.component, event.srcElement, action);\n\n      this._drawerRef.addMenuRef(action.menuRefName, menuRef);\n\n      const params = {\n        event: event,\n        action: action,\n        drawerRef: this._drawerRef,\n        menuRef: menuRef\n      };\n      // Call click\n      action.click.call(null, params);\n\n      if (action.closeSide) {\n        this._drawerRef.closeSide();\n      }\n    } else if (action.click) {\n      const params = { event: event, action: action };\n      action.click.call(null, params);\n    }\n\n    if (action.close) {\n      this._drawerRef.close();\n    }\n\n    if (action.toggle && ((!hasComponentType && !hasMenuType) || action.closeSide)) {\n      if (this._drawerRef.isSideOpen && this._drawerRef.activeAction === action.name) {\n        this._drawerRef.toggleSide();\n      } else {\n        this._drawerRef.setActiveAction(action.name);\n      }\n    }\n  }\n\n}\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\n\nimport { fromEvent, Subject } from 'rxjs';\nimport { debounceTime, delay, takeUntil } from 'rxjs/operators';\n\nimport { DrawerRef } from '../classes/drawer-ref';\nimport { FsDrawerResizerDirective } from '../directives/drawer-resizer.directive';\nimport { IDrawerWidthDefinition } from '../interfaces/drawer-config.interface';\n\nconst MAIN_DRAWER_DEFAULT_WIDTH = 500;\nconst SIDE_DRAWER_DEFAULT_WIDTH = 200;\nconst SIDE_RESIZE_BAR_WIDTH = 25;\nconst MAIN_RESIZE_ACTION_BAR_WIDTH = 40;\n\n@Injectable()\nexport class DrawerSizeController implements OnDestroy {\n\n  private _mainElRef: FsDrawerResizerDirective;\n  private _sideElRef: FsDrawerResizerDirective;\n\n  private _mainConfig: IDrawerWidthDefinition;\n  private _sideConfig: IDrawerWidthDefinition;\n\n  private _sideOpened = false;\n  private _screenWidth: number;\n\n  private readonly _borderPadding = 0;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    private _drawerRef: DrawerRef<any>,\n    private _ngZone: NgZone,\n  ) {\n    this._initDefaultConfigs();\n    this._updateScreenWidth();\n    this._listenWindowResize();\n    this._listenSideToggle();\n  }\n\n  public get mainElRef() {\n    return this._mainElRef;\n  }\n\n  public get sideElRef() {\n    return this._sideElRef;\n  }\n\n  public get mainConfig(): IDrawerWidthDefinition {\n    return this._mainConfig;\n  }\n\n  public get sideConfig(): IDrawerWidthDefinition {\n    return this._sideConfig;\n  }\n\n  public get screenWidth(): number {\n    return this._screenWidth;\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public registerElRef(el: FsDrawerResizerDirective) {\n    if (el.type === 'main') {\n      this._registerMainRef(el);\n    } else if (el.type === 'side') {\n      this._registerSideRef(el);\n    } else {\n      throw Error('Unrecognized resize element type')\n    }\n  }\n\n  public getInitialWidth(type: 'main' | 'side'): number {\n    if (type === 'main') {\n      return this.mainConfig.initial;\n    } else if (type === 'side') {\n      return this.sideConfig.initial;\n    } else {\n      return void 0;\n    }\n  }\n\n  public getMinWidth(type: 'main' | 'side'): number {\n    if (type === 'main') {\n      return this.mainConfig.min;\n    } else if (type === 'side') {\n      return this.sideConfig.min;\n    } else {\n      return void 0;\n    }\n  }\n\n  public getMaxWidth(type: 'main' | 'side'): number {\n    if (type === 'main') {\n      return this.mainConfig.max;\n    } else if (type === 'side') {\n      return this.sideConfig.max;\n    } else {\n      return void 0;\n    }\n  }\n\n  /**\n   * Update width from outside with all calculations to be done\n   * @param width\n   */\n  public updateMainWidth(width: number) {\n    const sideWidth = (this.sideElRef && this.sideElRef.width) || 0;\n    this.mainElRef.updateWidth(sideWidth + width);\n  }\n\n  /**\n   * Update width from outside with all calculations to be done\n   * @param width\n   */\n  public updateSideWidth(width: number) {\n    if (this.sideElRef) {\n      const currentWidth = this.mainElRef.width - this.sideElRef.width;\n      this.mainElRef.updateWidth(currentWidth + width);\n      this.sideElRef.updateWidth(width);\n    }\n  }\n\n  /**\n   * Push current drawer to be visible under new one opened\n   * @param inFrontDrawer\n   */\n  public pushMainWidth(inFrontDrawer: DrawerRef<any>) {\n    const inFrontDrawerTotalWidth = inFrontDrawer.resizeController.mainElRef.width + MAIN_RESIZE_ACTION_BAR_WIDTH;\n\n    if (this.mainElRef.width <= inFrontDrawerTotalWidth) {\n      this.updateMainWidth(inFrontDrawerTotalWidth);\n    }\n  }\n\n  /**\n   * Listen for browser resize and update restrictions\n   */\n  private _listenWindowResize() {\n    this._ngZone.runOutsideAngular(() => {\n      fromEvent(window, 'resize')\n        .pipe(\n          debounceTime(50),\n          takeUntil(this._destroy$),\n        )\n        .subscribe(() => {\n          this._updateScreenWidth();\n          this._updateMinMaxStyles();\n        });\n    });\n  }\n\n  /**\n   * Copy initial configs or set default values\n   */\n  private _initDefaultConfigs() {\n    this._mainConfig =\n      (this._drawerRef.drawerConfig.width && this._drawerRef.drawerConfig.width.main)\n      || {};\n\n    this._mainConfig.initial = this._mainConfig.initial || MAIN_DRAWER_DEFAULT_WIDTH;\n\n    this._sideConfig =\n      (this._drawerRef.drawerConfig.width && this._drawerRef.drawerConfig.width.side)\n      || {};\n\n    this._sideConfig.initial = this._sideConfig.initial || SIDE_DRAWER_DEFAULT_WIDTH;\n  }\n\n  private _registerMainRef(el: FsDrawerResizerDirective) {\n    this._mainElRef = el;\n  }\n\n  private _registerSideRef(el: FsDrawerResizerDirective) {\n    this._sideElRef = el;\n  }\n\n  /**\n   * Update current window size\n   */\n  private _updateScreenWidth(): void {\n    this._screenWidth = (window.innerWidth - this._borderPadding);\n  }\n\n  /**\n   * Update min&max css props for containers\n   */\n  private _updateMinMaxStyles(): void {\n    this.mainElRef.setMinMaxStyles();\n\n    if (this.sideElRef) {\n      this.sideElRef.setMinMaxStyles();\n    }\n  }\n\n  private _listenSideToggle(): void {\n    this._drawerRef.sideToggle$\n      .pipe(\n        takeUntil(this._destroy$),\n      )\n      .subscribe((opened: boolean) => {\n        if (this._sideOpened === opened) {\n          return;\n        }\n\n        this._sideOpened = opened;\n\n        if (opened) {\n          const currentWidth = this.mainElRef.width;\n          const sideWidth = this.getInitialWidth('side');\n\n          this._mainElRef.updateWidth(currentWidth + sideWidth + SIDE_RESIZE_BAR_WIDTH);\n        } else {\n          const actualSideWidth = this.sideElRef.fsDrawerResizer.getBoundingClientRect().width;\n          const mainWidth = this.mainElRef.width - actualSideWidth - SIDE_RESIZE_BAR_WIDTH;\n\n          this._mainElRef.updateWidth(mainWidth);\n        }\n      })\n  }\n}\n","import {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\n\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { DrawerRef } from '../../classes/drawer-ref';\nimport { DrawerConfig } from '../../models/drawer-config.model';\nimport { FsDrawerMenuService } from '../../services/drawer-menu.service';\nimport { DrawerSizeController } from '../../classes/drawer-size-controller';\n\n\n@Component({\n  selector: 'fs-drawer',\n  templateUrl: './drawer.component.html',\n  providers: [\n    FsDrawerMenuService,\n    DrawerSizeController,\n  ],\n  host: {\n    'class': 'fs-drawer-container',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FsDrawerComponent extends BasePortalOutlet implements OnInit, OnDestroy {\n\n  public config: DrawerConfig;\n  public isOpen = false;\n  public isOpenSide = false;\n\n  public drawerRef: DrawerRef<any>;\n\n  public initialized = false;\n\n  @ViewChild(CdkPortalOutlet, { static: true })\n  private _portalOutlet: CdkPortalOutlet;\n\n  @ViewChild('drawerContentContainer', { static: true })\n  private _drawerContentContainer: ElementRef;\n\n  @ViewChild('drawerActionsContainer', { read: ElementRef, static: true })\n  private _drawerActionsContainer: ElementRef;\n\n  private _sideOpen = false;\n  private _destroy$ = new Subject();\n\n  constructor(\n    private _el: ElementRef<HTMLElement>,\n    private _drawerMenu: FsDrawerMenuService,\n    private _drawerRef: DrawerRef<any>,\n    private _cdRef: ChangeDetectorRef,\n    private _resizeController: DrawerSizeController,\n  ) {\n    super();\n\n    this._drawerRef.resizeController = this._resizeController;\n  }\n\n  public get sideOpen() {\n    return this._sideOpen;\n  }\n\n  public set sideOpen(value: boolean) {\n    this._sideOpen = value;\n\n    this._el.nativeElement.classList\n      .toggle('side-open', this.sideOpen);\n  }\n\n  public ngOnInit() {\n    this._listenDataChanges();\n  }\n\n  public ngOnDestroy(): void {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public open() {\n    this.isOpen = true;\n  }\n\n  public close() {\n    this.isOpen = false;\n  }\n\n  public openSide() {\n    this.isOpenSide = true;\n  }\n\n  public closeSide() {\n    this.isOpenSide = false;\n  }\n\n  public setDrawerRef(value: DrawerRef<any>) {\n    this.drawerRef = value;\n\n    this.config = this.drawerRef.drawerConfig;\n\n    // Need to be like a parent for children resize\n    this.drawerRef.drawerContentContainer = this._drawerContentContainer;\n    this.drawerRef.drawerActionsContainer = this._drawerActionsContainer;\n\n    this.drawerRef.sideToggle$\n      .pipe(\n        takeUntil(this._destroy$),\n      )\n      .subscribe((opened) => {\n        this.sideOpen = opened;\n      });\n\n    this.initialized = true;\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  public attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Drawer component already attached');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  public attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Drawer template already attached');\n    }\n\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  private _listenDataChanges() {\n    this._drawerRef.dataChanged$\n      .pipe(\n        takeUntil(this._destroy$)\n      )\n      .subscribe(() => {\n        this._cdRef.detectChanges();\n      });\n  }\n}\n","import { Directive, Input, } from '@angular/core';\n\n@Directive({\n  selector: '[fsDrawerAction]',\n})\nexport class FsDrawerActionDirective {\n\n  @Input('fsDrawerAction') public name: string;\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  Renderer2,\n  TemplateRef,\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { DrawerRef } from '../../classes/drawer-ref';\nimport { FsDrawerActionDirective } from '../../directives/drawer-action.directive';\n\n\n@Component({\n  selector: '[fsDrawerSide]',\n  templateUrl: './drawer-side.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: [\n    './drawer-side.component.scss',\n  ],\n})\nexport class FsDrawerSideComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  @Input('fsDrawerSide') public drawer: DrawerRef<any>;\n\n  @HostBinding('class.side') public classSide = true;\n\n  @ContentChildren(FsDrawerActionDirective) actions: QueryList<FsDrawerActionDirective>;\n\n  @ContentChildren(FsDrawerActionDirective, { read: TemplateRef })\n  actionsTemplates: QueryList<TemplateRef<any>>;\n\n  public activeTemplate: TemplateRef<any> = null;\n\n  private _hidden = false;\n  private _destroy$ = new EventEmitter();\n\n  constructor(\n    private _cdRef: ChangeDetectorRef,\n    private _renderer: Renderer2,\n    private _elRef: ElementRef,\n  ) {}\n\n  public set hidden(value: boolean) {\n    this._hidden = value;\n\n    if (this._hidden) {\n      this._renderer.setAttribute(this._elRef.nativeElement, 'hidden', 'true');\n    } else {\n      this._renderer.removeAttribute(this._elRef.nativeElement, 'hidden');\n    }\n  }\n  public ngOnInit() {\n\n    this.hidden = true;\n\n    if (!this.drawer) {\n      console.error('Drawer reference is null for @Input(\"fsDrawerSide\")');\n    }\n\n    this._subscribeToActionChanges();\n  }\n\n  public ngAfterViewInit() {\n    setTimeout(() => {\n      // Check current side status\n      if (this.drawer) {\n        this.hidden = !this.drawer.isSideOpen;\n      }\n\n      this._updateActiveActionTemplate();\n    });\n  }\n\n  public ngOnDestroy() {\n    this._destroy$.emit();\n    this._destroy$.complete();\n  }\n\n  private _subscribeToActionChanges() {\n    if (this.drawer) {\n      this.drawer.sideToggle$\n        .pipe(\n          takeUntil(this._destroy$),\n        )\n        .subscribe(() => {\n          this.hidden = !this.drawer.isSideOpen;\n          this._updateActiveActionTemplate();\n\n          this._cdRef.detectChanges();\n        });\n    }\n  }\n\n  private _updateActiveActionTemplate() {\n    if (this.drawer) {\n      const activatedAction = this.drawer.activeAction;\n\n      if (this.drawer.isSideOpen && activatedAction) {\n        const selectedActionIndex = this.actions\n          .toArray()\n          .findIndex((action) => action.name === activatedAction);\n\n        this.activeTemplate = this.actionsTemplates.toArray()[selectedActionIndex];\n      } else {\n        this.activeTemplate = null;\n      }\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component, EventEmitter,\n  Input,\n  OnChanges, OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\n\nimport { Subject } from 'rxjs';\nimport { debounceTime, filter, takeUntil } from 'rxjs/operators';\n\nimport { DrawerRef } from '../../../classes/drawer-ref';\nimport { FsDrawerAction } from '../../../helpers/action-type.enum';\nimport { Action } from '../../../models/action.model';\n\n\n@Component({\n  selector: 'fs-drawer-action-item',\n  templateUrl: './drawer-action-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FsDrawerActionItemComponent implements OnInit, OnChanges {\n  @Input()\n  public action: Action;\n\n  @Input()\n  public activeAction: string;\n\n  @Output()\n  public actionClicked = new EventEmitter();\n\n  public isActive = false;\n  public actionTypes = FsDrawerAction;\n\n  private _destroy$ = new Subject<void>();\n\n  constructor(\n    public drawer: DrawerRef<any>,\n    private _cdRef: ChangeDetectorRef,\n  ) {\n    this._listenActionChanges();\n    this._listenDataChanges();\n  }\n\n  public ngOnInit(): void {\n    this._updateVisibilityAndLinks();\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes.activeAction) {\n      this.isActive = this.action.name !== '' && this.action.name === this.activeAction;\n    }\n  }\n\n  public actionClick(event) {\n    this.actionClicked.emit(event);\n  }\n\n  public menuActionClick(action, event) {\n    if (action.click) {\n      action.click.call(null, {\n        data: this.drawer.drawerData,\n        event: event,\n        drawerRef: this.drawer,\n        action: action\n      });\n    }\n  }\n\n  private _listenActionChanges() {\n    this.drawer.actionUpdated$\n      .pipe(\n        filter((name) => name === this.action.name),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => {\n        this._cdRef.detectChanges();\n      })\n  }\n\n  private _listenDataChanges() {\n    this.drawer.dataChanged$\n      .pipe(\n        takeUntil(this._destroy$),\n        debounceTime(50),\n      )\n      .subscribe(() => {\n        this._updateVisibilityAndLinks();\n      });\n  }\n\n\n  private _updateVisibilityAndLinks() {\n    this._updateVisibility();\n    this._updateRouterLinks();\n\n    this._cdRef.detectChanges();\n  }\n\n  private _updateVisibility() {\n    this.action.checkVisibility(this.drawer.drawerData);\n  }\n\n  private _updateRouterLinks() {\n    if (this.action.type === this.actionTypes.Menu) {\n      this.action.updateRouterLink({\n        data: this.drawer.drawerData,\n        drawerRef: this.drawer\n      });\n    }\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: '[fsDrawerContent]',\n  template: '<div class=\"content\"><ng-content></ng-content></div>',\n  host: {\n    'class': 'content-container'\n  }\n})\nexport class FsDrawerContentComponent {}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { DrawerSizeController } from '../classes/drawer-size-controller';\n\n\n@Directive({\n  selector: '[fsDrawerResizer]',\n  host: {\n    '[style.cursor]': '\"col-resize\"',\n  }\n})\nexport class FsDrawerResizerDirective implements OnInit, OnDestroy {\n\n  @Input() public fsDrawerResizer = this._el.nativeElement;\n  @Input() public type: 'main' | 'side';\n  @Input() public direction = 'left';\n  @Input() public resizable = true;\n  @Input() public parentContainer: ElementRef;\n  @Input() public actionsContainer: ElementRef;\n  @Input() public sizeController: DrawerSizeController;\n\n  private _dragStartHandler = this._dragStart.bind(this);\n  private _dragHandler = this._drag.bind(this);\n  private _dragEndHandler = this._dragEnd.bind(this);\n\n  private _x = 0;\n  private _width = 0;\n  private _actionsWidth = 0;\n\n  private _destroy$ = new Subject();\n\n  constructor(\n    private _el: ElementRef,\n    private _renderer: Renderer2,\n    private _ngZone: NgZone,\n  ) {}\n\n  public get width(): number {\n    return this._width;\n  }\n\n  private get minWidth(): number {\n    const minWidth = this.sizeController.getMinWidth(this.type);\n\n    if (minWidth && minWidth >= 0) {\n      if (minWidth > this.sizeController.screenWidth) {\n        return this.sizeController.screenWidth;\n      } else {\n        return minWidth;\n      }\n    }\n  }\n\n  private get maxWidth(): number {\n    const maxWidth = this.sizeController.getMaxWidth(this.type);\n    let parentContainerWidth = null;\n\n    if (this.parentContainer) {\n      parentContainerWidth = this._getElementWidth(this.parentContainer.nativeElement);\n    }\n\n    if (parentContainerWidth !== null) {\n      return !maxWidth || maxWidth >= parentContainerWidth\n        ? parentContainerWidth - this._actionsWidth * 2\n        : maxWidth;\n    } else {\n      return !maxWidth || maxWidth >= this.sizeController.screenWidth\n        ? this.sizeController.screenWidth\n        : maxWidth;\n    }\n  }\n\n  public ngOnInit() {\n\n    this.sizeController.registerElRef(this);\n\n    if (this.resizable) {\n      this._ngZone.runOutsideAngular(() => {\n        this._el.nativeElement.addEventListener('mousedown', this._dragStartHandler, false);\n        this._el.nativeElement.addEventListener('touchstart', this._dragStartHandler, false);\n      });\n\n      if (this.actionsContainer) {\n        this._actionsWidth = this._getElementWidth(this.actionsContainer.nativeElement)\n      }\n\n      this.setMinMaxStyles();\n\n      const minWidth = this.sizeController.getMinWidth(this.type);\n      let width = this.sizeController.getInitialWidth(this.type)\n        || this._getElementWidth(this.fsDrawerResizer);\n\n      if (width < minWidth) {\n        width = minWidth;\n      }\n\n      this.updateWidth(width);\n    }\n  }\n\n  public updateWidth(width) {\n    this._width = width;\n\n    requestAnimationFrame(() => {\n      this._renderer.setStyle(this.fsDrawerResizer, 'width', `${width}px`);\n    });\n  }\n\n  public ngOnDestroy() {\n    this._el.nativeElement.removeEventListener('mousedown', this._dragStartHandler, false);\n    this._el.nativeElement.removeEventListener('touchstart', this._dragStartHandler, false);\n\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  /**\n   * Set inline styles min/max width\n   */\n  public setMinMaxStyles() {\n    requestAnimationFrame(() => {\n      this._renderer.setStyle(this.fsDrawerResizer, 'min-width', `${this.minWidth}px`);\n      this._renderer.setStyle(this.fsDrawerResizer, 'max-width', `${this.maxWidth}px`)\n    });\n  }\n\n  /**\n   * Subscribe to move events and init base dimensions/restrictions\n   * @param event { MouseEvent }\n   */\n  private _dragStart(event: MouseEvent) {\n\n    this._x = this._getClientX(event);\n    this._width = this._getElementWidth(this.fsDrawerResizer);\n\n    this.setMinMaxStyles();\n\n    document.addEventListener('touchmove', this._dragHandler, false);\n    document.addEventListener('touchend', this._dragEndHandler, false);\n\n    document.addEventListener('mousemove', this._dragHandler, false);\n    document.addEventListener('mouseup', this._dragEndHandler, false);\n  }\n\n  /**\n   * Update coordinates during drag\n   * @param event\n   */\n  private _drag(event: MouseEvent) {\n    const clientX = this._getClientX(event);\n\n    const predictedWidth = this._calcWidth(this.direction, clientX);\n\n    this._updatePosition(clientX, predictedWidth);\n    this._emitResizeEvent();\n  }\n\n  /**\n   * Remove listeners when drag finished\n   * @param event\n   */\n  private _dragEnd(event: MouseEvent) {\n    document.removeEventListener('mousemove', this._dragHandler, false);\n    document.removeEventListener('mouseup', this._dragEndHandler, false);\n    document.removeEventListener('touchmove', this._dragHandler, false);\n    document.removeEventListener('touchend', this._dragEndHandler, false);\n  }\n\n  /**\n   *\n   * @param event\n   */\n  private _getClientX(event) {\n    return event.touches ? event.touches[0].clientX : event.clientX;\n  }\n\n  /**\n   * Will return width of element\n   * @param el\n   */\n  private _getElementWidth(el) {\n    return el.getBoundingClientRect().width;\n  }\n\n  /**\n   * Update width and position of target element\n   * @param clientX\n   * @param width\n   */\n  private _updatePosition(clientX: number, width: number) {\n    this._x = clientX;\n    this.updateWidth(width < 0 ? 0 : width)\n  }\n\n  /**\n   * Calc new width based on offset from previous position\n   * @param direction\n   * @param clientX\n   */\n  private _calcWidth(direction, clientX) {\n    const directionSign = direction === 'left' ? -1 : 1;\n\n    return this._width + (this._x - clientX) * directionSign;\n  }\n\n  /**\n   * Resize event for Window\n   */\n  private _emitResizeEvent() {\n    const resizeEvent = window.document.createEvent('UIEvents');\n    resizeEvent.initEvent('resize', true, false);\n\n    window.dispatchEvent(resizeEvent);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\n/** Injection token that can be used to access the data that was passed in to a drawer. */\nexport const DRAWER_DATA = new InjectionToken<any>('DrawerData');\n","import { Injectable, Injector, OnDestroy, Optional, SkipSelf } from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, ComponentType, PortalInjector } from '@angular/cdk/portal';\n\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, delay } from 'rxjs/operators';\n\nimport { FsDrawerComponent } from '../components/drawer/drawer.component';\nimport { DrawerRef } from '../classes/drawer-ref';\nimport { DrawerData } from '../classes/drawer-data';\nimport { IDrawerConfig } from '../interfaces/drawer-config.interface';\nimport { DRAWER_DATA } from './drawer-data';\n\n\n@Injectable()\nexport class FsDrawerService implements OnDestroy {\n\n  private _drawerRefs = new Set<DrawerRef<any>>();\n  private _destroy$ = new Subject();\n\n  constructor(\n    @Optional() @SkipSelf() private _parentDrawerService: FsDrawerService,\n    private _overlay: Overlay,\n    private _injector: Injector) {\n  }\n\n  public ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n\n  public open<TData = any>(component: ComponentType<any>, config?: IDrawerConfig<TData>) {\n    const overlayRef = this._createOverlay();\n\n    const dataFactory = DrawerData.createWithProxy(config.data);\n    const drawerRef = new DrawerRef(overlayRef, dataFactory, config);\n\n    const containerRef = this._attachDrawerContainer(overlayRef, drawerRef, dataFactory);\n    const componentRef = this._attachComponent(component, containerRef, drawerRef, dataFactory);\n\n    drawerRef.containerRef = containerRef;\n    containerRef.setDrawerRef(drawerRef);\n\n    drawerRef.componentRef = componentRef;\n\n    drawerRef.events();\n    drawerRef.open();\n\n    this._storeDrawerRef(drawerRef);\n\n    merge(\n      drawerRef.afterOpened$,\n      drawerRef.afterClosed$\n    )\n    .pipe(\n      takeUntil(this._destroy$)\n    )\n    .subscribe(() => {\n      setTimeout(() => {\n        this._applyBackdrop();\n        this._applyBodyOpenClass();\n      });\n    });\n\n    return drawerRef;\n  }\n\n  public closeAll() {\n    this._drawerRefs.forEach((ref) => ref.close());\n\n    if (this._parentDrawerService) {\n      this._parentDrawerService.closeAll();\n    }\n  }\n\n  private _applyBackdrop() {\n    Array.from(this._drawerRefs)\n    .forEach((drawerRef, index) => {\n      const backdrop = drawerRef.overlayRef.backdropElement;\n\n      if (backdrop) {\n        if (index && index === (this._drawerRefs.size - 1)) {\n          backdrop.classList.add('fs-drawer-backdrop-active');\n        } else {\n          backdrop.classList.remove('fs-drawer-backdrop-active');\n        }\n      }\n    });\n  }\n\n  private _applyBodyOpenClass() {\n    if (this._drawerRefs.size) {\n      document.body.classList.add('fs-drawer-open');\n    } else {\n      document.body.classList.remove('fs-drawer-open');\n    }\n  }\n\n  private _storeDrawerRef(ref) {\n    this._drawerRefs.add(ref);\n\n    this._pushDrawersCascade();\n\n    ref.destroy$\n      .pipe(\n        take(1),\n        takeUntil(this._destroy$),\n      )\n      .subscribe(() => {\n        this._drawerRefs.delete(ref);\n      });\n  }\n\n  /**\n   * In case, when we want to open more than 1 drawer\n   * our previously opened drawers should be visible\n   *\n   *      d1   d2   d3\n   *     ---- ---- ---\n   *    | x  | x1 | x2\n   *    | y  | y1 | y2\n   *    | z  | z1 | z2\n   *     ---- ---- ---\n   *\n   * Where d1, d2 - previously opened drawers\n   * d1 and d2 must be pushed left to be visible under just opened d3\n   */\n  private _pushDrawersCascade() {\n    if (this._drawerRefs.size > 1) {\n      // SetTimeout should be here because we must wait render newly opened drawer\n      // to be able to get his width\n      setTimeout(() => {\n        const refsArr = Array.from(this._drawerRefs.values());\n\n        for (let i = refsArr.length - 1; i > 0; i--) {\n          const prevRef = refsArr[i - 1];\n          const currRef = refsArr[i];\n\n          prevRef.resizeController.pushMainWidth(currRef);\n        }\n      })\n    }\n  }\n\n  private _createOverlay(): OverlayRef {\n    const overlayConfig = this._getOverlayConfig();\n    return this._overlay.create(overlayConfig);\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      hasBackdrop: true,\n      backdropClass: 'fs-drawer-backdrop'\n    });\n  }\n\n  private _attachDrawerContainer<T, R>(\n    overlayRef: OverlayRef,\n    drawerRef: DrawerRef<T, R>,\n    dataFactory: DrawerData\n  ) {\n    const injector = this._createInjector(drawerRef, dataFactory);\n    const containerPortal = new ComponentPortal(FsDrawerComponent, undefined, injector);\n    const containerRef = overlayRef.attach<FsDrawerComponent>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  private _attachComponent<T, R>(\n    componentRef: ComponentType<T>,\n    drawerContainer: FsDrawerComponent,\n    drawerRef: DrawerRef<T, R>,\n    dataFactory: DrawerData,\n  ) {\n\n    const injector = this._createInjector(drawerRef, dataFactory);\n\n    return drawerContainer.attachComponentPortal<T>(\n      new ComponentPortal<T>(componentRef, undefined, injector)\n    );\n  }\n\n\n  private _createInjector(componentRef, dataFactory) {\n    const injectionTokens = new WeakMap<any, any>([\n      [DrawerRef, componentRef],\n      [DRAWER_DATA, dataFactory]\n    ]);\n\n    return new PortalInjector(this._injector, injectionTokens);\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\nimport { FsMenuModule } from '@firestitch/menu';\n\nimport { FsDrawerActionsComponent } from './components/drawer-actions/drawer-actions.component';\nimport { FsDrawerComponent } from './components/drawer/drawer.component';\nimport { FsDrawerSideComponent } from './components/drawer-side/drawer-side.component';\nimport { FsDrawerMenuComponent } from './components/drawer-menu/drawer-menu.component';\nimport { FsDrawerActionItemComponent } from './components/drawer-actions/drawer-action-item/drawer-action-item.component';\n\nimport { FsDrawerContentComponent } from './components/drawer-content/drawer-content.component';\nimport { FsDrawerActionDirective } from './directives/drawer-action.directive';\n\nimport { FsDrawerResizerDirective } from './directives/drawer-resizer.directive';\nimport { FsDrawerService } from './services/drawer.service';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatTooltipModule,\n    MatButtonModule,\n    MatIconModule,\n    OverlayModule,\n    PortalModule,\n    FsMenuModule,\n    MatMenuModule,\n  ],\n  exports: [\n    FsDrawerComponent,\n    FsDrawerSideComponent,\n    FsDrawerContentComponent,\n    FsDrawerActionDirective,\n    FsDrawerResizerDirective,\n  ],\n  declarations: [\n    FsDrawerSideComponent,\n    FsDrawerComponent,\n    FsDrawerActionsComponent,\n    FsDrawerActionItemComponent,\n    FsDrawerContentComponent,\n    FsDrawerActionDirective,\n    FsDrawerResizerDirective,\n    FsDrawerMenuComponent,\n  ],\n  providers: [FsDrawerService],\n})\nexport class FsDrawerModule {}\n"]}