import { ComponentRef, ElementRef } from '@angular/core';
import { OverlayRef } from '@angular/cdk/overlay';
import { Observable, Subscriber } from 'rxjs';
import { DrawerData } from './drawer-data';
import { FsDrawerComponent } from '../components/drawer/drawer.component';
import { DrawerConfig } from '../models/drawer-config.model';
import { DrawerMenuRef } from '../classes/drawer-menu-ref';
import { IDrawerConfig } from '../interfaces/drawer-config.interface';
import { DrawerSizeController } from './drawer-size-controller';
export declare class DrawerRef<T, R = any> {
    private _overlayRef;
    private _dataFactory;
    readonly drawerConfig: DrawerConfig;
    /** Subject for notifying the user that the drawer has finished opening. */
    private readonly _afterOpened$;
    /** Subject for notifying the user that the drawer has finished closing. */
    private readonly _afterClosed$;
    /** Subject for notifying the user that the drawer has started closing. */
    private readonly _closeStart$;
    /** Subject for notifying the user that the drawer has started opening. */
    private readonly _openStart$;
    /** Subject for notifying the user that the drawer has started closing. */
    private readonly _sideToggle;
    /** Subject for notifying the user that the drawer has finished opening. */
    private readonly _actionsUpdated$;
    /** Destroy notifier **/
    private readonly _destroy$;
    /** Result to be passed to afterClosed. */
    private _result;
    /** Main drawer component and template */
    private _drawerContainerRef;
    /** Main drawer component and template */
    private _drawerComponentRef;
    /** Drawer Content Template */
    private _drawerContentContainer;
    /** Drawer Actions Template */
    private _drawerActionsContainer;
    private _resizeController;
    private _activeAction;
    private _menuRefs;
    private _isOpen;
    private _isSideOpen;
    constructor(_overlayRef: OverlayRef, _dataFactory: DrawerData, _config: IDrawerConfig);
    get overlayRef(): OverlayRef;
    /**
     * Getter for DRAWER_DATA for current drawer
     */
    get drawerData(): any;
    get destroy$(): Observable<void>;
    /**
     * Set reference to drawer container
     * @param value
     */
    set containerRef(value: FsDrawerComponent);
    /**
     * Set reference to drawer component
     * @param value
     */
    set componentRef(value: ComponentRef<T>);
    set drawerContentContainer(value: ElementRef);
    set drawerActionsContainer(value: ElementRef);
    get drawerContentContainer(): ElementRef;
    get drawerActionsContainer(): ElementRef;
    get activeAction(): string;
    get activeAction$(): Observable<string>;
    /**
     * Return actual status of the drawer
     */
    get isOpen(): boolean;
    /**
     * Return actual status of the side of the drawer
     */
    get isSideOpen(): boolean;
    set resizeController(value: DrawerSizeController);
    get resizeController(): DrawerSizeController;
    /**
     * Gets an observable that action was updated and change detection should be started
     */
    get actionUpdated$(): Observable<string>;
    /**
     * Gets an observable that is notified when the dialog is finished closing.
     */
    get afterClosed$(): Observable<R | undefined>;
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     */
    get afterOpened$(): Observable<void>;
    /**
     * Gets an observable that is notified when the dialog open starts.
     */
    get openStart$(): Observable<Subscriber<void>>;
    /**
     * Gets an observable that is notified when the dialog is finished opening.
     */
    get closeStart$(): Observable<Subscriber<void>>;
    /**
     * Gets an observable that is notified when data in DRAWER_DATA was changed
     */
    get dataChanged$(): Observable<any>;
    /**
     * Gets an observable that is notify that side status toggled
     */
    get sideToggle$(): Observable<boolean>;
    /**
     * Subscribe on keydown events to react on escape
     */
    events(): void;
    /**
     * Set value for DRAWER_DATA
     * @param data
     */
    dataChange(data: any): void;
    /**
     * Open drawer and notify observable
     */
    open(): void;
    /**
     * Close the drawer.
     * @param result Optional result to return to the dialog opener.
     */
    close(result?: R): void;
    /**
     * Open the side of the drawer
     */
    openSide(): void;
    /**
     * Close the side of the drawer
     */
    closeSide(): void;
    /**
     * Toggle the side of the drawer
     */
    toggleSide(): void;
    /**
     * Change active action
     * @param name
     */
    setActiveAction(name: string): void;
    /**
     * Store opened menu reference and subscribe for auto remove
     * @param name
     * @param ref
     */
    addMenuRef(name: string, ref: DrawerMenuRef<T, R>): void;
    /**
     * Get opened menu reference by name
     * @param name
     */
    getMenuRef(name: string): DrawerMenuRef<T, R>;
    getAction(name: string): import("../models/action.model").Action;
    /**
     * Do update for icon for target action
     * @param name
     * @param icon
     */
    updateActionIcon(name: string, icon: string): void;
    /**
     * Do update
     * @param name
     * @param data
     */
    updateAction(name: string, data: any): void;
    updateDrawerWidth(width: number): void;
    updateSideDrawerWidth(width: number): void;
    destroy(): void;
}
