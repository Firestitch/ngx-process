import { ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { DrawerSizeController } from '../classes/drawer-size-controller';
export declare class FsDrawerResizerDirective implements OnInit, OnDestroy {
    private _el;
    private _renderer;
    private _ngZone;
    fsDrawerResizer: any;
    type: 'main' | 'side';
    direction: string;
    resizable: boolean;
    parentContainer: ElementRef;
    actionsContainer: ElementRef;
    sizeController: DrawerSizeController;
    private _dragStartHandler;
    private _dragHandler;
    private _dragEndHandler;
    private _x;
    private _width;
    private _actionsWidth;
    private _destroy$;
    constructor(_el: ElementRef, _renderer: Renderer2, _ngZone: NgZone);
    get width(): number;
    private get minWidth();
    private get maxWidth();
    ngOnInit(): void;
    updateWidth(width: any): void;
    ngOnDestroy(): void;
    /**
     * Set inline styles min/max width
     */
    setMinMaxStyles(): void;
    /**
     * Subscribe to move events and init base dimensions/restrictions
     * @param event { MouseEvent }
     */
    private _dragStart;
    /**
     * Update coordinates during drag
     * @param event
     */
    private _drag;
    /**
     * Remove listeners when drag finished
     * @param event
     */
    private _dragEnd;
    /**
     *
     * @param event
     */
    private _getClientX;
    /**
     * Will return width of element
     * @param el
     */
    private _getElementWidth;
    /**
     * Update width and position of target element
     * @param clientX
     * @param width
     */
    private _updatePosition;
    /**
     * Calc new width based on offset from previous position
     * @param direction
     * @param clientX
     */
    private _calcWidth;
    /**
     * Resize event for Window
     */
    private _emitResizeEvent;
}
