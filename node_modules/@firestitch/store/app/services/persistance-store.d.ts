import { ActivatedRoute } from '@angular/router';
import { FsStore } from './store.service';
import { FsPersistance, FsPersistanceConfig } from '../interfaces/persistance.interface';
import * as i0 from "@angular/core";
export declare class FsPersistanceStore<T extends FsPersistance = any, TData = any> {
    protected _store: FsStore;
    protected _route: ActivatedRoute;
    protected _value: {
        data: TData;
        date: Date;
    };
    protected _enabled: boolean;
    protected _namespace: string;
    protected _openedInDialog: boolean;
    protected _persistConfig: FsPersistanceConfig;
    protected STORE_KEY: string;
    constructor(_store: FsStore, _route: ActivatedRoute);
    get enabled(): boolean;
    get value(): {
        data: TData;
        date: Date;
    };
    get namespace(): string;
    setConfig(persistanceConfig: T, namespace: string, inDialog?: boolean): void;
    save(data: any, force?: boolean): void;
    /**
     * Restoring values from local storage
     */
    restore(): void;
    clear(): void;
    getDataFromScope<TScopeData = any>(name: string): TScopeData;
    saveDataToScope<TScopeData = any>(name: string, value: TScopeData): void;
    private _putDataToLocalStore;
    private _retrieveDataFromLocalStore;
    static ɵfac: i0.ɵɵFactoryDeclaration<FsPersistanceStore<any, any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<FsPersistanceStore<any, any>>;
}
