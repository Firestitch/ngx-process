import { Injectable } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { FsStore } from './store.service';
import { isAfter, subMinutes } from 'date-fns';
import { pickBy, cloneDeep } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "./store.service";
import * as i2 from "@angular/router";
export class FsPersistanceStore {
    constructor(_store, _route) {
        this._store = _store;
        this._route = _route;
        this._enabled = false;
        this._openedInDialog = false;
        // Initialize store
        if (!this._store.get(this.STORE_KEY)) {
            this._store.set(this.STORE_KEY, {});
        }
    }
    get enabled() {
        return this._enabled;
    }
    get value() {
        return cloneDeep(this._value);
    }
    get namespace() {
        return this._namespace;
    }
    setConfig(persistanceConfig, namespace, inDialog = false) {
        this._namespace = namespace;
        this._openedInDialog = inDialog;
        if (typeof persistanceConfig === 'object') {
            this._persistConfig = Object.assign({}, persistanceConfig);
        }
        else {
            this._persistConfig = {};
        }
        if (this._route.snapshot.queryParams.persist === 'clear') {
            this.save({}, true);
        }
        // if filter in dialog - we should disable persistance
        if (this._route.snapshot.queryParams.persist !== 'disable'
            && persistanceConfig
            && !this._openedInDialog) {
            this._enabled = true;
        }
        this.restore();
    }
    save(data, force = false) {
        if (!this._enabled && !force) {
            return;
        }
        if (typeof data === 'object') {
            data = pickBy(data, (val) => {
                return val !== null && val !== void 0;
            });
        }
        // if filter in dialog - we should disable persistance
        if (!this._namespace && !force) {
            return;
        }
        this._putDataToLocalStore({
            data,
            date: new Date()
        });
    }
    /**
     * Restoring values from local storage
     */
    restore() {
        if (!this.enabled) {
            return;
        }
        let value = this._retrieveDataFromLocalStore();
        // Default value if data doesn't exists
        if (!value || !value.data) {
            value = { data: {}, date: new Date() };
        }
        else if (value) {
            // Check if data is too old
            if (this._persistConfig.timeout) {
                const date = new Date(value.date);
                if (isAfter(subMinutes(date, this._persistConfig.timeout), new Date())) {
                    value = { data: {}, date: new Date() };
                }
            }
        }
        this._value = value;
    }
    clear() {
        this.save({});
    }
    getDataFromScope(name) {
        return this.value.data[name];
    }
    saveDataToScope(name, value) {
        const data = Object.assign(Object.assign({}, this.value.data), { [name]: value });
        this.save(data);
    }
    _putDataToLocalStore(value) {
        const storeData = this._store.get(this.STORE_KEY) || {};
        storeData[this._namespace] = value;
        this._value = value;
        this._store.set(this.STORE_KEY, storeData);
    }
    _retrieveDataFromLocalStore() {
        const storeData = this._store.get(this.STORE_KEY);
        if (storeData) {
            return storeData[this._namespace];
        }
        else {
            return {};
        }
    }
}
FsPersistanceStore.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPersistanceStore, deps: [{ token: i1.FsStore }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Injectable });
FsPersistanceStore.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPersistanceStore });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsPersistanceStore, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.FsStore }, { type: i2.ActivatedRoute }]; } });
//# sourceMappingURL=data:application/json;base64,