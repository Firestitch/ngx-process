(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('date-fns'), require('lodash-es'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@firestitch/store', ['exports', '@angular/core', '@angular/common', 'rxjs', 'date-fns', 'lodash-es', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firestitch = global.firestitch || {}, global.firestitch.store = {}), global.ng.core, global.ng.common, global.rxjs, global.dateFns, global.lodashEs, global.ng.router));
})(this, (function (exports, i0, common, rxjs, dateFns, lodashEs, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var FsStoreObject = /** @class */ (function () {
        function FsStoreObject(name, event, value) {
            this.name = name;
            this.event = event;
            this.value = value;
        }
        return FsStoreObject;
    }());
    FsStoreObject.EVENT_SET = 'set';
    FsStoreObject.EVENT_REMOVE = 'remove';
    FsStoreObject.EVENT_INIT = 'init';

    var FsStore = /** @class */ (function () {
        function FsStore() {
            this._storage = window.localStorage;
            this._storeObservers = [];
        }
        FsStore.prototype.observe = function (name) {
            var _this = this;
            return new rxjs.Observable(function (observer) {
                _this._getObservers().push({ name: name, observer: observer });
                observer.next(new FsStoreObject(name, FsStoreObject.EVENT_INIT, _this.get(name)));
            });
        };
        FsStore.prototype.get = function (key, options) {
            if (options === void 0) { options = {}; }
            if (this._storage.hasOwnProperty(key)) {
                try {
                    return JSON.parse(this._storage[key]);
                }
                catch (e) { }
            }
            if (options.default !== undefined) {
                return options.default;
            }
            return undefined;
        };
        FsStore.prototype.set = function (name, value, options) {
            if (options === void 0) { options = {}; }
            this._storage[name] = JSON.stringify(value);
            this._getObservers()
                .filter(function (storeObserver) {
                return storeObserver.name === name;
            }).forEach(function (storeObserver) {
                storeObserver.observer.next(new FsStoreObject(name, FsStoreObject.EVENT_SET, value));
            });
            return this;
        };
        FsStore.prototype.remove = function (name, options) {
            if (options === void 0) { options = {}; }
            delete this._storage[name];
            this._getObservers()
                .filter(function (item) {
                return item.name === name;
            })
                .forEach(function (storeObserver) {
                storeObserver.observer.next(new FsStoreObject(name, FsStoreObject.EVENT_REMOVE));
            });
            return this;
        };
        FsStore.prototype.clear = function () {
            var _loop_1 = function (i) {
                var key = this_1._storage.key(i);
                this_1._getObservers().forEach(function (item) {
                    item.observer.next(new FsStoreObject(key, FsStoreObject.EVENT_REMOVE));
                });
            };
            var this_1 = this;
            for (var i = 0; i < this._storage.length; i++) {
                _loop_1(i);
            }
            this._storage.clear();
            return this;
        };
        FsStore.prototype._getObservers = function () {
            return this._storeObservers;
        };
        return FsStore;
    }());
    FsStore.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsStore, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FsStore.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsStore });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsStore, decorators: [{
                type: i0.Injectable
            }] });

    var FsStoreModule = /** @class */ (function () {
        function FsStoreModule() {
        }
        FsStoreModule.forRoot = function () {
            return {
                ngModule: FsStoreModule,
                providers: [
                    FsStore
                ],
            };
        };
        return FsStoreModule;
    }());
    FsStoreModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsStoreModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FsStoreModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsStoreModule, imports: [common.CommonModule] });
    FsStoreModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsStoreModule, imports: [[
                common.CommonModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsStoreModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            common.CommonModule,
                        ]
                    }]
            }] });

    var FsPersistanceStore = /** @class */ (function () {
        function FsPersistanceStore(_store, _route) {
            this._store = _store;
            this._route = _route;
            this._enabled = false;
            this._openedInDialog = false;
            // Initialize store
            if (!this._store.get(this.STORE_KEY)) {
                this._store.set(this.STORE_KEY, {});
            }
        }
        Object.defineProperty(FsPersistanceStore.prototype, "enabled", {
            get: function () {
                return this._enabled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsPersistanceStore.prototype, "value", {
            get: function () {
                return lodashEs.cloneDeep(this._value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FsPersistanceStore.prototype, "namespace", {
            get: function () {
                return this._namespace;
            },
            enumerable: false,
            configurable: true
        });
        FsPersistanceStore.prototype.setConfig = function (persistanceConfig, namespace, inDialog) {
            if (inDialog === void 0) { inDialog = false; }
            this._namespace = namespace;
            this._openedInDialog = inDialog;
            if (typeof persistanceConfig === 'object') {
                this._persistConfig = Object.assign({}, persistanceConfig);
            }
            else {
                this._persistConfig = {};
            }
            if (this._route.snapshot.queryParams.persist === 'clear') {
                this.save({}, true);
            }
            // if filter in dialog - we should disable persistance
            if (this._route.snapshot.queryParams.persist !== 'disable'
                && persistanceConfig
                && !this._openedInDialog) {
                this._enabled = true;
            }
            this.restore();
        };
        FsPersistanceStore.prototype.save = function (data, force) {
            if (force === void 0) { force = false; }
            if (!this._enabled && !force) {
                return;
            }
            if (typeof data === 'object') {
                data = lodashEs.pickBy(data, function (val) {
                    return val !== null && val !== void 0;
                });
            }
            // if filter in dialog - we should disable persistance
            if (!this._namespace && !force) {
                return;
            }
            this._putDataToLocalStore({
                data: data,
                date: new Date()
            });
        };
        /**
         * Restoring values from local storage
         */
        FsPersistanceStore.prototype.restore = function () {
            if (!this.enabled) {
                return;
            }
            var value = this._retrieveDataFromLocalStore();
            // Default value if data doesn't exists
            if (!value || !value.data) {
                value = { data: {}, date: new Date() };
            }
            else if (value) {
                // Check if data is too old
                if (this._persistConfig.timeout) {
                    var date = new Date(value.date);
                    if (dateFns.isAfter(dateFns.subMinutes(date, this._persistConfig.timeout), new Date())) {
                        value = { data: {}, date: new Date() };
                    }
                }
            }
            this._value = value;
        };
        FsPersistanceStore.prototype.clear = function () {
            this.save({});
        };
        FsPersistanceStore.prototype.getDataFromScope = function (name) {
            return this.value.data[name];
        };
        FsPersistanceStore.prototype.saveDataToScope = function (name, value) {
            var _a;
            var data = Object.assign(Object.assign({}, this.value.data), (_a = {}, _a[name] = value, _a));
            this.save(data);
        };
        FsPersistanceStore.prototype._putDataToLocalStore = function (value) {
            var storeData = this._store.get(this.STORE_KEY) || {};
            storeData[this._namespace] = value;
            this._value = value;
            this._store.set(this.STORE_KEY, storeData);
        };
        FsPersistanceStore.prototype._retrieveDataFromLocalStore = function () {
            var storeData = this._store.get(this.STORE_KEY);
            if (storeData) {
                return storeData[this._namespace];
            }
            else {
                return {};
            }
        };
        return FsPersistanceStore;
    }());
    FsPersistanceStore.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPersistanceStore, deps: [{ token: FsStore }, { token: i2__namespace.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    FsPersistanceStore.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPersistanceStore });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FsPersistanceStore, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: FsStore }, { type: i2__namespace.ActivatedRoute }]; } });

    /*
     * Public API Surface of fs-menu
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FsPersistanceStore = FsPersistanceStore;
    exports.FsStore = FsStore;
    exports.FsStoreModule = FsStoreModule;
    exports.FsStoreObject = FsStoreObject;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=firestitch-store.umd.js.map
