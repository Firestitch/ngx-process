import * as i0 from '@angular/core';
import { Directive, HostListener, Injectable, Component, ViewChild, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { isString } from 'lodash-es';
import { interval, Subject, fromEvent } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';

function postMessage(data) {
    window.parent.postMessage('fs-iframe:' + JSON.stringify(data), '*');
}

class FsIFrameScrollToDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    ngOnInit() {
        this.renderer.addClass(this.elementRef.nativeElement, 'fs-iframe-scrollto');
    }
    onClick(event) {
        postMessage({ name: 'scrollto', value: this.elementRef.nativeElement.getBoundingClientRect().top });
    }
}
FsIFrameScrollToDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameScrollToDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
FsIFrameScrollToDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsIFrameScrollToDirective, selector: "[fsIFrameScrollTo]", host: { listeners: { "click": "onClick($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameScrollToDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fsIFrameScrollTo]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

function parseEvent(event) {
    if (event.data && isString(event.data)) {
        const matches = event.data.match(/(fs-iframe):(.*)/);
        if (matches) {
            try {
                return JSON.parse(matches[2]);
            }
            catch (e) { }
        }
    }
    return { name: null, value: null };
}

class FsIFrameDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.offset = 0;
    }
    ngOnInit() {
        this.renderer.addClass(this.elementRef.nativeElement, 'fs-iframe');
    }
    onMessage(event) {
        const data = parseEvent(event);
        if (data.name === 'height') {
            const height = data.value;
            this.renderer.setStyle(this.elementRef.nativeElement, 'height', height + 'px');
        }
        else if (data.name === 'scrollto') {
            window.document.documentElement.scrollTop = data.value + this.offset;
        }
        else if (data.name === 'offset') {
            this.offset = data.value;
        }
    }
}
FsIFrameDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
FsIFrameDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsIFrameDirective, selector: "[fsIFrame]", host: { listeners: { "window:message": "onMessage($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fsIFrame]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { onMessage: [{
                type: HostListener,
                args: ['window:message', ['$event']]
            }] } });

class FsIFrame {
    observeBody() {
        return interval(100)
            .subscribe(() => {
            const height = window.document.body.offsetHeight;
            if (this.height !== height) {
                this.updateHeight(height);
                this.height = height;
            }
        });
    }
    updateCurrentHeight() {
        this.updateHeight(window.document.body.offsetHeight);
    }
    updateHeight(value) {
        this.update('height', value);
    }
    update(name, value) {
        postMessage({ name: name, value: value });
    }
}
FsIFrame.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrame, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
FsIFrame.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrame });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrame, decorators: [{
            type: Injectable
        }] });

class FsIFrameComponent {
    constructor() {
        this._destroy$ = new Subject();
    }
    onload() {
        this.updateHeight();
    }
    get frameEl() {
        var _a;
        return (_a = this.frame) === null || _a === void 0 ? void 0 : _a.nativeElement;
    }
    ngAfterViewInit() {
        fromEvent(window, 'resize')
            .pipe(debounceTime(50), takeUntil(this._destroy$))
            .subscribe(() => {
            this.updateHeight();
        });
        if (this.html) {
            this._updateBodyFrames();
        }
    }
    _updateBodyFrames() {
        const win = this.frameEl.contentWindow;
        const doc = win.document;
        const data = `
    <style>
      body {
        font-family: Roboto;
        font-size: 15px;
        margin: 0 !important;
        overflow-y: hidden !important;
        width: auto !important;
      }

      a {
        color: #1155CC;
      }

      * {
        box-sizing: border-box !important;
      }

      ${this.styles}
    </style>
    ${this.html}`;
        doc.open();
        doc.write(data);
        doc.close();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    updateHeight() {
        if (this.frameEl) {
            this.frameEl.removeAttribute('height');
            this.frameEl.setAttribute('height', this.frameEl.contentDocument.body.scrollHeight);
        }
    }
}
FsIFrameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FsIFrameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsIFrameComponent, selector: "fs-iframe", inputs: { html: "html", styles: "styles" }, viewQueries: [{ propertyName: "frame", first: true, predicate: ["frame"], descendants: true }], ngImport: i0, template: "<iframe #frame (load)=\"onload()\"></iframe>\n", styles: ["iframe{width:100%;border:none}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-iframe',
                    templateUrl: './iframe.component.html',
                    styleUrls: ['./iframe.component.scss'],
                }]
        }], propDecorators: { frame: [{
                type: ViewChild,
                args: ['frame']
            }], html: [{
                type: Input
            }], styles: [{
                type: Input
            }] } });

class FsIFrameModule {
    static forRoot() {
        return {
            ngModule: FsIFrameModule,
            providers: [FsIFrame]
        };
    }
}
FsIFrameModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
FsIFrameModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameModule, declarations: [FsIFrameScrollToDirective,
        FsIFrameDirective,
        FsIFrameComponent], imports: [CommonModule], exports: [FsIFrameScrollToDirective,
        FsIFrameDirective,
        FsIFrameComponent] });
FsIFrameModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameModule, imports: [[
            CommonModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                    ],
                    exports: [
                        FsIFrameScrollToDirective,
                        FsIFrameDirective,
                        FsIFrameComponent,
                    ],
                    declarations: [
                        FsIFrameScrollToDirective,
                        FsIFrameDirective,
                        FsIFrameComponent,
                    ],
                }]
        }] });

// Modules

/**
 * Generated bundle index. Do not edit.
 */

export { FsIFrame, FsIFrameComponent, FsIFrameDirective, FsIFrameModule, FsIFrameScrollToDirective };
//# sourceMappingURL=firestitch-iframe.js.map
