import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { Subject, fromEvent } from 'rxjs';
import * as i0 from "@angular/core";
export class FsIFrameComponent {
    constructor() {
        this._destroy$ = new Subject();
    }
    onload() {
        this.updateHeight();
    }
    get frameEl() {
        var _a;
        return (_a = this.frame) === null || _a === void 0 ? void 0 : _a.nativeElement;
    }
    ngAfterViewInit() {
        fromEvent(window, 'resize')
            .pipe(debounceTime(50), takeUntil(this._destroy$))
            .subscribe(() => {
            this.updateHeight();
        });
        if (this.html) {
            this._updateBodyFrames();
        }
    }
    _updateBodyFrames() {
        const win = this.frameEl.contentWindow;
        const doc = win.document;
        const data = `
    <style>
      body {
        font-family: Roboto;
        font-size: 15px;
        margin: 0 !important;
        overflow-y: hidden !important;
        width: auto !important;
      }

      a {
        color: #1155CC;
      }

      * {
        box-sizing: border-box !important;
      }

      ${this.styles}
    </style>
    ${this.html}`;
        doc.open();
        doc.write(data);
        doc.close();
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    updateHeight() {
        if (this.frameEl) {
            this.frameEl.removeAttribute('height');
            this.frameEl.setAttribute('height', this.frameEl.contentDocument.body.scrollHeight);
        }
    }
}
FsIFrameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FsIFrameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FsIFrameComponent, selector: "fs-iframe", inputs: { html: "html", styles: "styles" }, viewQueries: [{ propertyName: "frame", first: true, predicate: ["frame"], descendants: true }], ngImport: i0, template: "<iframe #frame (load)=\"onload()\"></iframe>\n", styles: ["iframe{width:100%;border:none}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-iframe',
                    templateUrl: './iframe.component.html',
                    styleUrls: ['./iframe.component.scss'],
                }]
        }], propDecorators: { frame: [{
                type: ViewChild,
                args: ['frame']
            }], html: [{
                type: Input
            }], styles: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWZyYW1lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9pZnJhbWUvaWZyYW1lLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9pZnJhbWUvaWZyYW1lLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUE0QixLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWxHLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekQsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBUTFDLE1BQU0sT0FBTyxpQkFBaUI7SUFMOUI7UUFhVSxjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztLQW9FbkM7SUFsRVEsTUFBTTtRQUNYLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBVyxPQUFPOztRQUNoQixPQUFPLE1BQUEsSUFBSSxDQUFDLEtBQUssMENBQUUsYUFBYSxDQUFDO0lBQ25DLENBQUM7SUFFTSxlQUFlO1FBQ3BCLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDO2FBQ3hCLElBQUksQ0FDSCxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQ2hCLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQzFCO2FBQ0EsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsQ0FBQztRQUVMLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVPLGlCQUFpQjtRQUN2QixNQUFNLEdBQUcsR0FBVyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUMvQyxNQUFNLEdBQUcsR0FBYSxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQ25DLE1BQU0sSUFBSSxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFrQlQsSUFBSSxDQUFDLE1BQU07O01BRWIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWQsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1gsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBR00sV0FBVztRQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVNLFlBQVk7UUFDakIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDckY7SUFDSCxDQUFDOzsrR0ExRVUsaUJBQWlCO21HQUFqQixpQkFBaUIsNkxDWDlCLGdEQUNBOzRGRFVhLGlCQUFpQjtrQkFMN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztvQkFDckIsV0FBVyxFQUFFLHlCQUF5QjtvQkFDdEMsU0FBUyxFQUFFLENBQUMseUJBQXlCLENBQUM7aUJBQ3ZDOzhCQUlRLEtBQUs7c0JBRFgsU0FBUzt1QkFBQyxPQUFPO2dCQUdGLElBQUk7c0JBQW5CLEtBQUs7Z0JBQ1UsTUFBTTtzQkFBckIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBJbnB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGRlYm91bmNlVGltZSwgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3ViamVjdCwgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XG5cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZnMtaWZyYW1lJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lmcmFtZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2lmcmFtZS5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBGc0lGcmFtZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgQFZpZXdDaGlsZCgnZnJhbWUnKVxuICBwdWJsaWMgZnJhbWU6IEVsZW1lbnRSZWY7XG5cbiAgQElucHV0KCkgcHVibGljIGh0bWw7XG4gIEBJbnB1dCgpIHB1YmxpYyBzdHlsZXM7XG5cbiAgcHJpdmF0ZSBfZGVzdHJveSQgPSBuZXcgU3ViamVjdCgpO1xuXG4gIHB1YmxpYyBvbmxvYWQoKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVIZWlnaHQoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZnJhbWVFbCgpIHtcbiAgICByZXR1cm4gdGhpcy5mcmFtZT8ubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgZnJvbUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScpXG4gICAgICAucGlwZShcbiAgICAgICAgZGVib3VuY2VUaW1lKDUwKSxcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3kkKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlSGVpZ2h0KCk7XG4gICAgICB9KTtcblxuICAgIGlmICh0aGlzLmh0bWwpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUJvZHlGcmFtZXMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF91cGRhdGVCb2R5RnJhbWVzKCk6IHZvaWQge1xuICAgIGNvbnN0IHdpbjogV2luZG93ID0gdGhpcy5mcmFtZUVsLmNvbnRlbnRXaW5kb3c7XG4gICAgY29uc3QgZG9jOiBEb2N1bWVudCA9IHdpbi5kb2N1bWVudDtcbiAgICBjb25zdCBkYXRhID0gYFxuICAgIDxzdHlsZT5cbiAgICAgIGJvZHkge1xuICAgICAgICBmb250LWZhbWlseTogUm9ib3RvO1xuICAgICAgICBmb250LXNpemU6IDE1cHg7XG4gICAgICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xuICAgICAgICBvdmVyZmxvdy15OiBoaWRkZW4gIWltcG9ydGFudDtcbiAgICAgICAgd2lkdGg6IGF1dG8gIWltcG9ydGFudDtcbiAgICAgIH1cblxuICAgICAgYSB7XG4gICAgICAgIGNvbG9yOiAjMTE1NUNDO1xuICAgICAgfVxuXG4gICAgICAqIHtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveCAhaW1wb3J0YW50O1xuICAgICAgfVxuXG4gICAgICAke3RoaXMuc3R5bGVzfVxuICAgIDwvc3R5bGU+XG4gICAgJHt0aGlzLmh0bWx9YDtcblxuICAgIGRvYy5vcGVuKCk7XG4gICAgZG9jLndyaXRlKGRhdGEpO1xuICAgIGRvYy5jbG9zZSgpO1xuICB9XG5cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5fZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuX2Rlc3Ryb3kkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlSGVpZ2h0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmZyYW1lRWwpIHtcbiAgICAgIHRoaXMuZnJhbWVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgICAgdGhpcy5mcmFtZUVsLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5mcmFtZUVsLmNvbnRlbnREb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCk7XG4gICAgfVxuICB9XG5cbn1cbiIsIjxpZnJhbWUgI2ZyYW1lIChsb2FkKT1cIm9ubG9hZCgpXCI+PC9pZnJhbWU+XG4iXX0=