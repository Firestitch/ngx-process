import { Directive, Renderer2, ElementRef, HostListener } from '@angular/core';
import { parseEvent } from '../../functions/parse-event';
import * as i0 from "@angular/core";
export class FsIFrameDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.offset = 0;
    }
    ngOnInit() {
        this.renderer.addClass(this.elementRef.nativeElement, 'fs-iframe');
    }
    onMessage(event) {
        const data = parseEvent(event);
        if (data.name === 'height') {
            const height = data.value;
            this.renderer.setStyle(this.elementRef.nativeElement, 'height', height + 'px');
        }
        else if (data.name === 'scrollto') {
            window.document.documentElement.scrollTop = data.value + this.offset;
        }
        else if (data.name === 'offset') {
            this.offset = data.value;
        }
    }
}
FsIFrameDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
FsIFrameDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: FsIFrameDirective, selector: "[fsIFrame]", host: { listeners: { "window:message": "onMessage($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FsIFrameDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fsIFrame]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { onMessage: [{
                type: HostListener,
                args: ['window:message', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMtaWZyYW1lLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvZGlyZWN0aXZlcy9mcy1pZnJhbWUvZnMtaWZyYW1lLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBRXZGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQzs7QUFNekQsTUFBTSxPQUFPLGlCQUFpQjtJQUc1QixZQUFvQixVQUFzQixFQUFVLFFBQW1CO1FBQW5ELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBRC9ELFdBQU0sR0FBRyxDQUFDLENBQUM7SUFDdUQsQ0FBQztJQUUzRSxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUdELFNBQVMsQ0FBQyxLQUFLO1FBQ2IsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRS9CLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFFeEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDO1NBRWxGO2FBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtZQUNuQyxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBRXRFO2FBQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDMUI7SUFDSCxDQUFDOzsrR0F4QlUsaUJBQWlCO21HQUFqQixpQkFBaUI7NEZBQWpCLGlCQUFpQjtrQkFIN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsWUFBWTtpQkFDdkI7eUhBV0MsU0FBUztzQkFEUixZQUFZO3VCQUFDLGdCQUFnQixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHBhcnNlRXZlbnQgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvcGFyc2UtZXZlbnQnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tmc0lGcmFtZV0nXG59KVxuZXhwb3J0IGNsYXNzIEZzSUZyYW1lRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBwcml2YXRlIG9mZnNldCA9IDA7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdmcy1pZnJhbWUnKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzptZXNzYWdlJywgWyckZXZlbnQnXSlcbiAgb25NZXNzYWdlKGV2ZW50KSB7XG4gICAgY29uc3QgZGF0YSA9IHBhcnNlRXZlbnQoZXZlbnQpO1xuXG4gICAgaWYgKGRhdGEubmFtZSA9PT0gJ2hlaWdodCcpIHtcblxuICAgICAgICBjb25zdCBoZWlnaHQgPSBkYXRhLnZhbHVlO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnaGVpZ2h0JywgaGVpZ2h0ICsgJ3B4Jyk7XG5cbiAgICB9IGVsc2UgaWYgKGRhdGEubmFtZSA9PT0gJ3Njcm9sbHRvJykge1xuICAgICAgd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPSBkYXRhLnZhbHVlICsgdGhpcy5vZmZzZXQ7XG5cbiAgICB9IGVsc2UgaWYgKGRhdGEubmFtZSA9PT0gJ29mZnNldCcpIHtcbiAgICAgIHRoaXMub2Zmc2V0ID0gZGF0YS52YWx1ZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==