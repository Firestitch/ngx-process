import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { createItemsObserver } from '../../../helpers/create-items-observer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/menu";
import * as i2 from "@angular/common";
import * as i3 from "@angular/router";
export class MenuItemsListComponent {
    constructor(_cdRef) {
        this._cdRef = _cdRef;
        this._destroy$ = new Subject();
    }
    ngOnChanges(changes) {
        if (changes.items) {
            this._cdRef.detectChanges();
            this._destroy$.next();
            this.subscribeToChanges();
        }
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    /**
     * For improve ngFor perf
     * @param index
     */
    trackBy(index) {
        return index;
    }
    /**
     * Subscribe to changes in directive parameters.
     * For example we must start detect changes if [hidden] param was changed
     */
    subscribeToChanges() {
        if (this.items && this.items.length) {
            createItemsObserver(this.items)
                .pipe(takeUntil(this._destroy$))
                .subscribe(() => {
                this._cdRef.detectChanges();
            });
        }
    }
}
/** @nocollapse */ MenuItemsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: MenuItemsListComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MenuItemsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.13", type: MenuItemsListComponent, selector: "fs-menu-items-list", inputs: { items: "items", parentVisible: "parentVisible" }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngFor=\"let item of items; trackBy: trackBy\">\n  <ng-container *ngIf=\"item.isGroup; else menuItem\">\n    <div class=\"fs-menu-groupped-list\" [hidden]=\"!item.visible\">\n      <div class=\"mat-menu-item fs-menu-group-label\" disabled>\n        <ng-container *ngIf=\"!!item.label; else tpl\">\n          {{ item.label }}\n        </ng-container>\n        <ng-template #tpl\n                     [ngTemplateOutlet]=\"item.groupItemTemplateRef\">\n        </ng-template>\n      </div>\n      <fs-menu-items-list [items]=\"item.childrenItems\"\n                          [parentVisible]=\"item.visible\">\n      </fs-menu-items-list>\n    </div>\n  </ng-container>\n  <ng-template #menuItem>\n    <ng-container *ngIf=\"item.link; else btn\">\n      <a\n        mat-menu-item\n        *ngIf=\"item.visible\"\n        [routerLink]=\"item.link\"\n        [queryParams]=\"item.queryParams\"\n        [target]=\"item.target\"\n        (click)=\"item.click($event)\"\n        [class]=\"item.cssClass\"\n        [ngClass]=\"item.ngClass\"\n        [id]=\"item.cssId\">\n        <ng-template [ngTemplateOutlet]=\"item.templateRef\"></ng-template>\n      </a>\n    </ng-container>\n    <ng-template #btn>\n      <button type=\"button\"\n              mat-menu-item\n              *ngIf=\"item.visible\"\n              (click)=\"item.click($event)\"\n              [class]=\"item.cssClass\"\n              [ngClass]=\"item.ngClass\"\n              [id]=\"item.cssId\"\n      >\n        <ng-template [ngTemplateOutlet]=\"item.templateRef\"></ng-template>\n      </button>\n    </ng-template>\n  </ng-template>\n</ng-container>\n", styles: [":host ::ng-deep .fs-menu-groupped-list a,:host ::ng-deep .fs-menu-groupped-list button{padding-left:32px}\n"], components: [{ type: MenuItemsListComponent, selector: "fs-menu-items-list", inputs: ["items", "parentVisible"] }, { type: i1.MatMenuItem, selector: "[mat-menu-item]", inputs: ["disabled", "disableRipple", "role"], exportAs: ["matMenuItem"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: MenuItemsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-menu-items-list',
                    templateUrl: './menu-items-list.component.html',
                    styleUrls: ['./menu-items-list.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { items: [{
                type: Input
            }], parentVisible: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1pdGVtcy1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvY29tcG9uZW50cy9mcy1tZW51L21lbnUtaXRlbXMtbGlzdC9tZW51LWl0ZW1zLWxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9jb21wb25lbnRzL2ZzLW1lbnUvbWVudS1pdGVtcy1saXN0L21lbnUtaXRlbXMtbGlzdC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsS0FBSyxHQUlOLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDOzs7OztBQVU3RSxNQUFNLE9BQU8sc0JBQXNCO0lBVWpDLFlBQW9CLE1BQXlCO1FBQXpCLFdBQU0sR0FBTixNQUFNLENBQW1CO1FBRnJDLGNBQVMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBRWMsQ0FBQztJQUUxQyxXQUFXLENBQUMsT0FBc0I7UUFDdkMsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUV0QixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFTSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksT0FBTyxDQUFDLEtBQUs7UUFDbEIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBR0Q7OztPQUdHO0lBQ0ssa0JBQWtCO1FBQ3hCLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNuQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2lCQUM1QixJQUFJLENBQ0gsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FDMUI7aUJBQ0EsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQzlCLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDOzt1SUFqRFUsc0JBQXNCOzJIQUF0QixzQkFBc0IsMklDdkJuQyxrbURBNkNBLGdKRHRCYSxzQkFBc0I7NEZBQXRCLHNCQUFzQjtrQkFObEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixXQUFXLEVBQUUsa0NBQWtDO29CQUMvQyxTQUFTLEVBQUUsQ0FBRSxrQ0FBa0MsQ0FBRTtvQkFDakQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEO3dHQUlRLEtBQUs7c0JBRFgsS0FBSztnQkFJQyxhQUFhO3NCQURuQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgY3JlYXRlSXRlbXNPYnNlcnZlciB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMvY3JlYXRlLWl0ZW1zLW9ic2VydmVyJztcbmltcG9ydCB7IEZzTWVudUl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuLi8uLi8uLi9kaXJlY3RpdmVzL21lbnUtaXRlbS9mcy1tZW51LWl0ZW0uZGlyZWN0aXZlJztcblxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmcy1tZW51LWl0ZW1zLWxpc3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWVudS1pdGVtcy1saXN0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbICcuL21lbnUtaXRlbXMtbGlzdC5jb21wb25lbnQuc2NzcycgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE1lbnVJdGVtc0xpc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG5cbiAgQElucHV0KClcbiAgcHVibGljIGl0ZW1zOiBGc01lbnVJdGVtRGlyZWN0aXZlW107XG5cbiAgQElucHV0KClcbiAgcHVibGljIHBhcmVudFZpc2libGU6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBfZGVzdHJveSQgPSBuZXcgU3ViamVjdCgpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChjaGFuZ2VzLml0ZW1zKSB7XG4gICAgICB0aGlzLl9jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICB0aGlzLl9kZXN0cm95JC5uZXh0KCk7XG5cbiAgICAgIHRoaXMuc3Vic2NyaWJlVG9DaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuX2Rlc3Ryb3kkLm5leHQoKTtcbiAgICB0aGlzLl9kZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvciBpbXByb3ZlIG5nRm9yIHBlcmZcbiAgICogQHBhcmFtIGluZGV4XG4gICAqL1xuICBwdWJsaWMgdHJhY2tCeShpbmRleCkge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZSB0byBjaGFuZ2VzIGluIGRpcmVjdGl2ZSBwYXJhbWV0ZXJzLlxuICAgKiBGb3IgZXhhbXBsZSB3ZSBtdXN0IHN0YXJ0IGRldGVjdCBjaGFuZ2VzIGlmIFtoaWRkZW5dIHBhcmFtIHdhcyBjaGFuZ2VkXG4gICAqL1xuICBwcml2YXRlIHN1YnNjcmliZVRvQ2hhbmdlcygpIHtcbiAgICBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCkge1xuICAgICAgY3JlYXRlSXRlbXNPYnNlcnZlcih0aGlzLml0ZW1zKVxuICAgICAgICAucGlwZShcbiAgICAgICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveSQpXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXM7IHRyYWNrQnk6IHRyYWNrQnlcIj5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW0uaXNHcm91cDsgZWxzZSBtZW51SXRlbVwiPlxuICAgIDxkaXYgY2xhc3M9XCJmcy1tZW51LWdyb3VwcGVkLWxpc3RcIiBbaGlkZGVuXT1cIiFpdGVtLnZpc2libGVcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtYXQtbWVudS1pdGVtIGZzLW1lbnUtZ3JvdXAtbGFiZWxcIiBkaXNhYmxlZD5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiEhaXRlbS5sYWJlbDsgZWxzZSB0cGxcIj5cbiAgICAgICAgICB7eyBpdGVtLmxhYmVsIH19XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8bmctdGVtcGxhdGUgI3RwbFxuICAgICAgICAgICAgICAgICAgICAgW25nVGVtcGxhdGVPdXRsZXRdPVwiaXRlbS5ncm91cEl0ZW1UZW1wbGF0ZVJlZlwiPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZnMtbWVudS1pdGVtcy1saXN0IFtpdGVtc109XCJpdGVtLmNoaWxkcmVuSXRlbXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBbcGFyZW50VmlzaWJsZV09XCJpdGVtLnZpc2libGVcIj5cbiAgICAgIDwvZnMtbWVudS1pdGVtcy1saXN0PlxuICAgIDwvZGl2PlxuICA8L25nLWNvbnRhaW5lcj5cbiAgPG5nLXRlbXBsYXRlICNtZW51SXRlbT5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaXRlbS5saW5rOyBlbHNlIGJ0blwiPlxuICAgICAgPGFcbiAgICAgICAgbWF0LW1lbnUtaXRlbVxuICAgICAgICAqbmdJZj1cIml0ZW0udmlzaWJsZVwiXG4gICAgICAgIFtyb3V0ZXJMaW5rXT1cIml0ZW0ubGlua1wiXG4gICAgICAgIFtxdWVyeVBhcmFtc109XCJpdGVtLnF1ZXJ5UGFyYW1zXCJcbiAgICAgICAgW3RhcmdldF09XCJpdGVtLnRhcmdldFwiXG4gICAgICAgIChjbGljayk9XCJpdGVtLmNsaWNrKCRldmVudClcIlxuICAgICAgICBbY2xhc3NdPVwiaXRlbS5jc3NDbGFzc1wiXG4gICAgICAgIFtuZ0NsYXNzXT1cIml0ZW0ubmdDbGFzc1wiXG4gICAgICAgIFtpZF09XCJpdGVtLmNzc0lkXCI+XG4gICAgICAgIDxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJpdGVtLnRlbXBsYXRlUmVmXCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvYT5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8bmctdGVtcGxhdGUgI2J0bj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgIG1hdC1tZW51LWl0ZW1cbiAgICAgICAgICAgICAgKm5nSWY9XCJpdGVtLnZpc2libGVcIlxuICAgICAgICAgICAgICAoY2xpY2spPVwiaXRlbS5jbGljaygkZXZlbnQpXCJcbiAgICAgICAgICAgICAgW2NsYXNzXT1cIml0ZW0uY3NzQ2xhc3NcIlxuICAgICAgICAgICAgICBbbmdDbGFzc109XCJpdGVtLm5nQ2xhc3NcIlxuICAgICAgICAgICAgICBbaWRdPVwiaXRlbS5jc3NJZFwiXG4gICAgICA+XG4gICAgICAgIDxuZy10ZW1wbGF0ZSBbbmdUZW1wbGF0ZU91dGxldF09XCJpdGVtLnRlbXBsYXRlUmVmXCI+PC9uZy10ZW1wbGF0ZT5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIDwvbmctdGVtcGxhdGU+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==