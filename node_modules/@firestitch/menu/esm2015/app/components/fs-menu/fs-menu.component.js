import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, EventEmitter, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { MatBottomSheet } from '@angular/material/bottom-sheet';
import { MatMenu, MatMenuTrigger } from '@angular/material/menu';
import { BreakpointObserver } from '@angular/cdk/layout';
import { Subject } from 'rxjs';
import { debounceTime, takeUntil } from 'rxjs/operators';
import { FsBottomSheetComponent } from './bottom-sheet/fs-bottom-sheet.component';
import { FsMenuItemDirective } from '../../directives/menu-item/fs-menu-item.directive';
import { FsMenuTitleDirective } from '../../directives/menu-title/fs-menu-title.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/bottom-sheet";
import * as i2 from "@angular/cdk/layout";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/menu";
import * as i6 from "./menu-items-list/menu-items-list.component";
import * as i7 from "@angular/common";
export class FsMenuComponent {
    constructor(_bottomSheet, _breakpointObserver, _cd) {
        this._bottomSheet = _bottomSheet;
        this._breakpointObserver = _breakpointObserver;
        this._cd = _cd;
        this.klass = null;
        this.buttonClass = '';
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
        // Items with TemplateRefs and DirectiveRef for passing to bottomSheet
        this.items = [];
        this.useInternalTrigger = false;
        this.mobile = false;
        this.menuOpened = false;
        this.initialized = false;
        this._resolutionChanged = false;
        // Active bottom sheet that was opened
        this._activeSheetRef = null;
        this._destroy$ = new Subject();
        this._cd.detach();
    }
    set itemsElements(value) {
        this.items = value.toArray();
    }
    // Catch trigger for matMenu
    set internalMatMenuTrigger(val) {
        if (val) {
            this.useInternalTrigger = true;
        }
        this._internalMatMenuTrigger = val;
    }
    ;
    set externalMatMenuTrigger(val) {
        this.useInternalTrigger = false;
        this._externalMatMenuTrigger = val;
        this._cd.detectChanges();
    }
    set resolutionChanged(val) {
        this._resolutionChanged = val;
    }
    get resolutionChanged() {
        return this._resolutionChanged;
    }
    get matMenuTrigger() {
        if (this.useInternalTrigger) {
            return this._internalMatMenuTrigger;
        }
        else {
            return this._externalMatMenuTrigger;
        }
    }
    ngOnInit() {
        this.subscribeToResChanges();
        this.initialized = true;
        this._cd.detectChanges();
    }
    ngAfterViewInit() {
        if (!this._externalMatMenuTrigger) {
            this.useInternalTrigger = true;
            this._cd.detectChanges();
        }
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    /**
     * Subscribe to window resolution changes
     * and switch between mobile and desktop
     */
    subscribeToResChanges() {
        const layoutChanges = this._breakpointObserver.observe([
            FsMenuComponent.MOBILE_BREAKPOINT,
        ]);
        layoutChanges
            .pipe(debounceTime(500), takeUntil(this._destroy$))
            .subscribe(result => {
            // Set mobile/desktop flag
            this.mobile = result.breakpoints[FsMenuComponent.MOBILE_BREAKPOINT];
            if (this.menuOpened) {
                // Flag that menus was closed not by user
                this.resolutionChanged = true;
                if (this.mobile) {
                    this.closeMatMenu();
                    this.openSheetMenu();
                }
                else {
                    this.closeSheetMenu();
                    // Must be here because we should wait till menuTrigger will be catched by @ViewChild
                    setTimeout(() => {
                        if (this.matMenuTrigger) {
                            this.matMenuTrigger.openMenu();
                            // Detect changes because for strategies like OnPush if won't detected by default
                            this._cd.detectChanges();
                        }
                    });
                }
                // Detect changes because for strategies like OnPush if won't detected by default
                this._cd.detectChanges();
            }
            else {
                // Detect changes because for strategies like OnPush if won't detected by default
                this._cd.detectChanges();
            }
        });
    }
    /**
     * Open fs menu depends from mode
     */
    openMenu() {
        if (this.mobile) {
            this.openSheetMenu();
        }
        else {
            this.openMatMenu();
        }
        this.opened.emit();
        this._cd.detectChanges();
    }
    /**
     * Close fs menu depends from mode
     */
    closeMenu() {
        if (this.mobile) {
            this.closeSheetMenu();
        }
        else {
            this.closeMatMenu();
        }
    }
    /**
     * Open Mat Menu
     */
    openMatMenu() {
        this.menuOpened = true;
        this.resolutionChanged = false;
        this.matMenuTrigger.openMenu();
    }
    /**
     * Close Mat Menu
     */
    closeMatMenu() {
        if (this.matMenuTrigger) {
            this.matMenuTrigger.closeMenu();
        }
    }
    /**
     * After menu close event
     */
    closedMatMenu() {
        if (!this.resolutionChanged) {
            this.menuOpened = false;
        }
        this.resolutionChanged = false;
        this.closed.emit();
    }
    /**
     * Open Mat Bottom Sheet
     */
    openSheetMenu() {
        this._activeSheetRef = this._bottomSheet.open(FsBottomSheetComponent, {
            data: { items: this.items, titleTemplate: this.titleTemplate, klass: this.klass }
        });
        this.menuOpened = true;
        this._activeSheetRef.afterDismissed()
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            if (!this.resolutionChanged) {
                this.menuOpened = false;
            }
            this.resolutionChanged = false;
        });
    }
    /**
     * Close Mat Bottom Sheet
     */
    closeSheetMenu() {
        if (this._activeSheetRef) {
            this._activeSheetRef.dismiss();
        }
    }
}
FsMenuComponent.MOBILE_BREAKPOINT = '(max-width: 599px)';
/** @nocollapse */ FsMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: FsMenuComponent, deps: [{ token: i1.MatBottomSheet }, { token: i2.BreakpointObserver }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ FsMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.13", type: FsMenuComponent, selector: "fs-menu", inputs: { klass: ["class", "klass"], buttonClass: "buttonClass" }, outputs: { opened: "opened", closed: "closed" }, queries: [{ propertyName: "titleTemplate", first: true, predicate: FsMenuTitleDirective, descendants: true, read: TemplateRef }, { propertyName: "itemsElements", predicate: FsMenuItemDirective }], viewQueries: [{ propertyName: "internalMatMenuTrigger", first: true, predicate: MatMenuTrigger, descendants: true }, { propertyName: "fsMenuRef", first: true, predicate: ["fsMenu"], descendants: true, static: true }], ngImport: i0, template: "<ng-template [ngIf]=\"!mobile\" [ngIfElse]=\"sheetMenu\">\n  <button type=\"button\"\n          [ngClass]=\"buttonClass\"\n          mat-icon-button\n          *ngIf=\"useInternalTrigger\"\n          [matMenuTriggerFor]=\"fsMenu\"\n          #menuTrigger=\"matMenuTrigger\"\n          (click)=\"openMenu()\"\n  >\n    <mat-icon>more_vert</mat-icon>\n  </button>\n</ng-template>\n\n<ng-template #sheetMenu>\n  <button type=\"button\"\n          mat-icon-button\n          [ngClass]=\"buttonClass\"\n          *ngIf=\"useInternalTrigger\"\n          (click)=\"openMenu()\">\n    <mat-icon>more_vert</mat-icon>\n  </button>\n</ng-template>\n\n\n<mat-menu #fsMenu=\"matMenu\" [class]=\"klass\" (close)=\"closedMatMenu()\">\n  <div class=\"mat-menu-item fs-menu-title\" *ngIf=\"titleTemplate\" disabled>\n    <ng-template [ngTemplateOutlet]=\"titleTemplate\"></ng-template>\n  </div>\n  <div class=\"fs-menu-container\" [ngClass]=\"{ 'with-title': !!titleTemplate }\">\n    <fs-menu-items-list [items]=\"items\"></fs-menu-items-list>\n  </div>\n</mat-menu>\n", styles: ["::ng-deep *[hidden]{display:none!important}\n"], components: [{ type: i3.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { type: i5.MatMenu, selector: "mat-menu", exportAs: ["matMenu"] }, { type: i6.MenuItemsListComponent, selector: "fs-menu-items-list", inputs: ["items", "parentVisible"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.MatMenuTrigger, selector: "[mat-menu-trigger-for], [matMenuTriggerFor]", exportAs: ["matMenuTrigger"] }, { type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: FsMenuComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-menu',
                    templateUrl: 'fs-menu.component.html',
                    styleUrls: ['fs-menu.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MatBottomSheet }, { type: i2.BreakpointObserver }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { klass: [{
                type: Input,
                args: ['class']
            }], buttonClass: [{
                type: Input,
                args: ['buttonClass']
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], titleTemplate: [{
                type: ContentChild,
                args: [FsMenuTitleDirective, { read: TemplateRef }]
            }], itemsElements: [{
                type: ContentChildren,
                args: [FsMenuItemDirective]
            }], internalMatMenuTrigger: [{
                type: ViewChild,
                args: [MatMenuTrigger]
            }], fsMenuRef: [{
                type: ViewChild,
                args: ['fsMenu', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,