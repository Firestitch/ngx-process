import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input } from '@angular/core';
import { MatBottomSheetRef } from '@angular/material/bottom-sheet';
import { Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { createItemsObserver } from '../../../../helpers/create-items-observer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/bottom-sheet";
import * as i2 from "@angular/common";
import * as i3 from "@angular/router";
export class BottomItemsListComponent {
    constructor(_bottomSheetRef, _cdRef) {
        this._bottomSheetRef = _bottomSheetRef;
        this._cdRef = _cdRef;
        this._destroy$ = new Subject();
        this._cdRef.detach();
    }
    ngOnInit() {
        this._cdRef.detectChanges();
    }
    ngOnChanges(changes) {
        if (changes.items) {
            this._destroy$.next();
            this.subscribeToChanges();
        }
    }
    /**
     * For improve ngFor perf
     * @param index
     */
    trackBy(index) {
        return index;
    }
    /**
     * Click on element
     * @param event
     * @param item
     */
    click(event, item) {
        event.preventDefault();
        const subscription = this._bottomSheetRef.afterDismissed()
            .pipe(take(1))
            .subscribe(() => {
            if (item === null || item === void 0 ? void 0 : item.click) {
                item.click(event);
            }
            subscription.unsubscribe();
        });
        if (item === null || item === void 0 ? void 0 : item.dismissAfterClick) {
            this._bottomSheetRef.dismiss();
        }
    }
    /**
     * Subscribe to changes in directive parameters.
     * For example we must start detect changes if [hidden] param was changed
     */
    subscribeToChanges() {
        if (this.items && this.items.length) {
            createItemsObserver(this.items)
                .pipe(takeUntil(this._destroy$))
                .subscribe(() => {
                this._cdRef.detectChanges();
            });
        }
    }
}
/** @nocollapse */ BottomItemsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: BottomItemsListComponent, deps: [{ token: i1.MatBottomSheetRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BottomItemsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.13", type: BottomItemsListComponent, selector: "fs-bottom-items-list", inputs: { items: "items", parentVisible: "parentVisible" }, usesOnChanges: true, ngImport: i0, template: "<ng-container *ngFor=\"let item of items; trackBy: trackBy\">\n  <ng-container *ngIf=\"item.isGroup else menuItem\">\n    <div class=\"mat-menu-item\" [hidden]=\"!item.visible\" disabled>\n      <ng-container *ngIf=\"!!item.label; else tpl\">\n        {{ item.label }}\n      </ng-container>\n      <ng-template #tpl\n                   [ngTemplateOutlet]=\"item.groupItemTemplateRef\">\n      </ng-template>\n    </div>\n    <fs-bottom-items-list [items]=\"item.childrenItems\"\n                          [hidden]=\"!item.visible\"\n                          [parentVisible]=\"item.visible\"\n                          class=\"group\">\n    </fs-bottom-items-list>\n  </ng-container>\n  <ng-template #menuItem>\n    <ng-container *ngIf=\"item.visible\">\n      <ng-container *ngIf=\"item.link; else btnLikeAction\">\n        <a (click)=\"click($event, item)\"\n           [routerLink]=\"item.link\"\n           [queryParams]=\"item.queryParams\"\n           [target]=\"item.target\"\n           [class]=\"'mat-menu-item ' + item.cssClass\"\n           [ngClass]=\"item.ngClass\"\n           [id]=\"item.cssId\"\n        >\n          <ng-template [ngTemplateOutlet]=\"item.templateRef\"></ng-template>\n        </a>\n      </ng-container>\n      <ng-template #btnLikeAction>\n        <a (click)=\"click($event, item)\"\n           [class]=\"'mat-menu-item ' + item.cssClass\"\n           [ngClass]=\"item.ngClass\"\n           [id]=\"item.cssId\"\n        >\n          <ng-template [ngTemplateOutlet]=\"item.templateRef\"></ng-template>\n        </a>\n      </ng-template>\n    </ng-container>\n  </ng-template>\n</ng-container>\n", styles: ["fs-bottom-items-list a.mat-menu-item{padding:0 32px}\n"], components: [{ type: BottomItemsListComponent, selector: "fs-bottom-items-list", inputs: ["items", "parentVisible"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: BottomItemsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'fs-bottom-items-list',
                    templateUrl: './bottom-items-list.component.html',
                    styleUrls: ['./bottom-items-list.component.scss'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MatBottomSheetRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { items: [{
                type: Input
            }], parentVisible: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,