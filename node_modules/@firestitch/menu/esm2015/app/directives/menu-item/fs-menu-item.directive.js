import { EventEmitter, ChangeDetectorRef, Directive, Input, Output, ContentChildren, TemplateRef, Optional, SkipSelf, ContentChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { FsGroupMenuItemTemplateDirective } from '../group-menu-item-template/fs-group-menu-item-template.directive';
import * as i0 from "@angular/core";
export class FsMenuItemDirective {
    constructor(cd, templateRef, parent) {
        this.cd = cd;
        this.templateRef = templateRef;
        this.parent = parent;
        this.ngClass = [];
        this.cssClass = '';
        this.cssId = '';
        this.hidden = false;
        this.dismissAfterClick = true;
        this.target = null;
        this.queryParams = {};
        this.click$ = new EventEmitter();
        this.itemChange$ = new Subject();
        this._isGroup = false;
    }
    set itemsElements(value) {
        this.childrenItems = value.toArray()
            .filter((child) => child !== this);
        this._isGroup = !!this.childrenItems;
        this.checkChildrenVisibility();
        this.itemChange$.next();
    }
    get isGroup() {
        return this._isGroup;
    }
    get visible() {
        if (this.groupHidden !== void 0) {
            return !this.groupHidden;
        }
        else {
            return !this.hidden;
        }
    }
    get groupItemTemplateRef() {
        return this._groupItemTemplateRef;
    }
    ngOnChanges(changes) {
        if (!this.isGroup && this.parent && changes.hidden && !changes.hidden.firstChange) {
            this.parent.checkChildrenVisibility();
        }
        this.itemChange$.next();
    }
    checkChildrenVisibility() {
        if (this.childrenItems) {
            this.hidden = this.childrenItems.every((item) => item.hidden);
        }
    }
    ngOnDestroy() {
        this.itemChange$.complete();
    }
    click(event) {
        this.click$.next(event);
    }
}
/** @nocollapse */ FsMenuItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: FsMenuItemDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.TemplateRef, optional: true }, { token: FsMenuItemDirective, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ FsMenuItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.13", type: FsMenuItemDirective, selector: "fs-menu-group,[fs-menu-item]", inputs: { ngClass: ["fsClass", "ngClass"], cssClass: ["class", "cssClass"], cssId: ["id", "cssId"], label: "label", hidden: "hidden", groupHidden: "groupHidden", dismissAfterClick: "dismissAfterClick", link: "link", target: "target", queryParams: "queryParams" }, outputs: { click$: "click" }, queries: [{ propertyName: "_groupItemTemplateRef", first: true, predicate: FsGroupMenuItemTemplateDirective, descendants: true, read: TemplateRef }, { propertyName: "itemsElements", predicate: FsMenuItemDirective }], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.13", ngImport: i0, type: FsMenuItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'fs-menu-group,[fs-menu-item]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }, { type: FsMenuItemDirective, decorators: [{
                    type: SkipSelf
                }, {
                    type: Optional
                }] }]; }, propDecorators: { ngClass: [{
                type: Input,
                args: ['fsClass']
            }], cssClass: [{
                type: Input,
                args: ['class']
            }], cssId: [{
                type: Input,
                args: ['id']
            }], label: [{
                type: Input
            }], hidden: [{
                type: Input
            }], groupHidden: [{
                type: Input
            }], dismissAfterClick: [{
                type: Input
            }], link: [{
                type: Input
            }], target: [{
                type: Input
            }], queryParams: [{
                type: Input
            }], click$: [{
                type: Output,
                args: ['click']
            }], itemsElements: [{
                type: ContentChildren,
                args: [FsMenuItemDirective]
            }], _groupItemTemplateRef: [{
                type: ContentChild,
                args: [FsGroupMenuItemTemplateDirective, { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMtbWVudS1pdGVtLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvZGlyZWN0aXZlcy9tZW51LWl0ZW0vZnMtbWVudS1pdGVtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsS0FBSyxFQUdMLE1BQU0sRUFDTixlQUFlLEVBQ2YsV0FBVyxFQUVYLFFBQVEsRUFDUixRQUFRLEVBQ1IsWUFBWSxHQUNiLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sbUVBQW1FLENBQUM7O0FBTXJILE1BQU0sT0FBTyxtQkFBbUI7SUFrQzlCLFlBQ1MsRUFBcUIsRUFDVCxXQUE2QixFQUNqQixNQUEyQjtRQUZuRCxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUNULGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUNqQixXQUFNLEdBQU4sTUFBTSxDQUFxQjtRQXBDbkMsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUNmLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDakIsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUVmLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFFZixzQkFBaUIsR0FBRyxJQUFJLENBQUM7UUFFekIsV0FBTSxHQUFXLElBQUksQ0FBQztRQUN0QixnQkFBVyxHQUF5QixFQUFFLENBQUM7UUFFL0IsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFlN0MsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBSzNCLGFBQVEsR0FBRyxLQUFLLENBQUM7SUFNdEIsQ0FBQztJQXhCSixJQUNXLGFBQWEsQ0FBQyxLQUFLO1FBQzVCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRTthQUNqQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQztRQUVyQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQ3JDLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1FBRS9CLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQWlCRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksT0FBTztRQUNULElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxLQUFLLENBQUMsRUFBRTtZQUMvQixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUMxQjthQUFNO1lBQ0wsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBRUQsSUFBSSxvQkFBb0I7UUFDdEIsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUM7SUFDcEMsQ0FBQztJQUVNLFdBQVcsQ0FBQyxPQUFzQjtRQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtZQUNqRixJQUFJLENBQUMsTUFBTSxDQUFDLHVCQUF1QixFQUFFLENBQUM7U0FDdkM7UUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSx1QkFBdUI7UUFDNUIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7SUFFTSxXQUFXO1FBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7O29JQTVFVSxtQkFBbUIsOEZBcUNXLG1CQUFtQjt3SEFyQ2pELG1CQUFtQiw2WkE2QmhCLGdDQUFnQywyQkFBVSxXQUFXLGdEQWZsRCxtQkFBbUI7NEZBZHpCLG1CQUFtQjtrQkFIL0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsOEJBQThCO2lCQUN6Qzs7MEJBcUNJLFFBQVE7OEJBQzhCLG1CQUFtQjswQkFBekQsUUFBUTs7MEJBQUksUUFBUTs0Q0FwQ0UsT0FBTztzQkFBL0IsS0FBSzt1QkFBQyxTQUFTO2dCQUNPLFFBQVE7c0JBQTlCLEtBQUs7dUJBQUMsT0FBTztnQkFDTSxLQUFLO3NCQUF4QixLQUFLO3VCQUFDLElBQUk7Z0JBQ0ssS0FBSztzQkFBcEIsS0FBSztnQkFDVSxNQUFNO3NCQUFyQixLQUFLO2dCQUNVLFdBQVc7c0JBQTFCLEtBQUs7Z0JBQ1UsaUJBQWlCO3NCQUFoQyxLQUFLO2dCQUNVLElBQUk7c0JBQW5CLEtBQUs7Z0JBQ1UsTUFBTTtzQkFBckIsS0FBSztnQkFDVSxXQUFXO3NCQUExQixLQUFLO2dCQUVrQixNQUFNO3NCQUE3QixNQUFNO3VCQUFDLE9BQU87Z0JBR0osYUFBYTtzQkFEdkIsZUFBZTt1QkFBQyxtQkFBbUI7Z0JBZ0I1QixxQkFBcUI7c0JBRDVCLFlBQVk7dUJBQUMsZ0NBQWdDLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRXZlbnRFbWl0dGVyLFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbiAgQ29udGVudENoaWxkcmVuLFxuICBUZW1wbGF0ZVJlZixcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgT3B0aW9uYWwsXG4gIFNraXBTZWxmLFxuICBDb250ZW50Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IEZzR3JvdXBNZW51SXRlbVRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi4vZ3JvdXAtbWVudS1pdGVtLXRlbXBsYXRlL2ZzLWdyb3VwLW1lbnUtaXRlbS10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ2ZzLW1lbnUtZ3JvdXAsW2ZzLW1lbnUtaXRlbV0nXG59KVxuZXhwb3J0IGNsYXNzIEZzTWVudUl0ZW1EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgnZnNDbGFzcycpIHB1YmxpYyBuZ0NsYXNzID0gW107XG4gIEBJbnB1dCgnY2xhc3MnKSBwdWJsaWMgY3NzQ2xhc3MgPSAnJztcbiAgQElucHV0KCdpZCcpIHB1YmxpYyBjc3NJZCA9ICcnO1xuICBASW5wdXQoKSBwdWJsaWMgbGFiZWw7XG4gIEBJbnB1dCgpIHB1YmxpYyBoaWRkZW4gPSBmYWxzZTtcbiAgQElucHV0KCkgcHVibGljIGdyb3VwSGlkZGVuOyAvLyB1c2VkIG9ubHkgZm9yIGdyb3Vwc1xuICBASW5wdXQoKSBwdWJsaWMgZGlzbWlzc0FmdGVyQ2xpY2sgPSB0cnVlO1xuICBASW5wdXQoKSBwdWJsaWMgbGluazogYW55W10gfCBzdHJpbmc7XG4gIEBJbnB1dCgpIHB1YmxpYyB0YXJnZXQ6IHN0cmluZyA9IG51bGw7XG4gIEBJbnB1dCgpIHB1YmxpYyBxdWVyeVBhcmFtczogeyBbazogc3RyaW5nXTogYW55IH0gPSB7fTtcblxuICBAT3V0cHV0KCdjbGljaycpIHB1YmxpYyBjbGljayQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihGc01lbnVJdGVtRGlyZWN0aXZlKVxuICBwdWJsaWMgc2V0IGl0ZW1zRWxlbWVudHModmFsdWUpIHtcbiAgICB0aGlzLmNoaWxkcmVuSXRlbXMgPSB2YWx1ZS50b0FycmF5KClcbiAgICAgIC5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZCAhPT0gdGhpcyk7XG5cbiAgICB0aGlzLl9pc0dyb3VwID0gISF0aGlzLmNoaWxkcmVuSXRlbXM7XG4gICAgdGhpcy5jaGVja0NoaWxkcmVuVmlzaWJpbGl0eSgpO1xuXG4gICAgdGhpcy5pdGVtQ2hhbmdlJC5uZXh0KCk7XG4gIH1cblxuICBwdWJsaWMgY2hpbGRyZW5JdGVtczogRnNNZW51SXRlbURpcmVjdGl2ZVtdO1xuXG4gIHB1YmxpYyBpdGVtQ2hhbmdlJCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgQENvbnRlbnRDaGlsZChGc0dyb3VwTWVudUl0ZW1UZW1wbGF0ZURpcmVjdGl2ZSwgeyByZWFkOiBUZW1wbGF0ZVJlZiB9KVxuICBwcml2YXRlIF9ncm91cEl0ZW1UZW1wbGF0ZVJlZjtcblxuICBwcml2YXRlIF9pc0dyb3VwID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBAT3B0aW9uYWwoKSBwdWJsaWMgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgQFNraXBTZWxmKCkgQE9wdGlvbmFsKCkgcHVibGljIHBhcmVudDogRnNNZW51SXRlbURpcmVjdGl2ZSxcbiAgKSB7fVxuXG4gIGdldCBpc0dyb3VwKCkge1xuICAgIHJldHVybiB0aGlzLl9pc0dyb3VwO1xuICB9XG5cbiAgZ2V0IHZpc2libGUoKSB7XG4gICAgaWYgKHRoaXMuZ3JvdXBIaWRkZW4gIT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuICF0aGlzLmdyb3VwSGlkZGVuO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gIXRoaXMuaGlkZGVuO1xuICAgIH1cbiAgfVxuXG4gIGdldCBncm91cEl0ZW1UZW1wbGF0ZVJlZigpOiBUZW1wbGF0ZVJlZjxGc0dyb3VwTWVudUl0ZW1UZW1wbGF0ZURpcmVjdGl2ZT4ge1xuICAgIHJldHVybiB0aGlzLl9ncm91cEl0ZW1UZW1wbGF0ZVJlZjtcbiAgfVxuXG4gIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKCF0aGlzLmlzR3JvdXAgJiYgdGhpcy5wYXJlbnQgJiYgY2hhbmdlcy5oaWRkZW4gJiYgIWNoYW5nZXMuaGlkZGVuLmZpcnN0Q2hhbmdlKSB7XG4gICAgICB0aGlzLnBhcmVudC5jaGVja0NoaWxkcmVuVmlzaWJpbGl0eSgpO1xuICAgIH1cblxuICAgIHRoaXMuaXRlbUNoYW5nZSQubmV4dCgpO1xuICB9XG5cbiAgcHVibGljIGNoZWNrQ2hpbGRyZW5WaXNpYmlsaXR5KCkge1xuICAgIGlmICh0aGlzLmNoaWxkcmVuSXRlbXMpIHtcbiAgICAgIHRoaXMuaGlkZGVuID0gdGhpcy5jaGlsZHJlbkl0ZW1zLmV2ZXJ5KChpdGVtKSA9PiBpdGVtLmhpZGRlbik7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuaXRlbUNoYW5nZSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBjbGljayhldmVudCkge1xuICAgIHRoaXMuY2xpY2skLm5leHQoZXZlbnQpO1xuICB9XG59XG4iXX0=